<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-information-model-03" category="std">

  <front>
    <title abbrev="A Firmware Manifest Information Model">Firmware Updates for Internet of Things Devices - An Information Model for Manifests</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="June" day="12"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices. Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.</t>

<t>One component of such a firmware update is the meta-data, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes all the information that must be present in the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The information model describes all the information elements required to secure firmware updates of IoT devices from the threats described in <xref target="threat-model"/> and enable the user stories captured in <xref target="user-stories"/>. These threats and user stories are not intended to be an exhaustive list of the threats against IoT devices, nor of the possible use cases of firmware update; instead they are intended to describe the threats against firmware update in isolation and provide sufficient motivation to provide information elements that cover a wide range of use cases. The information model does not define the encoding, ordering, or structure of information elements, only their semantics.</t>

<t>Because the information model covers a wide range of user stories and a wide range of threats, not all information elements apply to all scenarios. As a result, many information elements could be considered optional to implement and optional to use, depending on which threats exist in a particular system and which use cases are required. Elements marked as mandatory provide baseline security and usability properties that are expected to be required for most applications. Those elements are mandatory to implement and mandatory to use. Elements marked as recommended provide important security or usability properties that are needed on most devices. Elements marked as optional enable security or usability properties that are useful in some applications.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This document uses terms defined in <xref target="I-D.ietf-suit-architecture"/>.
The term ‘Operator’ refers to both, Device and Network Operator.</t>

<t>This document treats devices with a homogeneous storage architecture as devices with a heterogeneous storage architecture, but with a single storage subsystem.</t>

</section>
<section anchor="manifest-information-elements" title="Manifest Information Elements">

<t>Each manifest element is anchored in a security requirement or a usability requirement. The manifest elements are described below and justified by their requirements.</t>

<section anchor="element-version-id" title="Manifest Element: version identifier of the manifest structure">

<t>An identifier that describes which iteration of the manifest format is contained in the structure.</t>

<t>This element is MANDATORY and MUST be present in order to allow devices to identify the version of the manifest data model that is in use.</t>

</section>
<section anchor="element-sequence-number" title="Manifest Element: Monotonic Sequence Number">

<t>A monotonically increasing sequence number. For convenience, the monotonic sequence number MAY be a UTC timestamp. This allows global synchronisation of sequence numbers without any additional management. This number MUST be easily accessible so that code choosing one out of several manifests can choose which is the latest.</t>

<t>This element is MANDATORY and is necessary to prevent malicious actors from reverting a firmware update against the wishes of the relevant authority.</t>

<t>Implements: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="element-vendor-id" title="Manifest Element: Vendor ID Condition">

<t>Vendor IDs MUST be unique. This is to prevent similarly, or identically named entities from different geographic regions from colliding in their customer’s infrastructure. Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with the vendor’s domain name and the UUID DNS prefix. Other options include type 1 and type 4 UUIDs.</t>

<t>Note Well: Vendor ID is not a human-readable element. It is intended for match/mismatch use only.</t>

<t>This ID is RECOMMENDED and helps to distinguish between identically named products from different vendors.</t>

<t>Implements: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-domain-name-based-uuids" title="Example: Domain Name-based UUIDs">

<t>Vendor A creates a UUID based on their domain name:</t>

<t>vendorId = UUID5(DNS, “vendor-a.com”)</t>

<t>Because the DNS infrastructure prevents multiple registrations of the same domain name, this UUID is guaranteed to be unique. Because the domain name is known, this UUID is reproducible. Type 1 and type 4 UUIDs produce similar guarantees of uniqueness, but not reproducibility.</t>

</section>
</section>
<section anchor="element-class-id" title="Manifest Element: Class ID Condition">

<t>A device “Class” is defined as any device that can accept the same firmware update without modification. Class Identifiers MUST be unique within a Vendor ID. This is to prevent similarly, or identically named devices colliding in their customer’s infrastructure.</t>

<t>Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with as much information as necessary to define firmware compatibility. Possible information used to derive the class UUID includes:</t>

<t><list style="symbols">
  <t>model name or number</t>
  <t>hardware revision</t>
  <t>runtime library version</t>
  <t>bootloader version</t>
  <t>ROM revision</t>
  <t>silicon batch number</t>
</list></t>

<t>The Class Identifier UUID SHOULD use the Vendor ID as the UUID prefix. Other options include version 1 and 4 UUIDs. Classes MAY be more granular than is required to identify firmware compatibility. Classes MUST NOT be less granular than is required to identify firmware compatibility. Devices MAY have multiple Class IDs.</t>

<t>Note Well: Class ID is not a human-readable element. It is intended for match/mismatch use only.</t>

<t>Class ID is RECOMMENDED and allows devices to determine applicability of a firmware in an unambiguous way.</t>

<t>If Class ID is not implemented, then each logical device class MUST use a unique Root of Trust for authorisation.</t>

<t>Implements: Security Requirement <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-1-different-classes" title="Example 1: Different Classes">

<t>Vendor A creates product Z and product Y. The firmware images of products Z and Y are not interchangeable. Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>ZclassId = UUID5(vendorId, “Product Z”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
</list></t>

<t>This ensures that Vendor A’s Product Z cannot install firmware for Product Y and Product Y cannot install firmware for Product Z.</t>

</section>
<section anchor="example-2-upgrading-class-id" title="Example 2: Upgrading Class ID">

<t>Vendor A creates product X. Later, Vendor A adds a new feature to product X, creating product X v2. Product X requires a firmware update to work with firmware intended for product X v2.</t>

<t>Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>Xv2classId = UUID5(vendorId, “Product X v2”)</t>
</list></t>

<t>When product X receives the firmware update necessary to be compatible with product X v2, part of the firmware update changes the class ID to Xv2classId.</t>

</section>
<section anchor="example-3-shared-functionality" title="Example 3: Shared Functionality">

<t>Vendor A produces two products, product X and product Y. These components share a common core (such as an operating system), but have different applications. The common core and the applications can be updated independently. To enable X and Y to receive the same common core update, they require the same class ID. To ensure that only product X receives application X and only product Y receives application Y, product X and product Y must have different class IDs. The vendor creates Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
  <t>CommonClassId = UUID5(vendorId, “common core”)</t>
</list></t>

<t>Product X matches against both XclassId and CommonClassId. Product Y matches against both YclassId and CommonClassId.</t>

</section>
</section>
<section anchor="element-precursor-digest" title="Manifest Element: Precursor Image Digest Condition">

<t>When a precursor image is required by the payload format, a precursor image digest condition MUST be present in the conditions list. The precursor image may be installed or stored as a candidate.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Enables feature: differential updates.</t>

<t>Implements: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="element-required-version" title="Manifest Element: Required Image Version List">

<t>When a payload applies to multiple versions of a firmware, the required image version list specifies which versions must be present for the update to be applied. This allows the update author to target specific versions of firmware for an update, while excluding those to which it should not be applied.</t>

<t>Where an update can only be applied over specific predecessor versions, that version MUST be specified by the Required Image Version List.</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="manifest-element-expiration" title="Manifest Element: Expiration Time">

<t>This element tells a device the time at which the manifest expires and should no longer be used. This is only usable in conjunction with a secure clock.</t>

<t>This element is OPTIONAL and MAY enable use cases where a secure clock is provided and firmware is intended to expire predictably.</t>

<t>Implements: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="manifest-element-format" title="Manifest Element: Payload Format">

<t>The format of the payload MUST be indicated to devices is in an unambiguous way. This element provides a mechanism to describe the payload format, within the signed metadata.</t>

<t>This element is MANDATORY and MUST be present to enable devices to decode payloads correctly.</t>

<t>Implements: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref>, <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="manifest-element-processing-steps" title="Manifest Element: Processing Steps">

<t>A representation of the Processing Steps required to decode a payload. The representation MUST describe which algorithm(s) is used and any additional parameters required by the algorithm(s). The representation MAY group Processing Steps together in predefined combinations.</t>

<t>A Processing Step MAY indicate the expected digest of the payload after the processing is complete.</t>

<t>Processing steps are RECOMMENDED to implement.</t>

<t>Enables feature: Encrypted, compressed, packed formats</t>

<t>Implements: <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref></t>

</section>
<section anchor="maniest-element-storage-location" title="Manifest Element: Storage Location">

<t>This element tells the device where to store a payload within a given component. The device can use this to establish which permissions are necessary and the physical storage location to use.</t>

<t>This element is MANDATORY and MUST be present to enable devices to store payloads to the correct location.</t>

<t>Implements: <xref target="req-sec-authentic-image-location">REQ.SEC.AUTH.IMG_LOC</xref></t>

<section anchor="example-1-two-storage-locations" title="Example 1: Two Storage Locations">

<t>A device supports two components: an OS and an application. These components can be updated independently, expressing dependencies to ensure compatibility between the components. The firmware authority chooses two storage identifiers:</t>

<t><list style="symbols">
  <t>OS</t>
  <t>APP</t>
</list></t>

</section>
<section anchor="example-2-file-system" title="Example 2: File System">

<t>A device supports a full filesystem. The firmware authority chooses to make the storage identifier the path at which to install the payload. The payload may be a tarball, in which case, it unpacks the tarball into the specified path.</t>

</section>
<section anchor="example-3-flash-memory" title="Example 3: Flash Memory">

<t>A device supports flash memory. The firmware authority chooses to make the storage identifier the offset where the image should be written.</t>

</section>
</section>
<section anchor="manifest-element-component-identifier" title="Manifest Element: Component Identifier">

<t>In a heterogeneous storage architecture, a storage identifier is insufficient to identify where and how to store a payload. To resolve this, a component identifier indicates which part of the storage architecture is targeted by the payload. In a homogeneous storage architecture, this element is unnecessary.</t>

<t>This element is OPTIONAL and only necessary in heterogeneous storage architecture devices.</t>

<t>N.B. A serialisation MAY choose to combine Component Identifier and <xref target="maniest-element-storage-location">Storage Location</xref></t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-resource-indicator" title="Manifest Element: Resource Indicator">

<t>This element provides the information required for the device to acquire the resource. This can be encoded in several ways:</t>

<t><list style="symbols">
  <t>One URI</t>
  <t>A list of URIs</t>
  <t>A prioritised list or URIs</t>
  <t>A list of signed URIs</t>
</list></t>

<t>This element is OPTIONAL and only needed when the target device does not intrinsically know where to find the payload.</t>

<t>N.B. Devices will typically require URIs.</t>

<t>Implements: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="manifest-element-payload-digest" title="Manifest Element: Payload Digests">

<t>This element contains one or more digests of one or more payloads. This allows the target device to ensure authenticity of the payload(s). A serialisation MUST provide a mechanism to select one payload from a list based on system parameters, such as XIP address.</t>

<t>This element is MANDATORY to implement and fundamentally necessary to ensure the authenticity and integrity of the payload. Support for more than one digest is OPTIONAL to implement in a recipient device.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-size" title="Manifest Element: Size">

<t>The size of the payload in bytes.</t>

<t>Variable-size storage locations MUST be set to exactly the size listed in this element.</t>

<t>This element is MANDATORY and informs the target device how big of a payload to expect. Without it, devices are exposed to some classes of denial of service attack.</t>

<t>Implements: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="manifest-element-signature" title="Manifest Element: Signature">

<t>This is not strictly a manifest element. Instead, the manifest is wrapped by a standardised authentication container, such as a COSE (<xref target="RFC8152"/>) or CMS (<xref target="RFC5652"/>) signature object. The authentication container MUST support multiple actors and multiple authentication methods.</t>

<t>This element is MANDATORY and represents the foundation of all security properties of the manifest. There are two exceptions to this requirement: 1) if the manifest is authenticated by a second manifest as a dependency and 2) if the manifest is authenticated by channel security and contains only channel information (such as URIs).</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref></t>

</section>
<section anchor="manifest-element-additional-install-info" title="Manifest Element: Additional installation instructions">

<t>Instructions that the device should execute when processing the manifest. This information is distinct from the information necessary to process a payload. Additional installation instructions include information such as update timing (For example, install only on Sunday, at 0200), procedural considerations (for example, shut down the equipment under control before executing the update), pre and post-installation steps (for example, run a script).</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="manifest-element-aliases" title="Manifest Element: Aliases">

<t>A mechanism for a manifest to augment or replace URIs or URI lists defined by one or more of its dependencies.</t>

<t>This element is OPTIONAL and enables some use cases.</t>

<t>Implements: <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="manifest-element-dependencies" title="Manifest Element: Dependencies">

<t>A list of other manifests that are required by the current manifest. Manifests are identified an an unambiguous way, such as a digest.</t>

<t>This element is MANDATORY to use in deployments that include both multiple authorities and multiple payloads.</t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-encryption-wrapper" title="Manifest Element: Encryption Wrapper">

<t>Encrypting firmware images requires symmetric content encryption keys. The encryption wrapper provides the information needed for a device to obtain or locate a key that it uses to decrypt the firmware. Typical choices for an encryption wrapper include CMS (<xref target="RFC5652"/>) or COSE (<xref target="RFC8152"/>). This MAY be included in a decryption step contained in <xref target="manifest-element-processing-steps">Processing Steps</xref>.</t>

<t>This element is MANDATORY to use for encrypted payloads,</t>

<t>Implements: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="manifest-element-xip-address" title="Manifest Element: XIP Address">

<t>In order to support XIP systems with multiple possible base addresses, it is necessary to specify which address the payload is linked for.</t>

<t>For example a microcontroller may have a simple bootloader that chooses one of two images to boot. That microcontroller then needs to choose one of two firmware images to install, based on which of its two images is older.</t>

<t>Implements: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-load-metadata" title="Manifest Element: Load-time metadata">

<t>Load-time metadata provides the device with information that it needs in order to load one or more images. This is effectively a copy operation from the permanent storage location of an image into the active use location of that image. The metadata contains the source and destination of the image as well as any operations that are performed on the image.</t>

<t>Implements: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="manifest-element-exec-metadata" title="Manifest Element: Run-time metadata">

<t>Run-time metadata provides the device with any extra information needed to boot the device. This may include information such as the entry-point of an XIP image or the kernel command-line of a linux image.</t>

<t>Implements: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="manifest-element-payload" title="Manifest Element: Payload">

<t>The Payload element provides a recipient device with the whole payload, contained within the manifest superstructure. This enables the manifest and payload to be delivered simultaneously.</t>

<t>Implements: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="manifest-element-key-claims" title="Manifest Element: Key Claims">

<t>The Key Claims element is not authenticated by the <xref target="manifest-element-signature">Signature</xref>, instead, it provides a chain of key delegations (or references to them) for the device to follow in order to verify the key that authenticated the manifest using a trusted key.</t>

<t>Implements: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
</section>
<section anchor="design-motivation" title="Motivation for Manifest Fields">
<t>The following sub-sections describe the threat model, user stories, security requirements, and usability requirements.</t>

<section anchor="threat-model" title="Threat Model">

<t>The following sub-sections aim to provide information about the threats that were considered, the security requirements that are derived from those threats and the fields that permit implementation of the security requirements. This model uses the S.T.R.I.D.E. <xref target="STRIDE"/> approach. Each threat is classified according to:</t>

<t><list style="symbols">
  <t>Spoofing Identity</t>
  <t>Tampering with data</t>
  <t>Repudiation</t>
  <t>Information disclosure</t>
  <t>Denial of service</t>
  <t>Elevation of privilege</t>
</list></t>

<t>This threat model only covers elements related to the transport of firmware updates. It explicitly does not cover threats outside of the transport of firmware updates. For example, threats to an IoT device due to physical access are out of scope.</t>

</section>
<section anchor="threat-descriptions" title="Threat Descriptions">

<section anchor="threat-expired" title="THREAT.IMG.EXPIRED: Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker sends an old, but valid manifest with an old, but valid firmware image to a device. If there is a known vulnerability in the provided firmware image, this may allow an attacker to exploit the vulnerability and gain control of the device.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="threat-expired-rollback" title="THREAT.IMG.EXPIRED.ROLLBACK : Offline device + Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker targets a device that has been offline for a long time and runs an old firmware version. The attacker sends an old, but valid manifest to a device with an old, but valid firmware image. The attacker-provided firmware is newer than the installed one but older than the most recently available firmware. If there is a known vulnerability in the provided firmware image then this may allow an attacker to gain control of a device. Because the device has been offline for a long time, it is unaware of any new updates. As such it will treat the old manifest as the most current.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="threat-incompatible" title="THREAT.IMG.INCOMPATIBLE: Mismatched Firmware">

<t>Classification: Denial of Service</t>

<t>An attacker sends a valid firmware image, for the wrong type of device, signed by an actor with firmware installation permission on both types of device. The firmware is verified by the device positively because it is signed by an actor with the appropriate permission. This could have wide-ranging consequences. For devices that are similar, it could cause minor breakage, or expose security vulnerabilities. For devices that are very different, it is likely to render devices inoperable.</t>

<t>Mitigated by: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref></t>

<section anchor="example" title="Example:">

<t>Suppose that two vendors, Vendor A and Vendor B, adopt the same trade name in different geographic regions, and they both make products with the same names, or product name matching is not used. This causes firmware from Vendor A to match devices from Vendor B.</t>

<t>If the vendors are the firmware authorities, then devices from Vendor A will reject images signed by Vendor B since they use different credentials. However, if both devices trust the same firmware authority, then, devices from Vendor A could install firmware intended for devices from Vendor B.</t>

</section>
</section>
<section anchor="threat-img-format" title="THREAT.IMG.FORMAT: The target device misinterprets the type of payload">

<t>Classification: Denial of Service</t>

<t>If a device misinterprets the format of the firmware image, it may cause a device to install a firmware image incorrectly. An incorrectly installed firmware image would likely cause the device to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received firmware image may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref></t>

</section>
<section anchor="threat-img-location" title="THREAT.IMG.LOCATION: The target device installs the payload to the wrong location">

<t>Classification: Denial of Service</t>

<t>If a device installs a firmware image to the wrong location on the device, then it is likely to break. For example, a firmware image installed as an application could cause a device and/or an application to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received code may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_LOC</xref></t>

</section>
<section anchor="threat-net-redirect" title="THREAT.NET.REDIRECT: Redirection to inauthentic payload hosting">

<t>Classification: Denial of Service</t>

<t>If a device does not know where to obtain the payload for an update, it may be redirected to an attacker’s server. This would allow an attacker to provide broken payloads to devices.</t>

<t>Mitigated by: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="threatnetmitm" title="THREAT.NET.MITM">

</section>
<section anchor="threat-image-replacement" title="THREAT.IMG.REPLACE: Payload Replacement">

<t>Classification: Elevation of Privilege</t>

<t>An attacker replaces a newly downloaded firmware after a device finishes verifying a manifest. This could cause the device to execute the attacker’s code. This attack likely requires physical access to the device. However, it is possible that this attack is carried out in combination with another threat that allows remote execution. This is a typical Time Of Check/Time Of Use threat.</t>

<t>Threat Escalation: If the attacker is able to exploit a known
vulnerability, or if the attacker can supply their own firmware, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="threat-img-unauthenticated" title="THREAT.IMG.NON_AUTH: Unauthenticated Images">

<t>Classification: Elevation of Privilege / All Types</t>

<t>If an attacker can install their firmware on a device, by manipulating either payload or metadata, then they have complete control of the device.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref></t>

</section>
<section anchor="threat-upd-wrong-precursor" title="THREAT.UPD.WRONG_PRECURSOR: Unexpected Precursor images">

<t>Classification: Denial of Service / All Types</t>

<t>An attacker sends a valid, current manifest to a device that has an unexpected precursor image. If a payload format requires a precursor image (for example, delta updates) and that precursor image is not available on the target device, it could cause the update to break.</t>

<t>An attacker that can cause a device to install a payload against the wrong precursor image could gain elevation of privilege and potentially expand this to all types of threat. However, it is unlikely that a valid differential update applied to an incorrect precursor would result in a functional, but vulnerable firmware.</t>

<t>Mitigated by: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="threat-upd-interop" title="THREAT.UPD.INTEROP: Unqualified Firmware">

<t>Classification: Denial of Service, Elevation of Privilege</t>

<t>This threat can appear in several ways, however it is ultimately about interoperability of devices with other systems. The owner or operator of a network needs to approve firmware for their network in order to ensure interoperability with other devices on the network, or the network itself. If the firmware is not qualified, it may not work. Therefore, if a device installs firmware without the approval of the network owner or operator, this is a threat to devices and the network.</t>

<t>Threat Escalation: If the firmware expects configuration that is present in devices deployed in Network A, but not in devices deployed in Network B, then the device may experience degraded security, leading to threats of All Types.</t>

<t>Mitigated by: <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

<section anchor="example-1-multiple-network-operators-with-a-single-device-operator" title="Example 1: Multiple Network Operators with a Single Device Operator">

<t>In this example, assume that Device Operators expect the rights to create firmware but that Network Operators expect the rights to qualify firmware as fit-for-purpose on their networks. Additionally, assume that Device Operators manage devices that can be deployed on any network, including Network A and B in our example.</t>

<t>An attacker may obtain a manifest for a device on Network A. Then, this attacker sends that manifest to a device on Network B. Because Network A and Network B are under control of different Operators, and the firmware for a device on Network A has not been qualified to be deployed on Network B, the target device on Network B is now in violation of the Operator B’s policy and may be disabled by this unqualified, but signed firmware.</t>

<t>This is a denial of service because it can render devices inoperable. This is an elevation of privilege because it allows the attacker to make installation decisions that should be made by the Operator.</t>

</section>
<section anchor="example-2-single-network-operator-with-multiple-device-operators" title="Example 2: Single Network Operator with Multiple Device Operators">

<t>Multiple devices that interoperate are used on the same network and communicate with each other. Some devices are manufactured and managed by Device Operator A and other devices by Device Operator B. A new firmware is released by Device Operator A that breaks compatibility with devices from Device Operator B. An attacker sends the new firmware to the devices managed by Device Operator A without approval of the Network Operator. This breaks the behaviour of the larger system causing denial of service and possibly other threats. Where the network is a distributed SCADA system, this could cause misbehaviour of the process that is under control.</t>

</section>
</section>
<section anchor="threat-img-disclosure" title="THREAT.IMG.DISCLOSURE: Reverse Engineering Of Firmware Image for Vulnerability Analysis">

<t>Classification: All Types</t>

<t>An attacker wants to mount an attack on an IoT device. To prepare the attack he or she retrieves the provided firmware image and performs reverse engineering of the firmware image to analyze it for specific vulnerabilities.</t>

<t>Mitigated by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-mfst-override" title="THREAT.MFST.OVERRIDE: Overriding Critical Manifest Elements">

<t>Classification: Elevation of Privilege</t>

<t>An authorised actor, but not the firmware authority, uses an override mechanism (<xref target="user-story-override">USER_STORY.OVERRIDE</xref>) to change an information element in a manifest signed by the firmware authority. For example, if the authorised actor overrides the digest and URI of the payload, the actor can replace the entire payload with a payload of their choice.</t>

<t>Threat Escalation: By overriding elements such as payload installation instructions or firmware digest, this threat can be escalated to all types.</t>

<t>Mitigated by: <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="threat-mfst-exposure" title="THREAT.MFST.EXPOSURE: Confidential Manifest Element Exposure">

<t>Classification: Information Disclosure</t>

<t>A third party may be able to extract sensitive information from the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-img-extra" title="THREAT.IMG.EXTRA: Extra data after image">

<t>Classification: All Types</t>

<t>If a third party modifies the image so that it contains extra code after a valid, authentic image, that third party can then use their own code in order to make better use of an existing vulnerability</t>

<t>Mitigated by: <xref target="req-sec-img-complete-digest">REQ.SEC.IMG.COMPLETE_DIGEST</xref></t>

</section>
</section>
<section anchor="security-requirements" title="Security Requirements">

<t>The security requirements here are a set of policies that mitigate the threats described in <xref target="threat-model"/>.</t>

<section anchor="req-sec-sequence" title="REQ.SEC.SEQUENCE: Monotonic Sequence Numbers">

<t>Only an actor with firmware installation authority is permitted to decide when device firmware can be installed. To enforce this rule, manifests MUST contain monotonically increasing sequence numbers. Manifests MAY use UTC epoch timestamps to coordinate monotonically increasing sequence numbers across many actors in many locations. If UTC epoch timestamps are used, they MUST NOT be treated as times, they MUST be treated only as sequence numbers. Devices MUST reject manifests with sequence numbers smaller than any onboard sequence number.</t>

<t>Note: This is not a firmware version. It is a manifest sequence number. A firmware version may be rolled back by creating a new manifest for the old firmware version with a later sequence number.</t>

<t>Mitigates: <xref target="threat-expired">THREAT.IMG.EXPIRED</xref></t>

<t>Implemented by: <xref target="element-sequence-number">Monotonic Sequence Number</xref></t>

</section>
<section anchor="req-sec-compatible" title="REQ.SEC.COMPATIBLE: Vendor, Device-type Identifiers">

<t>Devices MUST only apply firmware that is intended for them. Devices MUST know with fine granularity that a given update applies to their vendor, model, hardware revision, software revision. Human-readable identifiers are often error-prone in this regard, so unique identifiers SHOULD be used.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented by: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-exp" title="REQ.SEC.EXP: Expiration Time">

<t>Firmware MAY expire after a given time. Devices MAY provide a secure clock (local or remote). If a secure clock is provided and the Firmware manifest has an expiration timestamp, the device MUST reject the manifest if current time is later than the expiration time.</t>

<t>Mitigates: <xref target="threat-expired-rollback">THREAT.IMG.EXPIRED.ROLLBACK </xref></t>

<t>Implemented by: <xref target="manifest-element-expiration">Expiration Time</xref></t>

</section>
<section anchor="req-sec-authentic" title="REQ.SEC.AUTHENTIC: Cryptographic Authenticity">

<t>The authenticity of an update MUST be demonstrable. Typically, this means that updates must be digitally authenticated. Because the manifest contains information about how to install the update, the manifest’s authenticity MUST also be demonstrable. To reduce the overhead required for validation, the manifest contains the digest of the firmware image, rather than a second digital signature. The authenticity of the manifest can be verified with a digital signature or Message Authentication Code, the authenticity of the firmware image is tied to the manifest by the use of a digest of the firmware image.</t>

<t>Mitigates: <xref target="threat-img-unauthenticated">THREAT.IMG.NON_AUTH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref>, <xref target="manifest-element-payload-digest">Payload Digest</xref></t>

</section>
<section anchor="req-sec-authentic-image-type" title="REQ.SEC.AUTH.IMG_TYPE: Authenticated Payload Type">

<t>The type of payload (which may be independent of format) MUST be authenticated. For example, the target must know whether the payload is XIP firmware, a loadable module, or serialized configuration data.</t>

<t>Mitigates: <xref target="threat-img-format">THREAT.IMG.FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref>, <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authentic-image-location" title="Security Requirement REQ.SEC.AUTH.IMG_LOC: Authenticated Storage Location">

<t>The location on the target where the payload is to be stored MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-img-location">THREAT.IMG.LOCATION</xref></t>

<t>Implemented by: <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authenticated-remote-resource" title="REQ.SEC.AUTH.REMOTE_LOC: Authenticated Remote Resource Location">

<t>The location where a target should find a payload MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-net-redirect">THREAT.NET.REDIRECT</xref></t>

<t>Implemented by: <xref target="manifest-element-resource-indicator">Resource Indicator</xref></t>

</section>
<section anchor="req-sec-authentic-execution" title="REQ.SEC.AUTH.EXEC: Secure Execution">

<t>The target SHOULD verify firmware at time of boot. This requires authenticated payload size, and digest.</t>

<t>Mitigates: <xref target="threat-image-replacement">THREAT.IMG.REPLACE</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digest</xref>, <xref target="manifest-element-size">Size</xref></t>

</section>
<section anchor="req-sec-authentic-precursor" title="REQ.SEC.AUTH.PRECURSOR: Authenticated precursor images">

<t>If an update uses a differential compression method, it MUST specify the digest of the precursor image and that digest MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-upd-wrong-precursor">THREAT.UPD.WRONG_PRECURSOR</xref></t>

<t>Implemented by: <xref target="element-precursor-digest">Precursor Image Digest</xref></t>

</section>
<section anchor="req-sec-authentic-compatibility" title="REQ.SEC.AUTH.COMPATIBILITY: Authenticated Vendor and Class IDs">

<t>The identifiers that specify firmware compatibility MUST be authenticated to ensure that only compatible firmware is installed on a target device.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented By: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-rights" title="REQ.SEC.RIGHTS: Rights Require Authenticity">

<t>If a device grants different rights to different actors, exercising those rights MUST be accompanied by proof of those rights, in the form of proof of authenticity. Authenticity mechanisms such as those required in <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref> are acceptable but need to follow the end-to-end security model.</t>

<t>For example, if a device has a policy that requires that firmware have both an Authorship right and a Qualification right and if that device grants Authorship and Qualification rights to different parties, such as a Device Operator and a Network Operator, respectively, then the firmware cannot be installed without proof of rights from both the Device and the Network Operator.</t>

<t>Mitigates: <xref target="threat-upd-interop">THREAT.UPD.INTEROP</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-sec-image-confidentiality" title="REQ.SEC.IMG.CONFIDENTIALITY: Payload Encryption">

<t>The manifest information model MUST enable encrypted payloads. Encryption helps to prevent third parties, including attackers, from reading the content of the firmware image. This can protect against confidential information disclosures and discovery of vulnerabilities through reverse engineering. Therefore the manifest must convey the information required to allow an intended recipient to decrypt an encrypted payload.</t>

<t>Mitigates: <xref target="threat-img-disclosure">THREAT.IMG.DISCLOSURE</xref></t>

<t>Implemented by: <xref target="manifest-element-encryption-wrapper">Encryption Wrapper</xref></t>

</section>
<section anchor="req-sec-access-control" title="REQ.SEC.ACCESS_CONTROL: Access Control">

<t>If a device grants different rights to different actors, then an exercise of those rights MUST be validated against a list of rights for the actor. This typically takes the form of an Access Control List (ACL). ACLs are applied to two scenarios:</t>

<t><list style="numbers">
  <t>An ACL decides which elements of the manifest may be overridden and by which actors.</t>
  <t>An ACL decides which component identifier/storage identifier pairs can be written by which actors.</t>
</list></t>

<t>Mitigates: <xref target="threat-mfst-override">THREAT.MFST.OVERRIDE</xref>, <xref target="threat-upd-interop">THREAT.UPD.INTEROP</xref></t>

<t>Implemented by: Client-side code, not specified in manifest.</t>

</section>
<section anchor="req-sec-mfst-confidentiality" title="REQ.SEC.MFST.CONFIDENTIALITY: Encrypted Manifests">

<t>It MUST be possible to encrypt part or all of the manifest. This may be accomplished with either transport encryption or with at-rest encryption.</t>

<t>Mitigates: <xref target="threat-mfst-exposure">THREAT.MFST.EXPOSURE</xref></t>

<t>Implemented by: External Encryption Wrapper / Transport Security</t>

</section>
<section anchor="req-sec-img-complete-digest" title="REQ.SEC.IMG.COMPLETE_DIGEST: Whole Image Digest">

<t>The digest SHOULD cover all available space in a fixed-size storage location. Variable-size storage locations MUST be restricted to exactly the size of deployed payload. This prevents any data from being distributed without being covered by the digest. For example, XIP microcontrollers typically have fixed-size storage. These devices should deploy a digest that covers the deployed firmware image, concatenated with the default erased value of any remaining space.</t>

<t>Mitigates: <xref target="threat-img-extra">THREAT.IMG.EXTRA</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digests</xref></t>

</section>
</section>
<section anchor="user-stories" title="User Stories">

<t>User stories provide expected use cases. These are used to feed into usability requirements.</t>

<section anchor="user-story-install-instructions" title="USER_STORY.INSTALL.INSTRUCTIONS: Installation Instructions">

<t>As a Device Operator, I want to provide my devices with additional installation instructions so that I can keep process details out of my payload data.</t>

<t>Some installation instructions might be:</t>

<t><list style="symbols">
  <t>Use a table of hashes to ensure that each block of the payload is validate before writing.</t>
  <t>Do not report progress.</t>
  <t>Pre-cache the update, but do not install.</t>
  <t>Install the pre-cached update matching this manifest.</t>
  <t>Install this update immediately, overriding any long-running tasks.</t>
</list></t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-fail-early" title="USER_STORY.MFST.FAIL_EARLY: Fail Early">

<t>As a designer of a resource-constrained IoT device, I want bad updates to fail as early as possible to preserve battery life and limit consumed bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-override" title="USER_STORY.OVERRIDE: Override Non-Critical Manifest Elements">

<t>As a Network Operator, I would like to be able to override the non-critical information in the manifest so that I can control my devices more precisely. The authority to override this information is provided via the installation of a limited trust relationship by another authority.</t>

<t>Some examples of potentially overridable information:</t>

<t><list style="symbols">
  <t><xref target="manifest-element-resource-indicator">URIs</xref>: this allows the Network Operator to direct devices to their own infrastructure in order to reduce network load.</t>
  <t>Conditions: this allows the Network Operator to pose additional constraints on the installation of the manifest.</t>
  <t><xref target="manifest-element-additional-install-info">Directives</xref>: this allows the Network Operator to add more instructions such as time of installation.</t>
  <t><xref target="manifest-element-processing-steps">Processing Steps</xref>: If an intermediary performs an action on behalf of a device, it may need to override the processing steps. It is still possible for a device to verify the final content and the result of any processing step that specifies a digest. Some processing steps should be non-overridable.</t>
</list></t>

<t>Satisfied by: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-component" title="USER_STORY.COMPONENT: Component Update">

<t>As an Operator, I want to divide my firmware into components, so that I can reduce the size of updates, make different parties responsible for different components, and divide my firmware into frequently updated and infrequently updated components.</t>

<t>Satisfied by: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-multi-auth" title="USER_STORY.MULTI_AUTH: Multiple Authorisations">

<t>As a Device Operator, I want to ensure the quality of a firmware update before installing it, so that I can ensure interoperability of all devices in my product family. I want to restrict the ability to make changes to my devices to require my express approval.</t>

<t>Satisfied by: <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="user-story-img-format" title="USER_STORY.IMG.FORMAT: Multiple Payload Formats">

<t>As an Operator, I want to be able to send multiple payload formats to suit the needs of my update, so that I can optimise the bandwidth used by my devices.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="user-story-img-confidentiality" title="USER_STORY.IMG.CONFIDENTIALITY: Prevent Confidential Information Disclosures">

<t>As an firmware author, I want to prevent confidential information from being disclosed during firmware updates. It is assumed that channel security or at-rest encryption is adequate to protect the manifest itself against information disclosure.</t>

<t>Satisfied by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="user-story-img-unknown-format" title="USER_STORY.IMG.UNKNOWN_FORMAT: Prevent Devices from Unpacking Unknown Formats">

<t>As a Device Operator, I want devices to determine whether they can process a payload prior to downloading it.</t>

<t>In some cases, it may be desirable for a third party to perform some processing on behalf of a target. For this to occur, the third party MUST indicate what processing occurred and how to verify it against the Trust Provisioning Authority’s intent.</t>

<t>This amounts to overriding <xref target="manifest-element-processing-steps">Processing Steps</xref> and <xref target="manifest-element-resource-indicator">Resource Indicator</xref>.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref>, <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref>, <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="user-story-img-current-version" title="USER_STORY.IMG.CURRENT_VERSION: Specify Version Numbers of Target Firmware">

<t>As a Device Operator, I want to be able to target devices for updates based on their current firmware version, so that I can control which versions are replaced with a single manifest.</t>

<t>Satisfied by: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="user-story-img-select" title="USER_STORY.IMG.SELECT: Enable Devices to Choose Between Images">

<t>As a developer, I want to be able to sign two or more versions of my firmware in a single manifest so that I can use a very simple bootloader that chooses between two or more images that are executed in-place.</t>

<t>Satisfied by: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="user-story-exec-mfst" title="USER_STORY.EXEC.MFST: Secure Execution Using Manifests">

<t>As a signer for both secure execution/boot and firmware deployment, I would like to use the same signed document for both tasks so that my data size is smaller, I can share common code, and I can reduce signature verifications.</t>

<t>Satisfied by: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="user-story-exec-decompress" title="USER_STORY.EXEC.DECOMPRESS: Decompress on Load">

<t>As a developer of firmware for a run-from-RAM device, I would like to use compressed images and to indicate to the bootloader that I am using a compressed image in the manifest so that it can be used with secure execution/boot.</t>

<t>Satisfied by: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="user-story-mfst-img" title="USER_STORY.MFST.IMG: Payload in Manifest">

<t>As an operator of a constrained network, I would like to be able to send a small payload in the same packet as the manifest so that I can reduce network traffic.</t>

<t>Satisfied by: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="user-story-mfst-parse" title="USER_STORY.MFST.PARSE: Simple Parsing">

<t>As a developer for constrained devices, I want a low complexity library for processing updates so that I can fit more application code on my device.</t>

<t>Satisfied by: <xref target="req-use-parse">REQ.USE.PARSE</xref></t>

</section>
<section anchor="user-story-mfst-delegation" title="USER_STORY.MFST.DELEGATION: Delegated Authority in Manifest">

<t>As an operator that rotates delegated authority more often than delivering firmware updates, I would like to delegate a new authority when I deliver a firmware update so that I can accomplish both tasks in a single transmission.</t>

<t>Satisfied by: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
<section anchor="user-story-mfst-pre-check" title="USER_STORY.MFST.PRE_CHECK: Update Evaluation">

<t>As an operator of a constrained network, I would like devices on my network to be able to evaluate the suitability of an update prior to initiating any large download so that I can prevent unnecessary consumption of bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
</section>
<section anchor="usability-requirements" title="Usability Requirements">

<t>The following usability requirements satisfy the user stories listed above.</t>

<section anchor="req-use-mfst-pre-check" title="REQ.USE.MFST.PRE_CHECK: Pre-Installation Checks">

<t>It MUST be possible for a manifest author to place ALL information required to process an update in the manifest.</t>

<t>For example: Information about which precursor image is required for a differential update MUST be placed in the manifest, not in the differential compression header.</t>

<t>Satisfies: [USER_STORY.MFST.PRE_CHECK(#user-story-mfst-pre-check), <xref target="user-story-install-instructions">USER_STORY.INSTALL.INSTRUCTIONS</xref></t>

<t>Implemented by: <xref target="manifest-element-additional-install-info">Additional installation instructions</xref></t>

</section>
<section anchor="req-use-mfst-override" title="REQ.USE.MFST.OVERRIDE_REMOTE: Override Remote Resource Location">

<t>It MUST be possible to redirect payload fetches. This applies where two manifests are used in conjunction. For example, a Device Operator creates a manifest specifying a payload and signs it, and provides a URI for that payload. A Network Operator creates a second manifest, with a dependency on the first. They use this second manifest to override the URIs provided by the Device Operator, directing them into their own infrastructure instead. Some devices may provide this capability, while others may only look at canonical sources of firmware. For this to be possible, the device must fetch the payload, whereas a device that accepts payload pushes will ignore this feature.</t>

<t>N.B. If a manifest is delivered over an authenticated channel and that manifest contains only override information for which the remote is authorised, then it can be considered authenticated by the channel authentication.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref></t>

<t>Implemented by: <xref target="manifest-element-aliases">Aliases</xref></t>

</section>
<section anchor="req-use-mfst-component" title="REQ.USE.MFST.COMPONENT: Component Updates">

<t>It MUST be possible express the requirement to install one or more payloads from one or more authorities so that a multi-payload update can be described. This allows multiple parties with different permissions to collaborate in creating a single update for the IoT device, across multiple components.</t>

<t>This requirement effectively means that it must be possible to construct a tree of manifests on a multi-image target.</t>

<t>In order to enable devices with a heterogeneous storage architecture, the manifest must enable specification of both storage system and the storage location within that storage system.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="user-story-component">USER_STORY.COMPONENT</xref></t>

<t>Implemented by Manifest Element: Dependencies, StorageIdentifier, ComponentIdentifier</t>

<section anchor="example-1-multiple-microcontrollers" title="Example 1: Multiple Microcontrollers">

<t>An IoT device with multiple microcontrollers in the same physical device (HeSA) will likely require multiple payloads with different component identifiers.</t>

</section>
<section anchor="example-2-code-and-configuration" title="Example 2: Code and Configuration">

<t>A firmware image can be divided into two payloads: code and configuration. These payloads may require authorizations from different actors in order to install (see <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref> and <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref>). This structure means that multiple manifests may be required, with a dependency structure between them.</t>

</section>
<section anchor="example-3-multiple-software-modules" title="Example 3: Multiple Software Modules">

<t>A firmware image can be divided into multiple functional blocks for separate testing and distribution. This means that code would need to be distributed in multiple payloads. For example, this might be desirable in order to ensure that common code between devices is identical in order to reduce distribution bandwidth.</t>

</section>
</section>
<section anchor="req-use-mfst-multi-auth" title="REQ.USE.MFST.MULTI_AUTH: Multiple authentications">

<t>It MUST be possible to authenticate a manifest multiple times so that authorisations from multiple parties with different permissions can be required in order to authorise installation of a manifest.</t>

<t>Satisfies: <xref target="user-story-multi-auth">USER_STORY.MULTI_AUTH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-use-img-format" title="REQ.USE.IMG.FORMAT: Format Usability">

<t>The manifest serialisation MUST accommodate any payload format that an Operator wishes to use. This enables the recipient to detect which format the Operator has chosen. Some examples of payload format are:</t>

<t><list style="symbols">
  <t>Binary</t>
  <t>Elf</t>
  <t>Differential</t>
  <t>Compressed</t>
  <t>Packed configuration</t>
  <t>Intel HEX</t>
  <t>S-Record</t>
</list></t>

<t>Satisfies: <xref target="user-story-img-format">USER_STORY.IMG.FORMAT</xref> <xref target="user-story-img-unknown-format">USER_STORY.IMG.UNKNOWN_FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref></t>

</section>
<section anchor="req-use-img-nested" title="REQ.USE.IMG.NESTED: Nested Formats">

<t>The manifest serialisation MUST accommodate nested formats, announcing to the target device all the nesting steps and any parameters used by those steps.</t>

<t>Satisfies: <xref target="user-story-img-confidentiality">USER_STORY.IMG.CONFIDENTIALITY</xref></t>

<t>Implemented by: <xref target="manifest-element-processing-steps">Processing Steps</xref></t>

</section>
<section anchor="req-use-img-versions" title="REQ.USE.IMG.VERSIONS: Target Version Matching">

<t>The manifest serialisation MUST provide a method to specify multiple version numbers of firmware to which the manifest applies, either with a list or with range matching.</t>

<t>Satisfies: <xref target="user-story-img-current-version">USER_STORY.IMG.CURRENT_VERSION</xref></t>

<t>Implemented by: <xref target="element-required-version">Required Image Version List</xref></t>

</section>
<section anchor="req-use-img-select" title="REQ.USE.IMG.SELECT: Select Image by Destination">

<t>The manifest serialisation MUST provide a mechanism to list multiple equivalent payloads by Execute-In-Place Installation Address, including the payload digest and, optionally, payload URIs.</t>

<t>Satisfies: <xref target="user-story-img-select">USER_STORY.IMG.SELECT</xref></t>

<t>Implemented by: <xref target="manifest-element-xip-address">XIP Address</xref></t>

</section>
<section anchor="req-use-exec" title="REQ.USE.EXEC: Executable Manifest">
<t>It MUST be possible to describe an executable system with a manifest on both Execute-In-Place microcontrollers and on complex operating systems. This requires the manifest to specify the digest of each statically linked dependency. In addition, the manifest serialisation MUST be able to express metadata, such as a kernel command-line, used by any loader or bootloader.</t>

<t>Satisfies: <xref target="user-story-exec-mfst">USER_STORY.EXEC.MFST</xref></t>

<t>Implemented by: <xref target="manifest-element-exec-metadata">Run-time metadata</xref></t>

</section>
<section anchor="req-use-load" title="REQ.USE.LOAD: Load-Time Information">

<t>It MUST be possible to specify additional metadata for load time processing of a payload, such as cryptographic information, load-address, and compression algorithm.</t>

<t>N.B. load comes before exec/boot.</t>

<t>Satisfies: <xref target="user-story-exec-decompress">USER_STORY.EXEC.DECOMPRESS</xref></t>

<t>Implemented by: <xref target="manifest-element-load-metadata">Load-time metadata</xref></t>

</section>
<section anchor="req-use-payload" title="REQ.USE.PAYLOAD: Payload in Manifest Superstructure">

<t>It MUST be possible to place a payload in the same structure as the manifest. This MAY place the payload in the same packet as the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-img">USER_STORY.MFST.IMG</xref></t>

<t>Implemented by: <xref target="manifest-element-payload">Payload</xref></t>

</section>
<section anchor="req-use-parse" title="REQ.USE.PARSE: Simple Parsing">

<t>The structure of the manifest MUST be simple to parse, without need for a general-purpose parser.</t>

<t>Satisfies: <xref target="user-story-mfst-parse">USER_STORY.MFST.PARSE</xref></t>

<t>Implemented by: N/A</t>

</section>
<section anchor="req-use-delegation" title="REQ.USE.DELEGATION: Delegation of Authority in Manifest">

<t>Any serialisation MUST enable the delivery of a key claim with, but not authenticated by a manifest. This key claim delivers a new key with which the recipient can verify the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-delegation">USER_STORY.MFST.DELEGATION</xref></t>

<t>Implemented by: <xref target="manifest-element-key-claims">Key Claims</xref></t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Security considerations for this document are covered in <xref target="design-motivation"/>.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank our working group chairs, Dave Thaler, Russ Housley and David Waltermire, for their review comments and their support.</t>

<t>We would like to thank the participants of the 2018 Berlin SUIT Hackathon and the June 2018 virtual design team meetings for their discussion input.
In particular, we would like to thank Koen Zandberg, Emmanuel Baccelli, Carsten Bormann, David Brown, Markus Gueller, Frank Audun Kvamtro, Oyvind Ronningstad, Michael Richardson, Jan-Frederik Rieckers, Francisco Acosta, Anton Gerasimov, Matthias Waehlisch, Max Groening, Daniel Petry, Gaetan Harter, Ralph Hamm, Steve Patrick, Fabio Utzig, Paul Lambert, Benjamin Kaduk, Said Gharout, and Milen Stoychev.</t>

<t>We would like to thank those who contributed to the development of this information model. In particular, we would like to thank Milosch Meriac, Jean-Luc Giraud, Dan Ros, Amyas Philips, Gary Thomson.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC5652" target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2009' month='September' />
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<date month='April' day='9' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.  This version of the document assumes asymmetric cryptography and a public key infrastructure.  Future versions may also describe a symmetric key approach for very constrained devices.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-05.txt' />
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="STRIDE" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx">
  <front>
    <title>The STRIDE Threat Model</title>
    <author >
      <organization>Microsoft</organization>
    </author>
    <date year="2018" month="May"/>
  </front>
  <format type="HTML" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx"/>
</reference>


    </references>


<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAK/JAF0AA81965PbRnbv9/krUPYHSw5J2drsjTM32VpqhrImntcOOba1
rpQLJMEhViTA4DEjWqX//Z5nv9DgjGQnuakkHhFAo3H69Hn+zunhcHjU5M0m
O05e59X2Ia2y5Ha3TJusTlZllZwVTVYVWZOUq2S2zou7OjnN7vMFXB4m4wKu
w13btMnLIrkol9mGnrpIi3yV1U19lM7nVXZ/nIzt8Hqx++zRslwU6RbmsqzS
VTPMs2Y1rNsc/rK3Drd46/CbPx0tYJZ3ZbU/TupmeXSU76rjZFdlf/7Tv3w3
q9q6efnNN//6zcsjeGd6nEyzRVvlzf7ooaze3VVlu4Pfbs9mR++yPfy0PDaf
OjzFlx8d1U1aLH9NN2UBE9pn9dEuPz5Kkmq1yJZ1s9/Ir0nSlAvnz7xYZkWj
P9Rl1VTZqjb/3m+9fzZVvjA3L8rtFp41V/Nikxf2Ndn7ZrjJ62YIg8zLDdw2
LL/+J7gCZNumux2sDt+bts26rGCyQ7hI/5MXcPerEZC5Sgv9kUn9qsqKZVr4
l8rqDlbpNyI4LF61Tc7zbd5kS70h26b5xjw8oof/mlbbEXzDUfjiN6NkVi/W
5Sor8jv/7W/SogBe6l5+6gzWNMCoMQP89W77fgTLGJvFq7x6ty43vwVzyIp3
nUv++19XaVvgC6pkCjwTTAGeH83l+b/WeTNamdtHy+zoqGDevc+Qf25en7z8
9tt/lT//+duXL+XPP/+fP+uf333Lf54NT0d2E6TVYg0UWDRtBSOZLcHDTmc3
Z6eTY5pak1Z3GXBVsm6aXX384sW2Xhajbb6oyrpcNbhGL7Ji2NYvNvm8Sqv9
iyz77uWfvvuX757d//uiHr385vkorXfveTCWDrN1Ju+AP2FHNbJl8RbDb0q5
4+RCX0Y/ojyB39J98vKbb7+jn3jy+syb2cX5HzDfo+FwmKRz2FXpAhjgx3ZT
ZFU6zzd5kwOXPeTNOibRnp2Vs+fJUuTaOr3PkirN62yZNPDVRQZ/oFRLYTdv
8mUCYiGpUZxkyUqFWksyM9lmC2DIvN7Ck0CivE7STV0muHzpfJPRMIuywAnC
zl7qO0cwq0VZ7WAXNTAjuH+xjgxZwvveJ/f+Vw3wd7kXhl7ld23FMrXOmoa+
L4VPzzYb/G+6XOILiuwhWbXFAu9LYZw9TrXKWAAtYWLzPX8iXsre77KqqUdH
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
y9H/A7n1r8rX3AAA

-->

</rfc>

