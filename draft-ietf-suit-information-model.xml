<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-information-model-04" category="std">

  <front>
    <title abbrev="A Firmware Manifest Information Model">An Information Model for Firmware Updates in IoT Devices</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="October" day="30"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality</t>

<t>One component of such a firmware update is a concise and machine-processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The information model describes all the information elements required to secure firmware updates of IoT devices from the threats described in <xref target="threat-model"/> and enables the user stories captured in <xref target="user-stories"/>. These threats and user stories are not intended to be an exhaustive list of the threats against IoT devices, nor of the possible user stories that describe how to conduct a firmware update. Instead they are intended to describe the threats against firmware updates in isolation and provide sufficient motivation to specify the information elements that cover a wide range of user stories. The information model does not define the serialization, encoding, ordering, or structure of information elements, only their semantics.</t>

<t>Because the information model covers a wide range of user stories and a wide range of threats, not all information elements apply to all scenarios. As a result, various information elements could be considered optional to implement and optional to use, depending on which threats exist in a particular domain of application and which user stories are required. Elements marked as mandatory provide baseline security and usability properties that are expected to be required for most applications. Those elements are mandatory to implement and mandatory to use. Elements marked as recommended provide important security or usability properties that are needed on most devices. Elements marked as optional enable security or usability properties that are useful in some applications.</t>

<t>The definition of some of the information elements include examples that illustrate their semantics and how they are intended to be used.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>This document uses terms defined in <xref target="I-D.ietf-suit-architecture"/>.
The term ‘Operator’ refers to both Device and Network Operator.</t>

<t>This document treats devices with a homogeneous storage architecture as devices with a heterogeneous storage architecture, but with a single storage subsystem.</t>

<section anchor="requirements-notation" title="Requirements Notation">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="manifest-information-elements" title="Manifest Information Elements">

<t>Each manifest information element is anchored in a security requirement or a usability requirement. The manifest elements are described below, justified by their requirements.</t>

<section anchor="element-version-id" title="Manifest Element: Version ID of the manifest structure">

<t>An identifier that describes which iteration of the manifest format is contained in the structure.</t>

<t>This element is MANDATORY and MUST be present in order to allow devices to identify the version of the manifest data model that is in use.</t>

</section>
<section anchor="element-sequence-number" title="Manifest Element: Monotonic Sequence Number">

<t>A monotonically increasing sequence number. For convenience, the monotonic sequence number MAY be a UTC timestamp. This allows global synchronisation of sequence numbers without any additional management. This number MUST be easily accessible so that code choosing one out of several manifests can choose which is the latest.</t>

<t>This element is MANDATORY and is necessary to prevent malicious actors from reverting a firmware update against the policies of the relevant authority.</t>

<t>Implements: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="element-vendor-id" title="Manifest Element: Vendor ID">

<t>Vendor IDs must be unique. This is to prevent similarly, or identically named entities from different geographic regions from colliding in their customer’s infrastructure. Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with the vendor’s domain name and the DNS name space ID. Other options include type 1 and type 4 UUIDs.</t>

<t>Vendor ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of a Vendor ID is RECOMMENDED. It helps to distinguish between identically named products from different vendors.</t>

<t>Implements: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-domain-name-based-uuids" title="Example: Domain Name-based UUIDs">

<t>Vendor A creates a UUID based on their domain name:</t>

<t>vendorId = UUID5(DNS, “vendor-a.com”)</t>

<t>Because the DNS infrastructure prevents multiple registrations of the same domain name, this UUID is (with very high probability) guaranteed to be unique. Because the domain name is known, this UUID is reproducible. Type 1 and type 4 UUIDs produce similar guarantees of uniqueness, but not reproducibility.</t>

<t>This approach creates a contention when a vendor changes its name or relinquishes control of a domain name. In this scenario, it is possible that another vendor would start using that same domain name. However, this UUID is not proof of identity; a device’s trust in a vendor must be anchored in a cryptographic key, not a UUID.</t>

</section>
</section>
<section anchor="element-class-id" title="Manifest Element: Class ID">

<t>A device “Class” is a set of different device types that can accept the same firmware update without modification. Class IDs MUST be unique within the scope of a Vendor ID. This is to prevent similarly, or identically named devices colliding in their customer’s infrastructure.</t>

<t>Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with as much information as necessary to define firmware compatibility. Possible information used to derive the class UUID includes:</t>

<t><list style="symbols">
  <t>model name or number</t>
  <t>hardware revision</t>
  <t>runtime library version</t>
  <t>bootloader version</t>
  <t>ROM revision</t>
  <t>silicon batch number</t>
</list></t>

<t>The Class Identifier UUID SHOULD use the Vendor ID as the name space ID. Other options include version 1 and 4 UUIDs. Classes MAY be more granular than is required to identify firmware compatibility. Classes MUST NOT be less granular than is required to identify firmware compatibility. Devices MAY have multiple Class IDs.</t>

<t>Class ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of Class ID is RECOMMENDED. It allows devices to determine applicability of a firmware in an unambiguous way.</t>

<t>If Class ID is not implemented, then each logical device class MUST use a unique trust anchor for authorisation.</t>

<t>Implements: Security Requirement <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-1-different-classes" title="Example 1: Different Classes">

<t>Vendor A creates product Z and product Y. The firmware images of products Z and Y are not interchangeable. Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>ZclassId = UUID5(vendorId, “Product Z”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
</list></t>

<t>This ensures that Vendor A’s Product Z cannot install firmware for Product Y and Product Y cannot install firmware for Product Z.</t>

</section>
<section anchor="example-2-upgrading-class-id" title="Example 2: Upgrading Class ID">

<t>Vendor A creates product X. Later, Vendor A adds a new feature to product X, creating product X v2. Product X requires a firmware update to work with firmware intended for product X v2.</t>

<t>Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>Xv2classId = UUID5(vendorId, “Product X v2”)</t>
</list></t>

<t>When product X receives the firmware update necessary to be compatible with product X v2, part of the firmware update changes the class ID to Xv2classId.</t>

</section>
<section anchor="example-3-shared-functionality" title="Example 3: Shared Functionality">

<t>Vendor A produces two products, product X and product Y. These components share a common core (such as an operating system), but have different applications. The common core and the applications can be updated independently. To enable X and Y to receive the same common core update, they require the same class ID. To ensure that only product X receives application X and only product Y receives application Y, product X and product Y must have different class IDs. The vendor creates Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
  <t>CommonClassId = UUID5(vendorId, “common core”)</t>
</list></t>

<t>Product X matches against both XclassId and CommonClassId. Product Y matches against both YclassId and CommonClassId.</t>

</section>
</section>
<section anchor="element-precursor-digest" title="Manifest Element: Precursor Image Digest Condition">

<t>When a precursor image is required by the payload format, a precursor image digest condition MUST be present in the conditions list. The precursor image may be installed or stored as a candidate.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Enables feature: differential updates.</t>

<t>Implements: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="element-required-version" title="Manifest Element: Required Image Version List">

<t>When a payload applies to multiple versions of a firmware, the required image version list specifies which versions must be present for the update to be applied. This allows the update author to target specific versions of firmware for an update, while excluding those to which it should not be applied.</t>

<t>Where an update can only be applied over specific predecessor versions, that version MUST be specified by the Required Image Version List.</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="manifest-element-expiration" title="Manifest Element: Expiration Time">

<t>This element tells a device the time at which the manifest expires and should no longer be used. This is only usable in conjunction with a secure source of time.</t>

<t>This element is OPTIONAL and MAY enable user stories where a secure source of time is provided and firmware is intended to expire predictably.</t>

<t>Implements: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="manifest-element-format" title="Manifest Element: Payload Format">

<t>The format of the payload MUST be indicated to devices in an unambiguous way. This element provides a mechanism to describe the payload format, within the signed metadata.</t>

<t>This element is MANDATORY and MUST be present to enable devices to decode payloads correctly.</t>

<t>Implements: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref>, <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="manifest-element-processing-steps" title="Manifest Element: Processing Steps">

<t>A representation of the Processing Steps required to decode a payload. The representation MUST describe which algorithm(s) is used and any additional parameters required by the algorithm(s). The representation MAY group Processing Steps together in predefined combinations.</t>

<t>A Processing Step MAY indicate the expected digest of the payload after the processing is complete.</t>

<t>Processing steps are RECOMMENDED to implement.</t>

<t>Enables feature: Encrypted, compressed, packed formats</t>

<t>Implements: <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref></t>

</section>
<section anchor="maniest-element-storage-location" title="Manifest Element: Storage Location">

<t>This element tells the device where to store a payload within a given component. The device can use this to establish which permissions are necessary and the physical storage location to use.</t>

<t>This element is MANDATORY and MUST be present to enable devices to store payloads to the correct location.</t>

<t>Implements: <xref target="req-sec-authentic-image-location">REQ.SEC.AUTH.IMG_LOC</xref></t>

<section anchor="example-1-two-storage-locations" title="Example 1: Two Storage Locations">

<t>A device supports two components: an OS and an application. These components can be updated independently, expressing dependencies to ensure compatibility between the components. The Author chooses two storage identifiers:</t>

<t><list style="symbols">
  <t>“OS”</t>
  <t>“APP”</t>
</list></t>

</section>
<section anchor="example-2-file-system" title="Example 2: File System">

<t>A device supports a full filesystem. The Author chooses to use the storage identifier as the path at which to install the payload. The payload may be a tarball, in which case, it unpacks the tarball into the specified path.</t>

</section>
<section anchor="example-3-flash-memory" title="Example 3: Flash Memory">

<t>A device supports flash memory. The Author chooses to make the storage identifier the offset where the image should be written.</t>

</section>
</section>
<section anchor="manifest-element-component-identifier" title="Manifest Element: Component Identifier">

<t>In a heterogeneous storage architecture, a storage identifier is insufficient to identify where and how to store a payload. To resolve this, a component identifier indicates which part of the storage architecture is targeted by the payload. In a homogeneous storage architecture, this element is unnecessary.</t>

<t>This element is OPTIONAL and only necessary in heterogeneous storage architecture devices.</t>

<t>N.B. A serialisation MAY choose to combine Component Identifier and <xref target="maniest-element-storage-location">Storage Location</xref></t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-resource-indicator" title="Manifest Element: Resource Indicator">

<t>This element provides the information required for the device to acquire the resource. This can be encoded in several ways:</t>

<t><list style="symbols">
  <t>One URI</t>
  <t>A list of URIs</t>
  <t>A prioritised list of URIs</t>
  <t>A list of signed URIs</t>
</list></t>

<t>This element is OPTIONAL and only needed when the target device does not intrinsically know where to find the payload.</t>

<t>N.B. Devices will typically require URIs.</t>

<t>Implements: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="manifest-element-payload-digest" title="Manifest Element: Payload Digests">

<t>This element contains one or more digests of one or more payloads. This allows the target device to ensure authenticity of the payload(s). A serialisation MUST provide a mechanism to select one payload from a list based on system parameters, such as Execute-In-Place Installation Address.</t>

<t>This element is MANDATORY to implement and fundamentally necessary to ensure the authenticity and integrity of the payload. Support for more than one digest is OPTIONAL to implement in a recipient device.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-size" title="Manifest Element: Size">

<t>The size of the payload in bytes.</t>

<t>Variable-size storage locations MUST be set to exactly the size listed in this element.</t>

<t>This element is MANDATORY and informs the target device how big of a payload to expect. Without it, devices are exposed to some classes of denial of service attack.</t>

<t>Implements: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="manifest-element-signature" title="Manifest Element: Signature">

<t>This is not strictly a manifest element. Instead, the manifest is wrapped by a standardised authentication container, such as a COSE (<xref target="RFC8152"/>) or CMS (<xref target="RFC5652"/>) signature object. The authentication container MUST support multiple actors and multiple authentication methods.</t>

<t>This element is MANDATORY and represents the foundation of all security properties of the manifest. There are two exceptions to this requirement: 1) if the manifest is authenticated by a second manifest as a dependency and 2) if the manifest is authenticated by channel security and contains only channel information (such as URIs).</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref></t>

</section>
<section anchor="manifest-element-additional-install-info" title="Manifest Element: Additional installation instructions">

<t>Instructions that the device should execute when processing the manifest. This information is distinct from the information necessary to process a payload. Additional installation instructions include information such as update timing (for example, install only on Sunday, at 0200), procedural considerations (for example, shut down the equipment under control before executing the update), pre- and post-installation steps (for example, run a script).</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="manifest-element-aliases" title="Manifest Element: Aliases">

<t>A mechanism for a manifest to augment or replace URIs or URI lists defined by one or more of its dependencies.</t>

<t>This element is OPTIONAL and enables some user stories.</t>

<t>Implements: <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="manifest-element-dependencies" title="Manifest Element: Dependencies">

<t>A list of other manifests that are required by the current manifest. Manifests are identified an unambiguous way, such as a digest.</t>

<t>This element is MANDATORY to use in deployments that include both multiple authorities and multiple payloads.</t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-encryption-wrapper" title="Manifest Element: Encryption Wrapper">

<t>Encrypting firmware images requires symmetric content encryption keys. The encryption wrapper provides the information needed for a device to obtain or locate a key that it uses to decrypt the firmware. Typical choices for an encryption wrapper include CMS (<xref target="RFC5652"/>) or COSE (<xref target="RFC8152"/>). This MAY be included in a decryption step contained in <xref target="manifest-element-processing-steps">Processing Steps</xref>.</t>

<t>This element is MANDATORY to use for encrypted payloads,</t>

<t>Implements: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="manifest-element-xip-address" title="Manifest Element: XIP Address">

<t>In order to support XIP systems with multiple possible base addresses, it is necessary to specify which address the payload is linked for.</t>

<t>For example a microcontroller may have a simple bootloader that chooses one of two images to boot. That microcontroller then needs to choose one of two firmware images to install, based on which of its two images is older.</t>

<t>Implements: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-load-metadata" title="Manifest Element: Load-time metadata">

<t>Load-time metadata provides the device with information that it needs in order to load one or more images. This is effectively a copy operation from the permanent storage location of an image into the active use location of that image. The metadata contains the source and destination of the image as well as any operations that are performed on the image.</t>

<t>Implements: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="manifest-element-exec-metadata" title="Manifest Element: Run-time metadata">

<t>Run-time metadata provides the device with any extra information needed to boot the device. This may include information such as the entry-point of an XIP image or the kernel command-line of a Linux image.</t>

<t>Implements: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="manifest-element-payload" title="Manifest Element: Payload">

<t>The Payload element provides a recipient device with the whole payload, contained within the manifest superstructure. This enables the manifest and payload to be delivered simultaneously.</t>

<t>Implements: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="manifest-element-key-claims" title="Manifest Element: Key Claims">

<t>The Key Claims element is not authenticated by the <xref target="manifest-element-signature">Signature</xref>, instead, it provides a chain of key delegations (or references to them) for the device to follow in order to verify the key that authenticated the manifest using a trusted key.</t>

<t>Implements: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
</section>
<section anchor="design-motivation" title="Security Considerations">
<t>The following sub-sections describe the threat model, user stories, security requirements, and usability requirements. This section also provides the motivations for each of the manifest information elements.</t>

<section anchor="threat-model" title="Threat Model">

<t>The following sub-sections aim to provide information about the threats that were considered, the security requirements that are derived from those threats and the fields that permit implementation of the security requirements. This model uses the S.T.R.I.D.E. <xref target="STRIDE"/> approach. Each threat is classified according to:</t>

<t><list style="symbols">
  <t>Spoofing identity</t>
  <t>Tampering with data</t>
  <t>Repudiation</t>
  <t>Information disclosure</t>
  <t>Denial of service</t>
  <t>Elevation of privilege</t>
</list></t>

<t>This threat model only covers elements related to the transport of firmware updates. It explicitly does not cover threats outside of the transport of firmware updates. For example, threats to an IoT device due to physical access are out of scope.</t>

</section>
<section anchor="threat-descriptions" title="Threat Descriptions">

<section anchor="threat-expired" title="THREAT.IMG.EXPIRED: Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker sends an old, but valid manifest with an old, but valid firmware image to a device. If there is a known vulnerability in the provided firmware image, this may allow an attacker to exploit the vulnerability and gain control of the device.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="threat-expired-rollback" title="THREAT.IMG.EXPIRED.ROLLBACK : Offline device + Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker targets a device that has been offline for a long time and runs an old firmware version. The attacker sends an old, but valid manifest to a device with an old, but valid firmware image. The attacker-provided firmware is newer than the installed one but older than the most recently available firmware. If there is a known vulnerability in the provided firmware image then this may allow an attacker to gain control of a device. Because the device has been offline for a long time, it is unaware of any new updates. As such it will treat the old manifest as the most current.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="threat-incompatible" title="THREAT.IMG.INCOMPATIBLE: Mismatched Firmware">

<t>Classification: Denial of Service</t>

<t>An attacker sends a valid firmware image, for the wrong type of device, signed by an actor with firmware installation permission on both types of device. The firmware is verified by the device positively because it is signed by an actor with the appropriate permission. This could have wide-ranging consequences. For devices that are similar, it could cause minor breakage, or expose security vulnerabilities. For devices that are very different, it is likely to render devices inoperable.</t>

<t>Mitigated by: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref></t>

<section anchor="example" title="Example:">

<t>Suppose that two vendors, Vendor A and Vendor B, adopt the same trade name in different geographic regions, and they both make products with the same names, or product name matching is not used. This causes firmware from Vendor A to match devices from Vendor B.</t>

<t>If the vendors are the firmware authorities, then devices from Vendor A will reject images signed by Vendor B since they use different credentials. However, if both devices trust the same Author, then, devices from Vendor A could install firmware intended for devices from Vendor B.</t>

</section>
</section>
<section anchor="threat-img-format" title="THREAT.IMG.FORMAT: The target device misinterprets the type of payload">

<t>Classification: Denial of Service</t>

<t>If a device misinterprets the format of the firmware image, it may cause a device to install a firmware image incorrectly. An incorrectly installed firmware image would likely cause the device to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received firmware image may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref></t>

</section>
<section anchor="threat-img-location" title="THREAT.IMG.LOCATION: The target device installs the payload to the wrong location">

<t>Classification: Denial of Service</t>

<t>If a device installs a firmware image to the wrong location on the device, then it is likely to break. For example, a firmware image installed as an application could cause a device and/or an application to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received code may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_LOC</xref></t>

</section>
<section anchor="threat-net-redirect" title="THREAT.NET.REDIRECT: Redirection to inauthentic payload hosting">

<t>Classification: Denial of Service</t>

<t>If a device does not know where to obtain the payload for an update, it may be redirected to an attacker’s server. This would allow an attacker to provide broken payloads to devices.</t>

<t>Mitigated by: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="threat-net-mitm" title="THREAT.NET.MITM: Traffic interception">

<t>Classification: Spoofing Identity, Tampering with Data</t>

<t>An attacker intercepts all traffic to and from a device. The attacker can monitor or modify any data sent to or received from the device. This can take the form of: manifests, payloads, status reports, and capability reports being modified or not delivered to the intended recipient. It can also take the form of analysis of data sent to or from the device, either in content, size, or frequency.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref>, <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref>, <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref>, <xref target="req-sec-reporting">REQ.SEC.REPORTING</xref></t>

</section>
<section anchor="threat-image-replacement" title="THREAT.IMG.REPLACE: Payload Replacement">

<t>Classification: Elevation of Privilege</t>

<t>An attacker replaces a newly downloaded firmware after a device finishes verifying a manifest. This could cause the device to execute the attacker’s code. This attack likely requires physical access to the device. However, it is possible that this attack is carried out in combination with another threat that allows remote execution. This is a typical Time Of Check/Time Of Use threat.</t>

<t>Threat Escalation: If the attacker is able to exploit a known
vulnerability, or if the attacker can supply their own firmware, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="threat-img-unauthenticated" title="THREAT.IMG.NON_AUTH: Unauthenticated Images">

<t>Classification: Elevation of Privilege / All Types</t>

<t>If an attacker can install their firmware on a device, by manipulating either payload or metadata, then they have complete control of the device.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref></t>

</section>
<section anchor="threat-upd-wrong-precursor" title="THREAT.UPD.WRONG_PRECURSOR: Unexpected Precursor images">

<t>Classification: Denial of Service / All Types</t>

<t>An attacker sends a valid, current manifest to a device that has an unexpected precursor image. If a payload format requires a precursor image (for example, delta updates) and that precursor image is not available on the target device, it could cause the update to break.</t>

<t>An attacker that can cause a device to install a payload against the wrong precursor image could gain elevation of privilege and potentially expand this to all types of threat. However, it is unlikely that a valid differential update applied to an incorrect precursor would result in a functional, but vulnerable firmware.</t>

<t>Mitigated by: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="threat-upd-unapproved" title="THREAT.UPD.UNAPPROVED: Unapproved Firmware">

<t>Classification: Denial of Service, Elevation of Privilege</t>

<t>This threat can appear in several ways, however it is ultimately about ensuring that devices retain the behaviour required by their Owner, Device Operator, or Network Operator. The owner or operator of a device typically requires that the device maintain certain features, functions, capabilities, behaviours, or interoperability constraints (more generally, behaviour). If these requirements are broken, then a device will not fulfill its purpose. Therefore, if any party other than the device’s Owner or the Owner’s contracted Device Operator has the ability to modify device behaviour without approval, then this constitutes an elevation of privilege.</t>

<t>Similarly, a network operator may require that devices behave in a particular way in order to maintain the integrity of the network. If devices behaviour on a network can be modified without the approval of the network operator, then this constitutes an elevation of privilege with respect to the network.</t>

<t>For example, if the owner of a device has purchased that device because of Features A, B, and C, and a firmware update is issued by the manufacturer, which removes Feature A, then the device may not fulfill the owner’s requirements any more. In certain circumstances, this can cause significantly greater threats. Suppose that Feature A is used to implement a safety-critical system, whether the manufacturer intended this behaviour or not. When unapproved firmware is installed, the system may become unsafe.</t>

<t>In a second example, the owner or operator of a system of two or more interoperating devices needs to approve firmware for their system in order to ensure interoperability with other devices in the system. If the firmware is not qualified, the system as a whole may not work. Therefore, if a device installs firmware without the approval of the device owner or operator, this is a threat to devices or the system as a whole.</t>

<t>Similarly, the operator of a network may need to approve firmware for devices attached to the network in order to ensure favourable operating conditions within the network. If the firmware is not qualified, it may degrade the performance of the network. Therefore, if a device installs firmware without the approval of the network operator, this is a threat to the network itself.</t>

<t>Threat Escalation: If the firmware expects configuration that is present in devices deployed in Network A, but not in devices deployed in Network B, then the device may experience degraded security, leading to threats of All Types.</t>

<t>Mitigated by: <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

<section anchor="example-1-multiple-network-operators-with-a-single-device-operator" title="Example 1: Multiple Network Operators with a Single Device Operator">

<t>In this example, assume that Device Operators expect the rights to create firmware but that Network Operators expect the rights to qualify firmware as fit-for-purpose on their networks. Additionally, assume that Device Operators manage devices that can be deployed on any network, including Network A and B in our example.</t>

<t>An attacker may obtain a manifest for a device on Network A. Then, this attacker sends that manifest to a device on Network B. Because Network A and Network B are under control of different Operators, and the firmware for a device on Network A has not been qualified to be deployed on Network B, the target device on Network B is now in violation of the Operator B’s policy and may be disabled by this unqualified, but signed firmware.</t>

<t>This is a denial of service because it can render devices inoperable. This is an elevation of privilege because it allows the attacker to make installation decisions that should be made by the Operator.</t>

</section>
<section anchor="example-2-single-network-operator-with-multiple-device-operators" title="Example 2: Single Network Operator with Multiple Device Operators">

<t>Multiple devices that interoperate are used on the same network and communicate with each other. Some devices are manufactured and managed by Device Operator A and other devices by Device Operator B. A new firmware is released by Device Operator A that breaks compatibility with devices from Device Operator B. An attacker sends the new firmware to the devices managed by Device Operator A without approval of the Network Operator. This breaks the behaviour of the larger system causing denial of service and possibly other threats. Where the network is a distributed SCADA system, this could cause misbehaviour of the process that is under control.</t>

</section>
</section>
<section anchor="threat-img-disclosure" title="THREAT.IMG.DISCLOSURE: Reverse Engineering Of Firmware Image for Vulnerability Analysis">

<t>Classification: All Types</t>

<t>An attacker wants to mount an attack on an IoT device. To prepare the attack he or she retrieves the provided firmware image and performs reverse engineering of the firmware image to analyze it for specific vulnerabilities.</t>

<t>Mitigated by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-mfst-override" title="THREAT.MFST.OVERRIDE: Overriding Critical Manifest Elements">

<t>Classification: Elevation of Privilege</t>

<t>An authorised actor, but not the Author, uses an override mechanism (<xref target="user-story-override">USER_STORY.OVERRIDE</xref>) to change an information element in a manifest signed by the Author. For example, if the authorised actor overrides the digest and URI of the payload, the actor can replace the entire payload with a payload of their choice.</t>

<t>Threat Escalation: By overriding elements such as payload installation instructions or firmware digest, this threat can be escalated to all types.</t>

<t>Mitigated by: <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="threat-mfst-exposure" title="THREAT.MFST.EXPOSURE: Confidential Manifest Element Exposure">

<t>Classification: Information Disclosure</t>

<t>A third party may be able to extract sensitive information from the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-img-extra" title="THREAT.IMG.EXTRA: Extra data after image">

<t>Classification: All Types</t>

<t>If a third party modifies the image so that it contains extra code after a valid, authentic image, that third party can then use their own code in order to make better use of an existing vulnerability.</t>

<t>Mitigated by: <xref target="req-sec-img-complete-digest">REQ.SEC.IMG.COMPLETE_DIGEST</xref></t>

</section>
<section anchor="threat-key-exposure" title="THREAT.KEY.EXPOSURE: Exposure of signing keys">

<t>Classification: All Types</t>

<t>If a third party obtains a key or even indirect access to a key, for example in an HSM, then they can perform the same actions as the legitimate owner of the key. If the key is trusted for firmware update, then the third party can perform firmware updates as though they were the legitimate owner of the key.</t>

<t>For example, if manifest signing is performed on a server connected to the internet, an attacker may compromise the server and then be able to sign manifests, even if the keys for manifest signing are held in an HSM that is accessed by the server.</t>

<t>Mitigated by: <xref target="req-sec-key-protection">REQ.SEC.KEY.PROTECTION</xref></t>

</section>
<section anchor="threat-mfst-modification" title="THREAT.MFST.MODIFICATION: Modification of manifest or payload prior to signing">

<t>Classification: All Types</t>

<t>If an attacker can alter a manifest or payload before it is signed, they can perform all the same actions as the manifest author. This allows the attacker to deploy firmware updates to any devices that trust the manifest author. If an attacker can modify the code of a payload before the corresponding manifest is created, they can insert their own code. If an attacker can modify the manifest before it is signed, they can redirect the manifest to their own payload.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that watches manifest creation activities and inserts code into any binary that is referenced by a manifest.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that replaces the referenced binary (digest) and URI with the attacker’s binary (digest) and URI.</t>

<t>Mitigated by: <xref target="req-sec-mfst-check">REQ.SEC.MFST.CHECK</xref>, <xref target="req-sec-mfst-trusted">REQ.SEC.MFST.TRUSTED</xref></t>

</section>
</section>
<section anchor="security-requirements" title="Security Requirements">

<t>The security requirements here are a set of policies that mitigate the threats described in <xref target="threat-model"/>.</t>

<section anchor="req-sec-sequence" title="REQ.SEC.SEQUENCE: Monotonic Sequence Numbers">

<t>Only an actor with firmware installation authority is permitted to decide when device firmware can be installed. To enforce this rule, manifests MUST contain monotonically increasing sequence numbers. Manifests MAY use UTC epoch timestamps to coordinate monotonically increasing sequence numbers across many actors in many locations. If UTC epoch timestamps are used, they MUST NOT be treated as times, they MUST be treated only as sequence numbers. Devices MUST reject manifests with sequence numbers smaller than any onboard sequence number.</t>

<t>Note: This is not a firmware version. It is a manifest sequence number. A firmware version may be rolled back by creating a new manifest for the old firmware version with a later sequence number.</t>

<t>Mitigates: <xref target="threat-expired">THREAT.IMG.EXPIRED</xref></t>

<t>Implemented by: <xref target="element-sequence-number">Monotonic Sequence Number</xref></t>

</section>
<section anchor="req-sec-compatible" title="REQ.SEC.COMPATIBLE: Vendor, Device-type Identifiers">

<t>Devices MUST only apply firmware that is intended for them. Devices MUST know with fine granularity that a given update applies to their vendor, model, hardware revision, software revision. Human-readable identifiers are often error-prone in this regard, so unique identifiers SHOULD be used.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented by: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-exp" title="REQ.SEC.EXP: Expiration Time">

<t>Firmware MAY expire after a given time. Devices MAY provide a secure clock (local or remote). If a secure clock is provided and the Firmware manifest has an expiration timestamp, the device MUST reject the manifest if current time is later than the expiration time.</t>

<t>Mitigates: <xref target="threat-expired-rollback">THREAT.IMG.EXPIRED.ROLLBACK </xref></t>

<t>Implemented by: <xref target="manifest-element-expiration">Expiration Time</xref></t>

</section>
<section anchor="req-sec-authentic" title="REQ.SEC.AUTHENTIC: Cryptographic Authenticity">

<t>The authenticity of an update MUST be demonstrable. Typically, this means that updates must be digitally authenticated. Because the manifest contains information about how to install the update, the manifest’s authenticity MUST also be demonstrable. To reduce the overhead required for validation, the manifest contains the digest of the firmware image, rather than a second digital signature. The authenticity of the manifest can be verified with a digital signature or Message Authentication Code. The authenticity of the firmware image is tied to the manifest by the use of a digest of the firmware image.</t>

<t>Mitigates: <xref target="threat-img-unauthenticated">THREAT.IMG.NON_AUTH</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref>, <xref target="manifest-element-payload-digest">Payload Digest</xref></t>

</section>
<section anchor="req-sec-authentic-image-type" title="REQ.SEC.AUTH.IMG_TYPE: Authenticated Payload Type">

<t>The type of payload (which may be independent of format) MUST be authenticated. For example, the target must know whether the payload is XIP firmware, a loadable module, or serialized configuration data.</t>

<t>Mitigates: <xref target="threat-img-format">THREAT.IMG.FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref>, <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authentic-image-location" title="Security Requirement REQ.SEC.AUTH.IMG_LOC: Authenticated Storage Location">

<t>The location on the target where the payload is to be stored MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-img-location">THREAT.IMG.LOCATION</xref></t>

<t>Implemented by: <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authenticated-remote-resource" title="REQ.SEC.AUTH.REMOTE_LOC: Authenticated Remote Resource Location">

<t>The location where a target should find a payload MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-net-redirect">THREAT.NET.REDIRECT</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-resource-indicator">Resource Indicator</xref></t>

</section>
<section anchor="req-sec-authentic-execution" title="REQ.SEC.AUTH.EXEC: Secure Execution">

<t>The target SHOULD verify firmware at time of boot. This requires authenticated payload size, and digest.</t>

<t>Mitigates: <xref target="threat-image-replacement">THREAT.IMG.REPLACE</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digest</xref>, <xref target="manifest-element-size">Size</xref></t>

</section>
<section anchor="req-sec-authentic-precursor" title="REQ.SEC.AUTH.PRECURSOR: Authenticated precursor images">

<t>If an update uses a differential compression method, it MUST specify the digest of the precursor image and that digest MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-upd-wrong-precursor">THREAT.UPD.WRONG_PRECURSOR</xref></t>

<t>Implemented by: <xref target="element-precursor-digest">Precursor Image Digest</xref></t>

</section>
<section anchor="req-sec-authentic-compatibility" title="REQ.SEC.AUTH.COMPATIBILITY: Authenticated Vendor and Class IDs">

<t>The identifiers that specify firmware compatibility MUST be authenticated to ensure that only compatible firmware is installed on a target device.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented By: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-rights" title="REQ.SEC.RIGHTS: Rights Require Authenticity">

<t>If a device grants different rights to different actors, exercising those rights MUST be accompanied by proof of those rights, in the form of proof of authenticity. Authenticity mechanisms such as those required in <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref> can be used to prove authenticity.</t>

<t>For example, if a device has a policy that requires that firmware have both an Authorship right and a Qualification right and if that device grants Authorship and Qualification rights to different parties, such as a Device Operator and a Network Operator, respectively, then the firmware cannot be installed without proof of rights from both the Device Operator and the Network Operator.</t>

<t>Mitigates: <xref target="threat-upd-unapproved">THREAT.UPD.UNAPPROVED</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-sec-image-confidentiality" title="REQ.SEC.IMG.CONFIDENTIALITY: Payload Encryption">

<t>The manifest information model MUST enable encrypted payloads. Encryption helps to prevent third parties, including attackers, from reading the content of the firmware image. This can protect against confidential information disclosures and discovery of vulnerabilities through reverse engineering. Therefore the manifest must convey the information required to allow an intended recipient to decrypt an encrypted payload.</t>

<t>Mitigates: <xref target="threat-img-disclosure">THREAT.IMG.DISCLOSURE</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-encryption-wrapper">Encryption Wrapper</xref></t>

</section>
<section anchor="req-sec-access-control" title="REQ.SEC.ACCESS_CONTROL: Access Control">

<t>If a device grants different rights to different actors, then an exercise of those rights MUST be validated against a list of rights for the actor. This typically takes the form of an Access Control List (ACL). ACLs are applied to two scenarios:</t>

<t><list style="numbers">
  <t>An ACL decides which elements of the manifest may be overridden and by which actors.</t>
  <t>An ACL decides which component identifier/storage identifier pairs can be written by which actors.</t>
</list></t>

<t>Mitigates: <xref target="threat-mfst-override">THREAT.MFST.OVERRIDE</xref>, <xref target="threat-upd-unapproved">THREAT.UPD.UNAPPROVED</xref></t>

<t>Implemented by: Client-side code, not specified in manifest.</t>

</section>
<section anchor="req-sec-mfst-confidentiality" title="REQ.SEC.MFST.CONFIDENTIALITY: Encrypted Manifests">

<t>It MUST be possible to encrypt part or all of the manifest. This may be accomplished with either transport encryption or with at-rest encryption.</t>

<t>Mitigates: <xref target="threat-mfst-exposure">THREAT.MFST.EXPOSURE</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: External Encryption Wrapper / Transport Security</t>

</section>
<section anchor="req-sec-img-complete-digest" title="REQ.SEC.IMG.COMPLETE_DIGEST: Whole Image Digest">

<t>The digest SHOULD cover all available space in a fixed-size storage location. Variable-size storage locations MUST be restricted to exactly the size of deployed payload. This prevents any data from being distributed without being covered by the digest. For example, XIP microcontrollers typically have fixed-size storage. These devices should deploy a digest that covers the deployed firmware image, concatenated with the default erased value of any remaining space.</t>

<t>Mitigates: <xref target="threat-img-extra">THREAT.IMG.EXTRA</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digests</xref></t>

</section>
<section anchor="req-sec-reporting" title="REQ.SEC.REPORTING: Secure Reporting">

<t>Status reports from the device to any remote system SHOULD be performed over an authenticated, confidential channel in order to prevent modification or spoofing of the reports.</t>

<t>Mitigates: <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

</section>
<section anchor="req-sec-key-protection" title="REQ.SEC.KEY.PROTECTION: Protected storage of signing keys">

<t>Cryptographic keys for signing manifests SHOULD be stored in a manner that is inaccessible to networked devices, for example in an HSM, or an air-gapped computer. This protects against an attacker obtaining the keys.</t>

<t>Keys SHOULD be stored in a way that limits the risk of a legitimate, but compromised, entity (such as a server or developer computer) issuing signing requests.</t>

<t>Mitigates: <xref target="threat-key-exposure">THREAT.KEY.EXPOSURE</xref></t>

</section>
<section anchor="req-sec-mfst-check" title="REQ.SEC.MFST.CHECK: Validate manifests prior to deployment">

<t>Manifests SHOULD be parsed and examined prior to deployment to validate that their contents have not been modified during creation and signing.</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
<section anchor="req-sec-mfst-trusted" title="REQ.SEC.MFST.TRUSTED: Construct manifests in a trusted environment">

<t>For high risk deployments, such as large numbers of devices or critical function devices, manifests SHOULD be constructed in an environment that is protected from interference, such as an air-gapped computer. Note that a networked computer connected to an HSM does not fulfill this requirement (see <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref>).</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
</section>
<section anchor="user-stories" title="User Stories">

<t>User stories provide expected use cases. These are used to feed into usability requirements.</t>

<section anchor="user-story-install-instructions" title="USER_STORY.INSTALL.INSTRUCTIONS: Installation Instructions">

<t>As a Device Operator, I want to provide my devices with additional installation instructions so that I can keep process details out of my payload data.</t>

<t>Some installation instructions might be:</t>

<t><list style="symbols">
  <t>Use a table of hashes to ensure that each block of the payload is validate before writing.</t>
  <t>Do not report progress.</t>
  <t>Pre-cache the update, but do not install.</t>
  <t>Install the pre-cached update matching this manifest.</t>
  <t>Install this update immediately, overriding any long-running tasks.</t>
</list></t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-fail-early" title="USER_STORY.MFST.FAIL_EARLY: Fail Early">

<t>As a designer of a resource-constrained IoT device, I want bad updates to fail as early as possible to preserve battery life and limit consumed bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-override" title="USER_STORY.OVERRIDE: Override Non-Critical Manifest Elements">

<t>As a Device Operator, I would like to be able to override the non-critical information in the manifest so that I can control my devices more precisely. The authority to override this information is provided via the installation of a limited trust anchor by another authority.</t>

<t>Some examples of potentially overridable information:</t>

<t><list style="symbols">
  <t><xref target="manifest-element-resource-indicator">URIs</xref>: this allows the Device Operator to direct devices to their own infrastructure in order to reduce network load.</t>
  <t>Conditions: this allows the Device Operator to pose additional constraints on the installation of the manifest.</t>
  <t><xref target="manifest-element-additional-install-info">Directives</xref>: this allows the Device Operator to add more instructions such as time of installation.</t>
  <t><xref target="manifest-element-processing-steps">Processing Steps</xref>: If an intermediary performs an action on behalf of a device, it may need to override the processing steps. It is still possible for a device to verify the final content and the result of any processing step that specifies a digest. Some processing steps should be non-overridable.</t>
</list></t>

<t>Satisfied by: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-component" title="USER_STORY.COMPONENT: Component Update">

<t>As a Device Operator, I want to divide my firmware into components, so that I can reduce the size of updates, make different parties responsible for different components, and divide my firmware into frequently updated and infrequently updated components.</t>

<t>Satisfied by: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-multi-auth" title="USER_STORY.MULTI_AUTH: Multiple Authorisations">

<t>As a Device Operator, I want to ensure the quality of a firmware update before installing it, so that I can ensure interoperability of all devices in my product family. I want to restrict the ability to make changes to my devices to require my express approval.</t>

<t>Satisfied by: <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="user-story-img-format" title="USER_STORY.IMG.FORMAT: Multiple Payload Formats">

<t>As a Device Operator, I want to be able to send multiple payload formats to suit the needs of my update, so that I can optimise the bandwidth used by my devices.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="user-story-img-confidentiality" title="USER_STORY.IMG.CONFIDENTIALITY: Prevent Confidential Information Disclosures">

<t>As a firmware author, I want to prevent confidential information from being disclosed during firmware updates. It is assumed that channel security or at-rest encryption is adequate to protect the manifest itself against information disclosure.</t>

<t>Satisfied by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="user-story-img-unknown-format" title="USER_STORY.IMG.UNKNOWN_FORMAT: Prevent Devices from Unpacking Unknown Formats">

<t>As a Device Operator, I want devices to determine whether they can process a payload prior to downloading it.</t>

<t>In some cases, it may be desirable for a third party to perform some processing on behalf of a target. For this to occur, the third party MUST indicate what processing occurred and how to verify it against the Trust Provisioning Authority’s intent.</t>

<t>This amounts to overriding <xref target="manifest-element-processing-steps">Processing Steps</xref> and <xref target="manifest-element-resource-indicator">Resource Indicator</xref>.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref>, <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref>, <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="user-story-img-current-version" title="USER_STORY.IMG.CURRENT_VERSION: Specify Version Numbers of Target Firmware">

<t>As a Device Operator, I want to be able to target devices for updates based on their current firmware version, so that I can control which versions are replaced with a single manifest.</t>

<t>Satisfied by: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="user-story-img-select" title="USER_STORY.IMG.SELECT: Enable Devices to Choose Between Images">

<t>As a developer, I want to be able to sign two or more versions of my firmware in a single manifest so that I can use a very simple bootloader that chooses between two or more images that are executed in-place.</t>

<t>Satisfied by: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="user-story-exec-mfst" title="USER_STORY.EXEC.MFST: Secure Execution Using Manifests">

<t>As a signer for both secure execution/boot and firmware deployment, I would like to use the same signed document for both tasks so that my data size is smaller, I can share common code, and I can reduce signature verifications.</t>

<t>Satisfied by: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="user-story-exec-decompress" title="USER_STORY.EXEC.DECOMPRESS: Decompress on Load">

<t>As a developer of firmware for a run-from-RAM device, I would like to use compressed images and to indicate to the bootloader that I am using a compressed image in the manifest so that it can be used with secure execution/boot.</t>

<t>Satisfied by: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="user-story-mfst-img" title="USER_STORY.MFST.IMG: Payload in Manifest">

<t>As an operator of devices on a constrained network, I would like the manifest to be able to include a small payload in the same packet so that I can reduce network traffic.</t>

<t>Satisfied by: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="user-story-mfst-parse" title="USER_STORY.MFST.PARSE: Simple Parsing">

<t>As a developer for constrained devices, I want a low complexity library for processing updates so that I can fit more application code on my device.</t>

<t>Satisfied by: <xref target="req-use-parse">REQ.USE.PARSE</xref></t>

</section>
<section anchor="user-story-mfst-delegation" title="USER_STORY.MFST.DELEGATION: Delegated Authority in Manifest">

<t>As a Device Operator that rotates delegated authority more often than delivering firmware updates, I would like to delegate a new authority when I deliver a firmware update so that I can accomplish both tasks in a single transmission.</t>

<t>Satisfied by: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
<section anchor="user-story-mfst-pre-check" title="USER_STORY.MFST.PRE_CHECK: Update Evaluation">

<t>As an operator of a constrained network, I would like devices on my network to be able to evaluate the suitability of an update prior to initiating any large download so that I can prevent unnecessary consumption of bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
</section>
<section anchor="usability-requirements" title="Usability Requirements">

<t>The following usability requirements satisfy the user stories listed above.</t>

<section anchor="req-use-mfst-pre-check" title="REQ.USE.MFST.PRE_CHECK: Pre-Installation Checks">

<t>It MUST be possible for a manifest author to place ALL information required to process an update in the manifest.</t>

<t>For example: Information about which precursor image is required for a differential update MUST be placed in the manifest, not in the differential compression header.</t>

<t>Satisfies: [USER_STORY.MFST.PRE_CHECK(#user-story-mfst-pre-check), <xref target="user-story-install-instructions">USER_STORY.INSTALL.INSTRUCTIONS</xref></t>

<t>Implemented by: <xref target="manifest-element-additional-install-info">Additional installation instructions</xref></t>

</section>
<section anchor="req-use-mfst-override" title="REQ.USE.MFST.OVERRIDE_REMOTE: Override Remote Resource Location">

<t>It MUST be possible to redirect payload fetches. This applies where two manifests are used in conjunction. For example, a Device Operator creates a manifest specifying a payload and signs it, and provides a URI for that payload. A Network Operator creates a second manifest, with a dependency on the first. They use this second manifest to override the URIs provided by the Device Operator, directing them into their own infrastructure instead. Some devices may provide this capability, while others may only look at canonical sources of firmware. For this to be possible, the device must fetch the payload, whereas a device that accepts payload pushes will ignore this feature.</t>

<t>N.B. If a manifest is delivered over an authenticated channel and that manifest contains only override information for which the remote is authorised, then it can be considered authenticated by the channel authentication.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref></t>

<t>Implemented by: <xref target="manifest-element-aliases">Aliases</xref></t>

</section>
<section anchor="req-use-mfst-component" title="REQ.USE.MFST.COMPONENT: Component Updates">

<t>It MUST be possible express the requirement to install one or more payloads from one or more authorities so that a multi-payload update can be described. This allows multiple parties with different permissions to collaborate in creating a single update for the IoT device, across multiple components.</t>

<t>This requirement effectively means that it must be possible to construct a tree of manifests on a multi-image target.</t>

<t>In order to enable devices with a heterogeneous storage architecture, the manifest must enable specification of both storage system and the storage location within that storage system.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="user-story-component">USER_STORY.COMPONENT</xref></t>

<t>Implemented by Manifest Element: Dependencies, StorageIdentifier, ComponentIdentifier</t>

<section anchor="example-1-multiple-microcontrollers" title="Example 1: Multiple Microcontrollers">

<t>An IoT device with multiple microcontrollers in the same physical device (HeSA) will likely require multiple payloads with different component identifiers.</t>

</section>
<section anchor="example-2-code-and-configuration" title="Example 2: Code and Configuration">

<t>A firmware image can be divided into two payloads: code and configuration. These payloads may require authorizations from different actors in order to install (see <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref> and <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref>). This structure means that multiple manifests may be required, with a dependency structure between them.</t>

</section>
<section anchor="example-3-multiple-software-modules" title="Example 3: Multiple Software Modules">

<t>A firmware image can be divided into multiple functional blocks for separate testing and distribution. This means that code would need to be distributed in multiple payloads. For example, this might be desirable in order to ensure that common code between devices is identical in order to reduce distribution bandwidth.</t>

</section>
</section>
<section anchor="req-use-mfst-multi-auth" title="REQ.USE.MFST.MULTI_AUTH: Multiple authentications">

<t>It MUST be possible to authenticate a manifest multiple times so that authorisations from multiple parties with different permissions can be required in order to authorise installation of a manifest.</t>

<t>Satisfies: <xref target="user-story-multi-auth">USER_STORY.MULTI_AUTH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-use-img-format" title="REQ.USE.IMG.FORMAT: Format Usability">

<t>The manifest serialisation MUST accommodate any payload format that an Operator wishes to use. This enables the recipient to detect which format the Operator has chosen. Some examples of payload format are:</t>

<t><list style="symbols">
  <t>Binary</t>
  <t>Elf</t>
  <t>Differential</t>
  <t>Compressed</t>
  <t>Packed configuration</t>
  <t>Intel HEX</t>
  <t>S-Record</t>
</list></t>

<t>Satisfies: <xref target="user-story-img-format">USER_STORY.IMG.FORMAT</xref> <xref target="user-story-img-unknown-format">USER_STORY.IMG.UNKNOWN_FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref></t>

</section>
<section anchor="req-use-img-nested" title="REQ.USE.IMG.NESTED: Nested Formats">

<t>The manifest serialisation MUST accommodate nested formats, announcing to the target device all the nesting steps and any parameters used by those steps.</t>

<t>Satisfies: <xref target="user-story-img-confidentiality">USER_STORY.IMG.CONFIDENTIALITY</xref></t>

<t>Implemented by: <xref target="manifest-element-processing-steps">Processing Steps</xref></t>

</section>
<section anchor="req-use-img-versions" title="REQ.USE.IMG.VERSIONS: Target Version Matching">

<t>The manifest serialisation MUST provide a method to specify multiple version numbers of firmware to which the manifest applies, either with a list or with range matching.</t>

<t>Satisfies: <xref target="user-story-img-current-version">USER_STORY.IMG.CURRENT_VERSION</xref></t>

<t>Implemented by: <xref target="element-required-version">Required Image Version List</xref></t>

</section>
<section anchor="req-use-img-select" title="REQ.USE.IMG.SELECT: Select Image by Destination">

<t>The manifest serialisation MUST provide a mechanism to list multiple equivalent payloads by Execute-In-Place Installation Address, including the payload digest and, optionally, payload URIs.</t>

<t>Satisfies: <xref target="user-story-img-select">USER_STORY.IMG.SELECT</xref></t>

<t>Implemented by: <xref target="manifest-element-xip-address">XIP Address</xref></t>

</section>
<section anchor="req-use-exec" title="REQ.USE.EXEC: Executable Manifest">
<t>It MUST be possible to describe an executable system with a manifest on both Execute-In-Place microcontrollers and on complex operating systems. This requires the manifest to specify the digest of each statically linked dependency. In addition, the manifest serialisation MUST be able to express metadata, such as a kernel command-line, used by any loader or bootloader.</t>

<t>Satisfies: <xref target="user-story-exec-mfst">USER_STORY.EXEC.MFST</xref></t>

<t>Implemented by: <xref target="manifest-element-exec-metadata">Run-time metadata</xref></t>

</section>
<section anchor="req-use-load" title="REQ.USE.LOAD: Load-Time Information">

<t>It MUST be possible to specify additional metadata for load time processing of a payload, such as cryptographic information, load-address, and compression algorithm.</t>

<t>N.B. load comes before exec/boot.</t>

<t>Satisfies: <xref target="user-story-exec-decompress">USER_STORY.EXEC.DECOMPRESS</xref></t>

<t>Implemented by: <xref target="manifest-element-load-metadata">Load-time metadata</xref></t>

</section>
<section anchor="req-use-payload" title="REQ.USE.PAYLOAD: Payload in Manifest Superstructure">

<t>It MUST be possible to place a payload in the same structure as the manifest. This MAY place the payload in the same packet as the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-img">USER_STORY.MFST.IMG</xref></t>

<t>Implemented by: <xref target="manifest-element-payload">Payload</xref></t>

</section>
<section anchor="req-use-parse" title="REQ.USE.PARSE: Simple Parsing">

<t>The structure of the manifest MUST be simple to parse, without need for a general-purpose parser.</t>

<t>Satisfies: <xref target="user-story-mfst-parse">USER_STORY.MFST.PARSE</xref></t>

<t>Implemented by: N/A</t>

</section>
<section anchor="req-use-delegation" title="REQ.USE.DELEGATION: Delegation of Authority in Manifest">

<t>Any serialisation MUST enable the delivery of a key claim with, but not authenticated by, a manifest. This key claim delivers a new key with which the recipient can verify the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-delegation">USER_STORY.MFST.DELEGATION</xref></t>

<t>Implemented by: <xref target="manifest-element-key-claims">Key Claims</xref></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank our working group chairs, Dave Thaler, Russ Housley and David Waltermire, for their review comments and their support.</t>

<t>We would like to thank the participants of the 2018 Berlin SUIT Hackathon and the June 2018 virtual design team meetings for their discussion input.
In particular, we would like to thank Koen Zandberg, Emmanuel Baccelli, Carsten Bormann, David Brown, Markus Gueller, Frank Audun Kvamtro, Oyvind Ronningstad, Michael Richardson, Jan-Frederik Rieckers, Francisco Acosta, Anton Gerasimov, Matthias Waehlisch, Max Groening, Daniel Petry, Gaetan Harter, Ralph Hamm, Steve Patrick, Fabio Utzig, Paul Lambert, Benjamin Kaduk, Said Gharout, and Milen Stoychev.</t>

<t>We would like to thank those who contributed to the development of this information model. In particular, we would like to thank Milosch Meriac, Jean-Luc Giraud, Dan Ros, Amyas Philips, and Gary Thomson.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<date month='October' day='21' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.  This version of the document assumes asymmetric cryptography and a public key infrastructure.  Future versions may also describe a symmetric key approach for very constrained devices.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-07.txt' />
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="STRIDE" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx">
  <front>
    <title>The STRIDE Threat Model</title>
    <author >
      <organization>Microsoft</organization>
    </author>
    <date year="2018" month="May"/>
  </front>
  <format type="HTML" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx"/>
</reference>




<reference  anchor="RFC5652" target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2009' month='September' />
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>




    </references>


<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAOGPuV0AA819a3PbVpbgd/0KbPIhdpakE3f3TkY7M9W0RNua6DWilEd3
TaUgAhTRBgE2AEpmXP4v+1v2l+153hcuKNlJz2xXdUUGgfs499zzfozH44Ou
6Mr8MJlWyUm1rJt12hV1lZzVWV4m8O/kddGsH9ImT242WdrlbVLAm/V1cpzf
F4u8PUhvb5v8Hgawb56lVbHM264/4kFWL6p0DfNlTbrsxkXeLcfttoC/7Kvj
Nb46/uaPBwuY8K5udodJ22UHB8WmOUw2Tf6nP/zTd9fNtu1efvPNP3/z8gDm
TA+Teb7YNkW3O3iom3d3Tb3dwLObk+uDd/kOHmWHsJwub6q8Gx/j5AcHbZdW
2S9pWVewoB3sZVMcHiRJs1zkWdvtSnmaJF29cP4sqiyvOn3Q1k3X5MvW/Hu3
9v7ZNcXCvLyo12v41vxaVGVRmWkAOOt0symqO36SbrtV3cCSxvAj/a+o4NNX
EwBmk1b6kAH6qsmrLK38n+rmDs7iVwIrHFGzTk6LddHlmb6Qr9OiNB9P6OM/
p816Ais9CCd+O0mu28WqXuZVcefP/jatKsCN/s9PXcGKBph0ZoA/363fT+Cw
Yqt4VTTvVnX5a7CGvHrX+8mf/3WTbiucoEnmgBnBEuD7ya18/+e26CZL8/ok
yw8OKsbQ+xyx5Or10ctvv/1n+fOP3758iX+ejI8nFqnTZrGCvS66bQPfGBTn
AebXVyfHs0NaRJc2dzlgSbLquk17+OLFus2qybpYNHVbLzs8jRd5Nd62L8ri
tkmb3Ys8/+7lH777p++e3f/rop28/Ob5JG0373kwvtHXq1zmgD/hhnRyBfEV
g1kKo8PkTCejh3jV4Vm6S15+8+139IgXr9+8vT47/V3WC8D70//600uB43ff
4p8H4/E4SW/h7qQLQIAftmWVN+ltURZdAVj2UHQrc5mTegn7gzvTJs+ALj1P
MiZMgFH3edKkRZtnSQewqHL4AylaCne2LLIELn/SItHIk6WSri0RuWSdLwAh
i3YNXwLgijZJy7ZO8FDT2zKnYRZ1hQuE+5vpnJNkVrVAhKo7/k6XstxWCyKC
OGWD6FbpzPU94CIsr2jgSYOvJyUQT3jr79uigW/b7WIF30VWVsOy3yf3PnBG
+FzehRUui7ttwwS4zbsOwTRKUgBhXpb43zTLcLVV/mAWmZZIRA8uKhxgvQHi
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
XhirEYdffdVyq6WddGYkB0hWUJ1GEYVISXUIJeKjeNwdHdJa5fpJ/k6gCaLJ
cNCFte0NCo/OWE5BDtf1QlEPXvhMli+K1mZ72OpIa6T0Iu85DQi/DMpYyWUP
7x/TAkMrwmsCpEt/8m6KI5vk2j3SJJ1wbIZMxFnm6/W24rp4NB8HZ6PQARIf
ik5u7QVHYMu01yZcVTrJUBVivPbFl8hrVE+I6rA7vBPbcZHkHR2XtkkGmjYo
OsaBym4URGy6no2LOaCzBM8W3e7fZajH6SWIKeMo2PK6fS1fPinxthkRERGR
pcteVQtOs0aDuFVdRUr/0dTqMjyd02Ox8ATcLdjG/Gh6PDUCeRfa99dF21uZ
5rYrd/cI1KRnDj4+mR+dXsxvrmboo8XYzjyZYdhWzt69i6U11HBJWyRdP3gR
kVP1XnmmYxtiHrHkDBgyH9KKWde63lKdGXUdEBNx4rap6hcILhuNHpL3VpSP
1JLHHKCYa9H7oWhNOh8W7lpuSYfta539R8Nc2PIGm/6VyA9CxBYzDsLRBuWW
z00NNcfnpY0fJhecIU6dFlSVC/OCnCPysso/0Ycl/UIoP4GEVRUMEVQaIkUx
YhjkK3M4KfrP/nozn139Mse8WrMD2LzpJr6z+e7POXmTej+TtTPS+NMTCWwM
mF1NEAaiPptgH2apklrHZYcQRbBMgF+wh5kuf8asjAsL4FM8L1s1SgVF47ZY
isTF2dJxCf7VThdDjg89Pc3Js1WDhkpV1I5ThTcyetTtZKzUeyzBnyJJe4g6
++lSyMyRg9Q9DMW61UQ0AkzN5XEEU928lmMnrwXZT9FkYjfUKo/GsUeGQWQr
HAbrYZbxuRvn6iBEPsdHHUkSuL6aYs1uTN6kAAD2/DK18cgqLXw/RSXXjbd3
NudJMQAuDCntQQunEhrnjnK5YXE8i0fJBuuYlA/27ZopFmyP1RKx6vikwXxL
5Ttkpx0Or00YK+6Hjpju+Vcfo51nl6ez69kvxydvZvNrj3bejdUBKNXffJB/
P/vZwUeDcVJqD9eBtRUs3DFdcg8C7gM9qyytlFNAIoQVdrE8IblsrEc95bZ1
jhtN6ne/nZ+57k0EtHAsKyemmkcnDVvzu4IdGdZgis8xwVGNA7icojW5j0uX
YDi9RsQfF5y0LiDMuuIF1Nu7FS/2QSWcfSvqW3o9Wi4xyF5WdirhV4i7lQnQ
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

-->

</rfc>

