<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-information-model-03" category="std">

  <front>
    <title abbrev="A Firmware Manifest Information Model">Firmware Updates for Internet of Things Devices - An Information Model for Manifests</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="July" day="05"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices. Incorporating such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality is recommended by security experts.</t>

<t>One component of such a firmware update is a concise and machine-processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The information model describes all the information elements required to secure firmware updates of IoT devices from the threats described in <xref target="threat-model"/> and enables the user stories captured in <xref target="user-stories"/>. These threats and user stories are not intended to be an exhaustive list of the threats against IoT devices, nor of the possible user stories that describe how to conduct a firmware update. Instead they are intended to describe the threats against firmware updates in isolation and provide sufficient motivation to specify the information elements that cover a wide range of user stories. The information model does not define the serialization, encoding, ordering, or structure of information elements, only their semantics.</t>

<t>Because the information model covers a wide range of user stories and a wide range of threats, not all information elements apply to all scenarios. As a result, various information elements could be considered optional to implement and optional to use, depending on which threats exist in a particular domain of application and which user stories are required. Elements marked as mandatory provide baseline security and usability properties that are expected to be required for most applications. Those elements are mandatory to implement and mandatory to use. Elements marked as recommended provide important security or usability properties that are needed on most devices. Elements marked as optional enable security or usability properties that are useful in some applications.</t>

<t>The definition of some of the information elements include examples that illustrate their semantics and how they are intended to be used.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>This document uses terms defined in <xref target="I-D.ietf-suit-architecture"/>.
The term ‘Operator’ refers to both, Device and Network Operator.</t>

<t>This document treats devices with a homogeneous storage architecture as devices with a heterogeneous storage architecture, but with a single storage subsystem.</t>

<section anchor="requirements-notation" title="Requirements Notation">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="manifest-information-elements" title="Manifest Information Elements">

<t>Each manifest information element is anchored in a security requirement or a usability requirement. The manifest elements are described below, justified by their requirements.</t>

<section anchor="element-version-id" title="Manifest Element: Version ID of the manifest structure">

<t>An identifier that describes which iteration of the manifest format is contained in the structure.</t>

<t>This element is MANDATORY and MUST be present in order to allow devices to identify the version of the manifest data model that is in use.</t>

</section>
<section anchor="element-sequence-number" title="Manifest Element: Monotonic Sequence Number">

<t>A monotonically increasing sequence number. For convenience, the monotonic sequence number MAY be a UTC timestamp. This allows global synchronisation of sequence numbers without any additional management. This number MUST be easily accessible so that code choosing one out of several manifests can choose which is the latest.</t>

<t>This element is MANDATORY and is necessary to prevent malicious actors from reverting a firmware update against the policies of the relevant authority.</t>

<t>Implements: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="element-vendor-id" title="Manifest Element: Vendor ID">

<t>Vendor IDs MUST be unique. This is to prevent similarly, or identically named entities from different geographic regions from colliding in their customer’s infrastructure. Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with the vendor’s domain name and the UUID DNS prefix. Other options include type 1 and type 4 UUIDs.</t>

<t>Vendor ID is not intended to be a human-readable element. It is intended for match/mismatch comparison only.</t>

<t>The use of a Vendor ID is RECOMMENDED. It helps to distinguish between identically named products from different vendors.</t>

<t>Implements: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-domain-name-based-uuids" title="Example: Domain Name-based UUIDs">

<t>Vendor A creates a UUID based on their domain name:</t>

<t>vendorId = UUID5(DNS, “vendor-a.com”)</t>

<t>Because the DNS infrastructure prevents multiple registrations of the same domain name, this UUID is guaranteed to be unique. Because the domain name is known, this UUID is reproducible. Type 1 and type 4 UUIDs produce similar guarantees of uniqueness, but not reproducibility.</t>

<t>This approach creates a contention when a vendor changes its name or relinquishes control of a domain name. In this scenario, it is possible that another vendor would start using that same domain name. However, this UUID is not proof of identity; a device’s trust in a vendor must be anchored in a cryptographic key, not a UUID.</t>

</section>
</section>
<section anchor="element-class-id" title="Manifest Element: Class ID">

<t>A device “Class” is a set of different device types that can accept the same firmware update without modification. Class IDs MUST be unique within the scope of a Vendor ID. This is to prevent similarly, or identically named devices colliding in their customer’s infrastructure.</t>

<t>Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with as much information as necessary to define firmware compatibility. Possible information used to derive the class UUID includes:</t>

<t><list style="symbols">
  <t>model name or number</t>
  <t>hardware revision</t>
  <t>runtime library version</t>
  <t>bootloader version</t>
  <t>ROM revision</t>
  <t>silicon batch number</t>
</list></t>

<t>The Class Identifier UUID SHOULD use the Vendor ID as the UUID prefix. Other options include version 1 and 4 UUIDs. Classes MAY be more granular than is required to identify firmware compatibility. Classes MUST NOT be less granular than is required to identify firmware compatibility. Devices MAY have multiple Class IDs.</t>

<t>Class ID is not intended to be a human-readable element. It is intended for match/mismatch comparison only.</t>

<t>The use of Class ID is RECOMMENDED. It allows devices to determine applicability of a firmware in an unambiguous way.</t>

<t>If Class ID is not implemented, then each logical device class MUST use a unique Root of Trust for authorisation.</t>

<t>Implements: Security Requirement <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-1-different-classes" title="Example 1: Different Classes">

<t>Vendor A creates product Z and product Y. The firmware images of products Z and Y are not interchangeable. Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>ZclassId = UUID5(vendorId, “Product Z”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
</list></t>

<t>This ensures that Vendor A’s Product Z cannot install firmware for Product Y and Product Y cannot install firmware for Product Z.</t>

</section>
<section anchor="example-2-upgrading-class-id" title="Example 2: Upgrading Class ID">

<t>Vendor A creates product X. Later, Vendor A adds a new feature to product X, creating product X v2. Product X requires a firmware update to work with firmware intended for product X v2.</t>

<t>Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>Xv2classId = UUID5(vendorId, “Product X v2”)</t>
</list></t>

<t>When product X receives the firmware update necessary to be compatible with product X v2, part of the firmware update changes the class ID to Xv2classId.</t>

</section>
<section anchor="example-3-shared-functionality" title="Example 3: Shared Functionality">

<t>Vendor A produces two products, product X and product Y. These components share a common core (such as an operating system), but have different applications. The common core and the applications can be updated independently. To enable X and Y to receive the same common core update, they require the same class ID. To ensure that only product X receives application X and only product Y receives application Y, product X and product Y must have different class IDs. The vendor creates Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
  <t>CommonClassId = UUID5(vendorId, “common core”)</t>
</list></t>

<t>Product X matches against both XclassId and CommonClassId. Product Y matches against both YclassId and CommonClassId.</t>

</section>
</section>
<section anchor="element-precursor-digest" title="Manifest Element: Precursor Image Digest Condition">

<t>When a precursor image is required by the payload format, a precursor image digest condition MUST be present in the conditions list. The precursor image may be installed or stored as a candidate.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Enables feature: differential updates.</t>

<t>Implements: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="element-required-version" title="Manifest Element: Required Image Version List">

<t>When a payload applies to multiple versions of a firmware, the required image version list specifies which versions must be present for the update to be applied. This allows the update author to target specific versions of firmware for an update, while excluding those to which it should not be applied.</t>

<t>Where an update can only be applied over specific predecessor versions, that version MUST be specified by the Required Image Version List.</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="manifest-element-expiration" title="Manifest Element: Expiration Time">

<t>This element tells a device the time at which the manifest expires and should no longer be used. This is only usable in conjunction with a secure source of time.</t>

<t>This element is OPTIONAL and MAY enable user stories where a secure source of time is provided and firmware is intended to expire predictably.</t>

<t>Implements: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="manifest-element-format" title="Manifest Element: Payload Format">

<t>The format of the payload MUST be indicated to devices is in an unambiguous way. This element provides a mechanism to describe the payload format, within the signed metadata.</t>

<t>This element is MANDATORY and MUST be present to enable devices to decode payloads correctly.</t>

<t>Implements: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref>, <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="manifest-element-processing-steps" title="Manifest Element: Processing Steps">

<t>A representation of the Processing Steps required to decode a payload. The representation MUST describe which algorithm(s) is used and any additional parameters required by the algorithm(s). The representation MAY group Processing Steps together in predefined combinations.</t>

<t>A Processing Step MAY indicate the expected digest of the payload after the processing is complete.</t>

<t>Processing steps are RECOMMENDED to implement.</t>

<t>Enables feature: Encrypted, compressed, packed formats</t>

<t>Implements: <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref></t>

</section>
<section anchor="maniest-element-storage-location" title="Manifest Element: Storage Location">

<t>This element tells the device where to store a payload within a given component. The device can use this to establish which permissions are necessary and the physical storage location to use.</t>

<t>This element is MANDATORY and MUST be present to enable devices to store payloads to the correct location.</t>

<t>Implements: <xref target="req-sec-authentic-image-location">REQ.SEC.AUTH.IMG_LOC</xref></t>

<section anchor="example-1-two-storage-locations" title="Example 1: Two Storage Locations">

<t>A device supports two components: an OS and an application. These components can be updated independently, expressing dependencies to ensure compatibility between the components. The firmware authority chooses two storage identifiers:</t>

<t><list style="symbols">
  <t>“OS”</t>
  <t>“APP”</t>
</list></t>

</section>
<section anchor="example-2-file-system" title="Example 2: File System">

<t>A device supports a full filesystem. The firmware authority chooses to use the storage identifier as the path at which to install the payload. The payload may be a tarball, in which case, it unpacks the tarball into the specified path.</t>

</section>
<section anchor="example-3-flash-memory" title="Example 3: Flash Memory">

<t>A device supports flash memory. The firmware authority chooses to make the storage identifier the offset where the image should be written.</t>

</section>
</section>
<section anchor="manifest-element-component-identifier" title="Manifest Element: Component Identifier">

<t>In a heterogeneous storage architecture, a storage identifier is insufficient to identify where and how to store a payload. To resolve this, a component identifier indicates which part of the storage architecture is targeted by the payload. In a homogeneous storage architecture, this element is unnecessary.</t>

<t>This element is OPTIONAL and only necessary in heterogeneous storage architecture devices.</t>

<t>N.B. A serialisation MAY choose to combine Component Identifier and <xref target="maniest-element-storage-location">Storage Location</xref></t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-resource-indicator" title="Manifest Element: Resource Indicator">

<t>This element provides the information required for the device to acquire the resource. This can be encoded in several ways:</t>

<t><list style="symbols">
  <t>One URI</t>
  <t>A list of URIs</t>
  <t>A prioritised list or URIs</t>
  <t>A list of signed URIs</t>
</list></t>

<t>This element is OPTIONAL and only needed when the target device does not intrinsically know where to find the payload.</t>

<t>N.B. Devices will typically require URIs.</t>

<t>Implements: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="manifest-element-payload-digest" title="Manifest Element: Payload Digests">

<t>This element contains one or more digests of one or more payloads. This allows the target device to ensure authenticity of the payload(s). A serialisation MUST provide a mechanism to select one payload from a list based on system parameters, such as XIP address.</t>

<t>This element is MANDATORY to implement and fundamentally necessary to ensure the authenticity and integrity of the payload. Support for more than one digest is OPTIONAL to implement in a recipient device.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-size" title="Manifest Element: Size">

<t>The size of the payload in bytes.</t>

<t>Variable-size storage locations MUST be set to exactly the size listed in this element.</t>

<t>This element is MANDATORY and informs the target device how big of a payload to expect. Without it, devices are exposed to some classes of denial of service attack.</t>

<t>Implements: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="manifest-element-signature" title="Manifest Element: Signature">

<t>This is not strictly a manifest element. Instead, the manifest is wrapped by a standardised authentication container, such as a COSE (<xref target="RFC8152"/>) or CMS (<xref target="RFC5652"/>) signature object. The authentication container MUST support multiple actors and multiple authentication methods.</t>

<t>This element is MANDATORY and represents the foundation of all security properties of the manifest. There are two exceptions to this requirement: 1) if the manifest is authenticated by a second manifest as a dependency and 2) if the manifest is authenticated by channel security and contains only channel information (such as URIs).</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref></t>

</section>
<section anchor="manifest-element-additional-install-info" title="Manifest Element: Additional installation instructions">

<t>Instructions that the device should execute when processing the manifest. This information is distinct from the information necessary to process a payload. Additional installation instructions include information such as update timing (For example, install only on Sunday, at 0200), procedural considerations (for example, shut down the equipment under control before executing the update), pre and post-installation steps (for example, run a script).</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="manifest-element-aliases" title="Manifest Element: Aliases">

<t>A mechanism for a manifest to augment or replace URIs or URI lists defined by one or more of its dependencies.</t>

<t>This element is OPTIONAL and enables some user stories.</t>

<t>Implements: <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="manifest-element-dependencies" title="Manifest Element: Dependencies">

<t>A list of other manifests that are required by the current manifest. Manifests are identified an an unambiguous way, such as a digest.</t>

<t>This element is MANDATORY to use in deployments that include both multiple authorities and multiple payloads.</t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-encryption-wrapper" title="Manifest Element: Encryption Wrapper">

<t>Encrypting firmware images requires symmetric content encryption keys. The encryption wrapper provides the information needed for a device to obtain or locate a key that it uses to decrypt the firmware. Typical choices for an encryption wrapper include CMS (<xref target="RFC5652"/>) or COSE (<xref target="RFC8152"/>). This MAY be included in a decryption step contained in <xref target="manifest-element-processing-steps">Processing Steps</xref>.</t>

<t>This element is MANDATORY to use for encrypted payloads,</t>

<t>Implements: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="manifest-element-xip-address" title="Manifest Element: XIP Address">

<t>In order to support XIP systems with multiple possible base addresses, it is necessary to specify which address the payload is linked for.</t>

<t>For example a microcontroller may have a simple bootloader that chooses one of two images to boot. That microcontroller then needs to choose one of two firmware images to install, based on which of its two images is older.</t>

<t>Implements: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-load-metadata" title="Manifest Element: Load-time metadata">

<t>Load-time metadata provides the device with information that it needs in order to load one or more images. This is effectively a copy operation from the permanent storage location of an image into the active use location of that image. The metadata contains the source and destination of the image as well as any operations that are performed on the image.</t>

<t>Implements: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="manifest-element-exec-metadata" title="Manifest Element: Run-time metadata">

<t>Run-time metadata provides the device with any extra information needed to boot the device. This may include information such as the entry-point of an XIP image or the kernel command-line of a linux image.</t>

<t>Implements: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="manifest-element-payload" title="Manifest Element: Payload">

<t>The Payload element provides a recipient device with the whole payload, contained within the manifest superstructure. This enables the manifest and payload to be delivered simultaneously.</t>

<t>Implements: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="manifest-element-key-claims" title="Manifest Element: Key Claims">

<t>The Key Claims element is not authenticated by the <xref target="manifest-element-signature">Signature</xref>, instead, it provides a chain of key delegations (or references to them) for the device to follow in order to verify the key that authenticated the manifest using a trusted key.</t>

<t>Implements: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
</section>
<section anchor="design-motivation" title="Motivation for Manifest Fields">
<t>The following sub-sections describe the threat model, user stories, security requirements, and usability requirements.</t>

<section anchor="threat-model" title="Threat Model">

<t>The following sub-sections aim to provide information about the threats that were considered, the security requirements that are derived from those threats and the fields that permit implementation of the security requirements. This model uses the S.T.R.I.D.E. <xref target="STRIDE"/> approach. Each threat is classified according to:</t>

<t><list style="symbols">
  <t>Spoofing Identity</t>
  <t>Tampering with data</t>
  <t>Repudiation</t>
  <t>Information disclosure</t>
  <t>Denial of service</t>
  <t>Elevation of privilege</t>
</list></t>

<t>This threat model only covers elements related to the transport of firmware updates. It explicitly does not cover threats outside of the transport of firmware updates. For example, threats to an IoT device due to physical access are out of scope.</t>

</section>
<section anchor="threat-descriptions" title="Threat Descriptions">

<section anchor="threat-expired" title="THREAT.IMG.EXPIRED: Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker sends an old, but valid manifest with an old, but valid firmware image to a device. If there is a known vulnerability in the provided firmware image, this may allow an attacker to exploit the vulnerability and gain control of the device.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="threat-expired-rollback" title="THREAT.IMG.EXPIRED.ROLLBACK : Offline device + Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker targets a device that has been offline for a long time and runs an old firmware version. The attacker sends an old, but valid manifest to a device with an old, but valid firmware image. The attacker-provided firmware is newer than the installed one but older than the most recently available firmware. If there is a known vulnerability in the provided firmware image then this may allow an attacker to gain control of a device. Because the device has been offline for a long time, it is unaware of any new updates. As such it will treat the old manifest as the most current.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="threat-incompatible" title="THREAT.IMG.INCOMPATIBLE: Mismatched Firmware">

<t>Classification: Denial of Service</t>

<t>An attacker sends a valid firmware image, for the wrong type of device, signed by an actor with firmware installation permission on both types of device. The firmware is verified by the device positively because it is signed by an actor with the appropriate permission. This could have wide-ranging consequences. For devices that are similar, it could cause minor breakage, or expose security vulnerabilities. For devices that are very different, it is likely to render devices inoperable.</t>

<t>Mitigated by: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref></t>

<section anchor="example" title="Example:">

<t>Suppose that two vendors, Vendor A and Vendor B, adopt the same trade name in different geographic regions, and they both make products with the same names, or product name matching is not used. This causes firmware from Vendor A to match devices from Vendor B.</t>

<t>If the vendors are the firmware authorities, then devices from Vendor A will reject images signed by Vendor B since they use different credentials. However, if both devices trust the same firmware authority, then, devices from Vendor A could install firmware intended for devices from Vendor B.</t>

</section>
</section>
<section anchor="threat-img-format" title="THREAT.IMG.FORMAT: The target device misinterprets the type of payload">

<t>Classification: Denial of Service</t>

<t>If a device misinterprets the format of the firmware image, it may cause a device to install a firmware image incorrectly. An incorrectly installed firmware image would likely cause the device to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received firmware image may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref></t>

</section>
<section anchor="threat-img-location" title="THREAT.IMG.LOCATION: The target device installs the payload to the wrong location">

<t>Classification: Denial of Service</t>

<t>If a device installs a firmware image to the wrong location on the device, then it is likely to break. For example, a firmware image installed as an application could cause a device and/or an application to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received code may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_LOC</xref></t>

</section>
<section anchor="threat-net-redirect" title="THREAT.NET.REDIRECT: Redirection to inauthentic payload hosting">

<t>Classification: Denial of Service</t>

<t>If a device does not know where to obtain the payload for an update, it may be redirected to an attacker’s server. This would allow an attacker to provide broken payloads to devices.</t>

<t>Mitigated by: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="threatnetmitm" title="THREAT.NET.MITM">

</section>
<section anchor="threat-image-replacement" title="THREAT.IMG.REPLACE: Payload Replacement">

<t>Classification: Elevation of Privilege</t>

<t>An attacker replaces a newly downloaded firmware after a device finishes verifying a manifest. This could cause the device to execute the attacker’s code. This attack likely requires physical access to the device. However, it is possible that this attack is carried out in combination with another threat that allows remote execution. This is a typical Time Of Check/Time Of Use threat.</t>

<t>Threat Escalation: If the attacker is able to exploit a known
vulnerability, or if the attacker can supply their own firmware, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="threat-img-unauthenticated" title="THREAT.IMG.NON_AUTH: Unauthenticated Images">

<t>Classification: Elevation of Privilege / All Types</t>

<t>If an attacker can install their firmware on a device, by manipulating either payload or metadata, then they have complete control of the device.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref></t>

</section>
<section anchor="threat-upd-wrong-precursor" title="THREAT.UPD.WRONG_PRECURSOR: Unexpected Precursor images">

<t>Classification: Denial of Service / All Types</t>

<t>An attacker sends a valid, current manifest to a device that has an unexpected precursor image. If a payload format requires a precursor image (for example, delta updates) and that precursor image is not available on the target device, it could cause the update to break.</t>

<t>An attacker that can cause a device to install a payload against the wrong precursor image could gain elevation of privilege and potentially expand this to all types of threat. However, it is unlikely that a valid differential update applied to an incorrect precursor would result in a functional, but vulnerable firmware.</t>

<t>Mitigated by: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="threat-upd-interop" title="THREAT.UPD.INTEROP: Unqualified Firmware">

<t>Classification: Denial of Service, Elevation of Privilege</t>

<t>This threat can appear in several ways, however it is ultimately about interoperability of devices with other systems. The owner or operator of a network needs to approve firmware for their network in order to ensure interoperability with other devices on the network, or the network itself. If the firmware is not qualified, it may not work. Therefore, if a device installs firmware without the approval of the network owner or operator, this is a threat to devices and the network.</t>

<t>Threat Escalation: If the firmware expects configuration that is present in devices deployed in Network A, but not in devices deployed in Network B, then the device may experience degraded security, leading to threats of All Types.</t>

<t>Mitigated by: <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

<section anchor="example-1-multiple-network-operators-with-a-single-device-operator" title="Example 1: Multiple Network Operators with a Single Device Operator">

<t>In this example, assume that Device Operators expect the rights to create firmware but that Network Operators expect the rights to qualify firmware as fit-for-purpose on their networks. Additionally, assume that Device Operators manage devices that can be deployed on any network, including Network A and B in our example.</t>

<t>An attacker may obtain a manifest for a device on Network A. Then, this attacker sends that manifest to a device on Network B. Because Network A and Network B are under control of different Operators, and the firmware for a device on Network A has not been qualified to be deployed on Network B, the target device on Network B is now in violation of the Operator B’s policy and may be disabled by this unqualified, but signed firmware.</t>

<t>This is a denial of service because it can render devices inoperable. This is an elevation of privilege because it allows the attacker to make installation decisions that should be made by the Operator.</t>

</section>
<section anchor="example-2-single-network-operator-with-multiple-device-operators" title="Example 2: Single Network Operator with Multiple Device Operators">

<t>Multiple devices that interoperate are used on the same network and communicate with each other. Some devices are manufactured and managed by Device Operator A and other devices by Device Operator B. A new firmware is released by Device Operator A that breaks compatibility with devices from Device Operator B. An attacker sends the new firmware to the devices managed by Device Operator A without approval of the Network Operator. This breaks the behaviour of the larger system causing denial of service and possibly other threats. Where the network is a distributed SCADA system, this could cause misbehaviour of the process that is under control.</t>

</section>
</section>
<section anchor="threat-img-disclosure" title="THREAT.IMG.DISCLOSURE: Reverse Engineering Of Firmware Image for Vulnerability Analysis">

<t>Classification: All Types</t>

<t>An attacker wants to mount an attack on an IoT device. To prepare the attack he or she retrieves the provided firmware image and performs reverse engineering of the firmware image to analyze it for specific vulnerabilities.</t>

<t>Mitigated by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-mfst-override" title="THREAT.MFST.OVERRIDE: Overriding Critical Manifest Elements">

<t>Classification: Elevation of Privilege</t>

<t>An authorised actor, but not the firmware authority, uses an override mechanism (<xref target="user-story-override">USER_STORY.OVERRIDE</xref>) to change an information element in a manifest signed by the firmware authority. For example, if the authorised actor overrides the digest and URI of the payload, the actor can replace the entire payload with a payload of their choice.</t>

<t>Threat Escalation: By overriding elements such as payload installation instructions or firmware digest, this threat can be escalated to all types.</t>

<t>Mitigated by: <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="threat-mfst-exposure" title="THREAT.MFST.EXPOSURE: Confidential Manifest Element Exposure">

<t>Classification: Information Disclosure</t>

<t>A third party may be able to extract sensitive information from the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-img-extra" title="THREAT.IMG.EXTRA: Extra data after image">

<t>Classification: All Types</t>

<t>If a third party modifies the image so that it contains extra code after a valid, authentic image, that third party can then use their own code in order to make better use of an existing vulnerability</t>

<t>Mitigated by: <xref target="req-sec-img-complete-digest">REQ.SEC.IMG.COMPLETE_DIGEST</xref></t>

</section>
</section>
<section anchor="security-requirements" title="Security Requirements">

<t>The security requirements here are a set of policies that mitigate the threats described in <xref target="threat-model"/>.</t>

<section anchor="req-sec-sequence" title="REQ.SEC.SEQUENCE: Monotonic Sequence Numbers">

<t>Only an actor with firmware installation authority is permitted to decide when device firmware can be installed. To enforce this rule, manifests MUST contain monotonically increasing sequence numbers. Manifests MAY use UTC epoch timestamps to coordinate monotonically increasing sequence numbers across many actors in many locations. If UTC epoch timestamps are used, they MUST NOT be treated as times, they MUST be treated only as sequence numbers. Devices MUST reject manifests with sequence numbers smaller than any onboard sequence number.</t>

<t>Note: This is not a firmware version. It is a manifest sequence number. A firmware version may be rolled back by creating a new manifest for the old firmware version with a later sequence number.</t>

<t>Mitigates: <xref target="threat-expired">THREAT.IMG.EXPIRED</xref></t>

<t>Implemented by: <xref target="element-sequence-number">Monotonic Sequence Number</xref></t>

</section>
<section anchor="req-sec-compatible" title="REQ.SEC.COMPATIBLE: Vendor, Device-type Identifiers">

<t>Devices MUST only apply firmware that is intended for them. Devices MUST know with fine granularity that a given update applies to their vendor, model, hardware revision, software revision. Human-readable identifiers are often error-prone in this regard, so unique identifiers SHOULD be used.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented by: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-exp" title="REQ.SEC.EXP: Expiration Time">

<t>Firmware MAY expire after a given time. Devices MAY provide a secure clock (local or remote). If a secure clock is provided and the Firmware manifest has an expiration timestamp, the device MUST reject the manifest if current time is later than the expiration time.</t>

<t>Mitigates: <xref target="threat-expired-rollback">THREAT.IMG.EXPIRED.ROLLBACK </xref></t>

<t>Implemented by: <xref target="manifest-element-expiration">Expiration Time</xref></t>

</section>
<section anchor="req-sec-authentic" title="REQ.SEC.AUTHENTIC: Cryptographic Authenticity">

<t>The authenticity of an update MUST be demonstrable. Typically, this means that updates must be digitally authenticated. Because the manifest contains information about how to install the update, the manifest’s authenticity MUST also be demonstrable. To reduce the overhead required for validation, the manifest contains the digest of the firmware image, rather than a second digital signature. The authenticity of the manifest can be verified with a digital signature or Message Authentication Code, the authenticity of the firmware image is tied to the manifest by the use of a digest of the firmware image.</t>

<t>Mitigates: <xref target="threat-img-unauthenticated">THREAT.IMG.NON_AUTH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref>, <xref target="manifest-element-payload-digest">Payload Digest</xref></t>

</section>
<section anchor="req-sec-authentic-image-type" title="REQ.SEC.AUTH.IMG_TYPE: Authenticated Payload Type">

<t>The type of payload (which may be independent of format) MUST be authenticated. For example, the target must know whether the payload is XIP firmware, a loadable module, or serialized configuration data.</t>

<t>Mitigates: <xref target="threat-img-format">THREAT.IMG.FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref>, <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authentic-image-location" title="Security Requirement REQ.SEC.AUTH.IMG_LOC: Authenticated Storage Location">

<t>The location on the target where the payload is to be stored MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-img-location">THREAT.IMG.LOCATION</xref></t>

<t>Implemented by: <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authenticated-remote-resource" title="REQ.SEC.AUTH.REMOTE_LOC: Authenticated Remote Resource Location">

<t>The location where a target should find a payload MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-net-redirect">THREAT.NET.REDIRECT</xref></t>

<t>Implemented by: <xref target="manifest-element-resource-indicator">Resource Indicator</xref></t>

</section>
<section anchor="req-sec-authentic-execution" title="REQ.SEC.AUTH.EXEC: Secure Execution">

<t>The target SHOULD verify firmware at time of boot. This requires authenticated payload size, and digest.</t>

<t>Mitigates: <xref target="threat-image-replacement">THREAT.IMG.REPLACE</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digest</xref>, <xref target="manifest-element-size">Size</xref></t>

</section>
<section anchor="req-sec-authentic-precursor" title="REQ.SEC.AUTH.PRECURSOR: Authenticated precursor images">

<t>If an update uses a differential compression method, it MUST specify the digest of the precursor image and that digest MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-upd-wrong-precursor">THREAT.UPD.WRONG_PRECURSOR</xref></t>

<t>Implemented by: <xref target="element-precursor-digest">Precursor Image Digest</xref></t>

</section>
<section anchor="req-sec-authentic-compatibility" title="REQ.SEC.AUTH.COMPATIBILITY: Authenticated Vendor and Class IDs">

<t>The identifiers that specify firmware compatibility MUST be authenticated to ensure that only compatible firmware is installed on a target device.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented By: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-rights" title="REQ.SEC.RIGHTS: Rights Require Authenticity">

<t>If a device grants different rights to different actors, exercising those rights MUST be accompanied by proof of those rights, in the form of proof of authenticity. Authenticity mechanisms such as those required in <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref> are acceptable but need to follow the end-to-end security model.</t>

<t>For example, if a device has a policy that requires that firmware have both an Authorship right and a Qualification right and if that device grants Authorship and Qualification rights to different parties, such as a Device Operator and a Network Operator, respectively, then the firmware cannot be installed without proof of rights from both the Device and the Network Operator.</t>

<t>Mitigates: <xref target="threat-upd-interop">THREAT.UPD.INTEROP</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-sec-image-confidentiality" title="REQ.SEC.IMG.CONFIDENTIALITY: Payload Encryption">

<t>The manifest information model MUST enable encrypted payloads. Encryption helps to prevent third parties, including attackers, from reading the content of the firmware image. This can protect against confidential information disclosures and discovery of vulnerabilities through reverse engineering. Therefore the manifest must convey the information required to allow an intended recipient to decrypt an encrypted payload.</t>

<t>Mitigates: <xref target="threat-img-disclosure">THREAT.IMG.DISCLOSURE</xref></t>

<t>Implemented by: <xref target="manifest-element-encryption-wrapper">Encryption Wrapper</xref></t>

</section>
<section anchor="req-sec-access-control" title="REQ.SEC.ACCESS_CONTROL: Access Control">

<t>If a device grants different rights to different actors, then an exercise of those rights MUST be validated against a list of rights for the actor. This typically takes the form of an Access Control List (ACL). ACLs are applied to two scenarios:</t>

<t><list style="numbers">
  <t>An ACL decides which elements of the manifest may be overridden and by which actors.</t>
  <t>An ACL decides which component identifier/storage identifier pairs can be written by which actors.</t>
</list></t>

<t>Mitigates: <xref target="threat-mfst-override">THREAT.MFST.OVERRIDE</xref>, <xref target="threat-upd-interop">THREAT.UPD.INTEROP</xref></t>

<t>Implemented by: Client-side code, not specified in manifest.</t>

</section>
<section anchor="req-sec-mfst-confidentiality" title="REQ.SEC.MFST.CONFIDENTIALITY: Encrypted Manifests">

<t>It MUST be possible to encrypt part or all of the manifest. This may be accomplished with either transport encryption or with at-rest encryption.</t>

<t>Mitigates: <xref target="threat-mfst-exposure">THREAT.MFST.EXPOSURE</xref></t>

<t>Implemented by: External Encryption Wrapper / Transport Security</t>

</section>
<section anchor="req-sec-img-complete-digest" title="REQ.SEC.IMG.COMPLETE_DIGEST: Whole Image Digest">

<t>The digest SHOULD cover all available space in a fixed-size storage location. Variable-size storage locations MUST be restricted to exactly the size of deployed payload. This prevents any data from being distributed without being covered by the digest. For example, XIP microcontrollers typically have fixed-size storage. These devices should deploy a digest that covers the deployed firmware image, concatenated with the default erased value of any remaining space.</t>

<t>Mitigates: <xref target="threat-img-extra">THREAT.IMG.EXTRA</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digests</xref></t>

</section>
</section>
<section anchor="user-stories" title="User Stories">

<t>User stories provide expected use cases. These are used to feed into usability requirements.</t>

<section anchor="user-story-install-instructions" title="USER_STORY.INSTALL.INSTRUCTIONS: Installation Instructions">

<t>As a Device Operator, I want to provide my devices with additional installation instructions so that I can keep process details out of my payload data.</t>

<t>Some installation instructions might be:</t>

<t><list style="symbols">
  <t>Use a table of hashes to ensure that each block of the payload is validate before writing.</t>
  <t>Do not report progress.</t>
  <t>Pre-cache the update, but do not install.</t>
  <t>Install the pre-cached update matching this manifest.</t>
  <t>Install this update immediately, overriding any long-running tasks.</t>
</list></t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-fail-early" title="USER_STORY.MFST.FAIL_EARLY: Fail Early">

<t>As a designer of a resource-constrained IoT device, I want bad updates to fail as early as possible to preserve battery life and limit consumed bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-override" title="USER_STORY.OVERRIDE: Override Non-Critical Manifest Elements">

<t>As a Network Operator, I would like to be able to override the non-critical information in the manifest so that I can control my devices more precisely. The authority to override this information is provided via the installation of a limited trust relationship by another authority.</t>

<t>Some examples of potentially overridable information:</t>

<t><list style="symbols">
  <t><xref target="manifest-element-resource-indicator">URIs</xref>: this allows the Network Operator to direct devices to their own infrastructure in order to reduce network load.</t>
  <t>Conditions: this allows the Network Operator to pose additional constraints on the installation of the manifest.</t>
  <t><xref target="manifest-element-additional-install-info">Directives</xref>: this allows the Network Operator to add more instructions such as time of installation.</t>
  <t><xref target="manifest-element-processing-steps">Processing Steps</xref>: If an intermediary performs an action on behalf of a device, it may need to override the processing steps. It is still possible for a device to verify the final content and the result of any processing step that specifies a digest. Some processing steps should be non-overridable.</t>
</list></t>

<t>Satisfied by: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-component" title="USER_STORY.COMPONENT: Component Update">

<t>As an Operator, I want to divide my firmware into components, so that I can reduce the size of updates, make different parties responsible for different components, and divide my firmware into frequently updated and infrequently updated components.</t>

<t>Satisfied by: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-multi-auth" title="USER_STORY.MULTI_AUTH: Multiple Authorisations">

<t>As a Device Operator, I want to ensure the quality of a firmware update before installing it, so that I can ensure interoperability of all devices in my product family. I want to restrict the ability to make changes to my devices to require my express approval.</t>

<t>Satisfied by: <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="user-story-img-format" title="USER_STORY.IMG.FORMAT: Multiple Payload Formats">

<t>As an Operator, I want to be able to send multiple payload formats to suit the needs of my update, so that I can optimise the bandwidth used by my devices.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="user-story-img-confidentiality" title="USER_STORY.IMG.CONFIDENTIALITY: Prevent Confidential Information Disclosures">

<t>As an firmware author, I want to prevent confidential information from being disclosed during firmware updates. It is assumed that channel security or at-rest encryption is adequate to protect the manifest itself against information disclosure.</t>

<t>Satisfied by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="user-story-img-unknown-format" title="USER_STORY.IMG.UNKNOWN_FORMAT: Prevent Devices from Unpacking Unknown Formats">

<t>As a Device Operator, I want devices to determine whether they can process a payload prior to downloading it.</t>

<t>In some cases, it may be desirable for a third party to perform some processing on behalf of a target. For this to occur, the third party MUST indicate what processing occurred and how to verify it against the Trust Provisioning Authority’s intent.</t>

<t>This amounts to overriding <xref target="manifest-element-processing-steps">Processing Steps</xref> and <xref target="manifest-element-resource-indicator">Resource Indicator</xref>.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref>, <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref>, <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="user-story-img-current-version" title="USER_STORY.IMG.CURRENT_VERSION: Specify Version Numbers of Target Firmware">

<t>As a Device Operator, I want to be able to target devices for updates based on their current firmware version, so that I can control which versions are replaced with a single manifest.</t>

<t>Satisfied by: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="user-story-img-select" title="USER_STORY.IMG.SELECT: Enable Devices to Choose Between Images">

<t>As a developer, I want to be able to sign two or more versions of my firmware in a single manifest so that I can use a very simple bootloader that chooses between two or more images that are executed in-place.</t>

<t>Satisfied by: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="user-story-exec-mfst" title="USER_STORY.EXEC.MFST: Secure Execution Using Manifests">

<t>As a signer for both secure execution/boot and firmware deployment, I would like to use the same signed document for both tasks so that my data size is smaller, I can share common code, and I can reduce signature verifications.</t>

<t>Satisfied by: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="user-story-exec-decompress" title="USER_STORY.EXEC.DECOMPRESS: Decompress on Load">

<t>As a developer of firmware for a run-from-RAM device, I would like to use compressed images and to indicate to the bootloader that I am using a compressed image in the manifest so that it can be used with secure execution/boot.</t>

<t>Satisfied by: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="user-story-mfst-img" title="USER_STORY.MFST.IMG: Payload in Manifest">

<t>As an operator of a constrained network, I would like to be able to send a small payload in the same packet as the manifest so that I can reduce network traffic.</t>

<t>Satisfied by: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="user-story-mfst-parse" title="USER_STORY.MFST.PARSE: Simple Parsing">

<t>As a developer for constrained devices, I want a low complexity library for processing updates so that I can fit more application code on my device.</t>

<t>Satisfied by: <xref target="req-use-parse">REQ.USE.PARSE</xref></t>

</section>
<section anchor="user-story-mfst-delegation" title="USER_STORY.MFST.DELEGATION: Delegated Authority in Manifest">

<t>As an operator that rotates delegated authority more often than delivering firmware updates, I would like to delegate a new authority when I deliver a firmware update so that I can accomplish both tasks in a single transmission.</t>

<t>Satisfied by: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
<section anchor="user-story-mfst-pre-check" title="USER_STORY.MFST.PRE_CHECK: Update Evaluation">

<t>As an operator of a constrained network, I would like devices on my network to be able to evaluate the suitability of an update prior to initiating any large download so that I can prevent unnecessary consumption of bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
</section>
<section anchor="usability-requirements" title="Usability Requirements">

<t>The following usability requirements satisfy the user stories listed above.</t>

<section anchor="req-use-mfst-pre-check" title="REQ.USE.MFST.PRE_CHECK: Pre-Installation Checks">

<t>It MUST be possible for a manifest author to place ALL information required to process an update in the manifest.</t>

<t>For example: Information about which precursor image is required for a differential update MUST be placed in the manifest, not in the differential compression header.</t>

<t>Satisfies: [USER_STORY.MFST.PRE_CHECK(#user-story-mfst-pre-check), <xref target="user-story-install-instructions">USER_STORY.INSTALL.INSTRUCTIONS</xref></t>

<t>Implemented by: <xref target="manifest-element-additional-install-info">Additional installation instructions</xref></t>

</section>
<section anchor="req-use-mfst-override" title="REQ.USE.MFST.OVERRIDE_REMOTE: Override Remote Resource Location">

<t>It MUST be possible to redirect payload fetches. This applies where two manifests are used in conjunction. For example, a Device Operator creates a manifest specifying a payload and signs it, and provides a URI for that payload. A Network Operator creates a second manifest, with a dependency on the first. They use this second manifest to override the URIs provided by the Device Operator, directing them into their own infrastructure instead. Some devices may provide this capability, while others may only look at canonical sources of firmware. For this to be possible, the device must fetch the payload, whereas a device that accepts payload pushes will ignore this feature.</t>

<t>N.B. If a manifest is delivered over an authenticated channel and that manifest contains only override information for which the remote is authorised, then it can be considered authenticated by the channel authentication.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref></t>

<t>Implemented by: <xref target="manifest-element-aliases">Aliases</xref></t>

</section>
<section anchor="req-use-mfst-component" title="REQ.USE.MFST.COMPONENT: Component Updates">

<t>It MUST be possible express the requirement to install one or more payloads from one or more authorities so that a multi-payload update can be described. This allows multiple parties with different permissions to collaborate in creating a single update for the IoT device, across multiple components.</t>

<t>This requirement effectively means that it must be possible to construct a tree of manifests on a multi-image target.</t>

<t>In order to enable devices with a heterogeneous storage architecture, the manifest must enable specification of both storage system and the storage location within that storage system.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="user-story-component">USER_STORY.COMPONENT</xref></t>

<t>Implemented by Manifest Element: Dependencies, StorageIdentifier, ComponentIdentifier</t>

<section anchor="example-1-multiple-microcontrollers" title="Example 1: Multiple Microcontrollers">

<t>An IoT device with multiple microcontrollers in the same physical device (HeSA) will likely require multiple payloads with different component identifiers.</t>

</section>
<section anchor="example-2-code-and-configuration" title="Example 2: Code and Configuration">

<t>A firmware image can be divided into two payloads: code and configuration. These payloads may require authorizations from different actors in order to install (see <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref> and <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref>). This structure means that multiple manifests may be required, with a dependency structure between them.</t>

</section>
<section anchor="example-3-multiple-software-modules" title="Example 3: Multiple Software Modules">

<t>A firmware image can be divided into multiple functional blocks for separate testing and distribution. This means that code would need to be distributed in multiple payloads. For example, this might be desirable in order to ensure that common code between devices is identical in order to reduce distribution bandwidth.</t>

</section>
</section>
<section anchor="req-use-mfst-multi-auth" title="REQ.USE.MFST.MULTI_AUTH: Multiple authentications">

<t>It MUST be possible to authenticate a manifest multiple times so that authorisations from multiple parties with different permissions can be required in order to authorise installation of a manifest.</t>

<t>Satisfies: <xref target="user-story-multi-auth">USER_STORY.MULTI_AUTH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-use-img-format" title="REQ.USE.IMG.FORMAT: Format Usability">

<t>The manifest serialisation MUST accommodate any payload format that an Operator wishes to use. This enables the recipient to detect which format the Operator has chosen. Some examples of payload format are:</t>

<t><list style="symbols">
  <t>Binary</t>
  <t>Elf</t>
  <t>Differential</t>
  <t>Compressed</t>
  <t>Packed configuration</t>
  <t>Intel HEX</t>
  <t>S-Record</t>
</list></t>

<t>Satisfies: <xref target="user-story-img-format">USER_STORY.IMG.FORMAT</xref> <xref target="user-story-img-unknown-format">USER_STORY.IMG.UNKNOWN_FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref></t>

</section>
<section anchor="req-use-img-nested" title="REQ.USE.IMG.NESTED: Nested Formats">

<t>The manifest serialisation MUST accommodate nested formats, announcing to the target device all the nesting steps and any parameters used by those steps.</t>

<t>Satisfies: <xref target="user-story-img-confidentiality">USER_STORY.IMG.CONFIDENTIALITY</xref></t>

<t>Implemented by: <xref target="manifest-element-processing-steps">Processing Steps</xref></t>

</section>
<section anchor="req-use-img-versions" title="REQ.USE.IMG.VERSIONS: Target Version Matching">

<t>The manifest serialisation MUST provide a method to specify multiple version numbers of firmware to which the manifest applies, either with a list or with range matching.</t>

<t>Satisfies: <xref target="user-story-img-current-version">USER_STORY.IMG.CURRENT_VERSION</xref></t>

<t>Implemented by: <xref target="element-required-version">Required Image Version List</xref></t>

</section>
<section anchor="req-use-img-select" title="REQ.USE.IMG.SELECT: Select Image by Destination">

<t>The manifest serialisation MUST provide a mechanism to list multiple equivalent payloads by Execute-In-Place Installation Address, including the payload digest and, optionally, payload URIs.</t>

<t>Satisfies: <xref target="user-story-img-select">USER_STORY.IMG.SELECT</xref></t>

<t>Implemented by: <xref target="manifest-element-xip-address">XIP Address</xref></t>

</section>
<section anchor="req-use-exec" title="REQ.USE.EXEC: Executable Manifest">
<t>It MUST be possible to describe an executable system with a manifest on both Execute-In-Place microcontrollers and on complex operating systems. This requires the manifest to specify the digest of each statically linked dependency. In addition, the manifest serialisation MUST be able to express metadata, such as a kernel command-line, used by any loader or bootloader.</t>

<t>Satisfies: <xref target="user-story-exec-mfst">USER_STORY.EXEC.MFST</xref></t>

<t>Implemented by: <xref target="manifest-element-exec-metadata">Run-time metadata</xref></t>

</section>
<section anchor="req-use-load" title="REQ.USE.LOAD: Load-Time Information">

<t>It MUST be possible to specify additional metadata for load time processing of a payload, such as cryptographic information, load-address, and compression algorithm.</t>

<t>N.B. load comes before exec/boot.</t>

<t>Satisfies: <xref target="user-story-exec-decompress">USER_STORY.EXEC.DECOMPRESS</xref></t>

<t>Implemented by: <xref target="manifest-element-load-metadata">Load-time metadata</xref></t>

</section>
<section anchor="req-use-payload" title="REQ.USE.PAYLOAD: Payload in Manifest Superstructure">

<t>It MUST be possible to place a payload in the same structure as the manifest. This MAY place the payload in the same packet as the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-img">USER_STORY.MFST.IMG</xref></t>

<t>Implemented by: <xref target="manifest-element-payload">Payload</xref></t>

</section>
<section anchor="req-use-parse" title="REQ.USE.PARSE: Simple Parsing">

<t>The structure of the manifest MUST be simple to parse, without need for a general-purpose parser.</t>

<t>Satisfies: <xref target="user-story-mfst-parse">USER_STORY.MFST.PARSE</xref></t>

<t>Implemented by: N/A</t>

</section>
<section anchor="req-use-delegation" title="REQ.USE.DELEGATION: Delegation of Authority in Manifest">

<t>Any serialisation MUST enable the delivery of a key claim with, but not authenticated by a manifest. This key claim delivers a new key with which the recipient can verify the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-delegation">USER_STORY.MFST.DELEGATION</xref></t>

<t>Implemented by: <xref target="manifest-element-key-claims">Key Claims</xref></t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Security considerations for this document are covered in <xref target="design-motivation"/>.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank our working group chairs, Dave Thaler, Russ Housley and David Waltermire, for their review comments and their support.</t>

<t>We would like to thank the participants of the 2018 Berlin SUIT Hackathon and the June 2018 virtual design team meetings for their discussion input.
In particular, we would like to thank Koen Zandberg, Emmanuel Baccelli, Carsten Bormann, David Brown, Markus Gueller, Frank Audun Kvamtro, Oyvind Ronningstad, Michael Richardson, Jan-Frederik Rieckers, Francisco Acosta, Anton Gerasimov, Matthias Waehlisch, Max Groening, Daniel Petry, Gaetan Harter, Ralph Hamm, Steve Patrick, Fabio Utzig, Paul Lambert, Benjamin Kaduk, Said Gharout, and Milen Stoychev.</t>

<t>We would like to thank those who contributed to the development of this information model. In particular, we would like to thank Milosch Meriac, Jean-Luc Giraud, Dan Ros, Amyas Philips, Gary Thomson.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC5652" target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2009' month='September' />
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<date month='April' day='9' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.  This version of the document assumes asymmetric cryptography and a public key infrastructure.  Future versions may also describe a symmetric key approach for very constrained devices.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-05.txt' />
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="STRIDE" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx">
  <front>
    <title>The STRIDE Threat Model</title>
    <author >
      <organization>Microsoft</organization>
    </author>
    <date year="2018" month="May"/>
  </front>
  <format type="HTML" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx"/>
</reference>


    </references>


<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAHRsH10AA81963LbVprgfz0FNvkRO0vSsbt7J6OdmWpaomNNdBuRyqVT
UymQBEW0QYADgJIZl99ln2WfbL/rueGAkp3MzHZVV2QCOJfvfPfbGQ6HR23e
Ftlx8iavNw9pnSW322XaZk2yqurkrGyzuszapFols3Ve3jXJaXafL+DxMBmX
8Bze2qRtXpXJRbXMCvrqIi3zVda0zVE6n9fZ/XEytsPrw+63R8tqUaYbWMuy
TlftMM/a1bDZ5fCXfXW4wVeH3/zpaAGrvKvq/XHStMujo3xbHyfbOvvLn/7h
21m9a9pX33zzj9+8OoI50+Nkmi12dd7ujx6q+t1dXe228Nvt2ezoXbaHn5bH
ZqvDU5z86Khp03L5a1pUJSxonzVH2/z4KEnq1SJbNu2+kF+TpK0Wzp95uczK
Vn9oqrqts1Vj/r3feP9s63xhXl5Umw18a57mZZGXZhoAzibdbuEM+Jd0166r
GpY0hIf0v7yET1+PAJh1WuqPDNDXdVYu09J/VNV3cBa/EVjhiOpNcp5v8jZb
6gvZJs0L8/GIPv5rWm9GsNKjcOK3o2TWLNbVKivzO3/2t2lZAsZ0Hz91BWsa
YNSaAf56t3k/gsOKreJ1Xr9bV8VvwRqy8l3nkT//mzrdlThBnUwBM4IlwPej
uXz/1yZvRyvz+miZHR2VjKH3GWLJzZuTVy9f/qP8+eeXr17Jn3/5X3/RP799
yX+eDU9HFtXTerEGCCzaXQ0jGcTnYaezm7PTyTEtrU3ruwxwJ1m37bY5fvFi
0yzL0SZf1FVTrVo8oxdZOdw1L4p8Xqf1/kWWffvqT9/+w7fP7v950YxeffN8
lDbb9zwY84DZOpM54E+gm1YIE18x+KaQO04udDL6EbkG/Jbuk1ffvPyWfuLF
6zdvZxfnf8B6j4bDYZLOgXbSBSDAD7uizOp0nhd5mwOWPeTtOsa3np1Vs+fJ
UrjXOr3PkjrNm2yZtLDrMoM/kHelQLNFvkyA+JMGmUaWrJR17YgzJptsAQiZ
Nxv4EkCUN0laNFWCx5fOi4yGWVQlLhDod6lzjmBVi6reAhW1sCJ4f7GGaSKj
VjDl++Te39gAf5d3YfRVfrermXk2WYsDwhspbD8rCvxvulziJGX2kKx25QJf
TGGgPS63zpjVLGFx8z1vEx9l77dZ3Tajo6OrEifZbIH5lQREXmwHFLh3XM0C
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
AA==

-->

</rfc>

