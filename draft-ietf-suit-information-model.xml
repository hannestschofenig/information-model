<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-information-model-07" category="info">

  <front>
    <title abbrev="A Firmware Manifest Information Model">An Information Model for Firmware Updates in IoT Devices</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2020" month="October" day="28"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.</t>

<t>One component of such a firmware update is a concise and machine-processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The information model describes all the information elements required to secure firmware updates of IoT devices from the threats described in <xref target="threat-model"/> and enables the user stories captured in <xref target="user-stories"/>. These threats and user stories are not intended to be an exhaustive list of the threats against IoT devices, nor of the possible user stories that describe how to conduct a firmware update. Instead they are intended to describe the threats against firmware updates in isolation and provide sufficient motivation to specify the information elements that cover a wide range of user stories. The information model does not define the serialization, encoding, ordering, or structure of information elements, only their semantics.</t>

<t>Because the information model covers a wide range of user stories and a wide range of threats, not all information elements apply to all scenarios. As a result, various information elements could be considered optional to implement and optional to use, depending on which threats exist in a particular domain of application and which user stories are required. Elements marked as REQUIRED provide baseline security and usability properties that are expected to be required for most applications. Those elements are required to be implemented and used. Elements marked as RECOMMENDED provide important security or usability properties that are needed on most devices. Elements marked as OPTIONAL enable security or usability properties that are useful in some applications.</t>

<t>The definition of some of the information elements include examples that illustrate their semantics and how they are intended to be used.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>This document uses terms defined in <xref target="I-D.ietf-suit-architecture"/>.
The term ‘Operator’ refers to both Device and Network Operator.</t>

<t>This document treats devices with a homogeneous storage architecture as devices with a heterogeneous storage architecture, but with a single storage subsystem.</t>

<section anchor="requirements-notation" title="Requirements Notation">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="manifest-information-elements" title="Manifest Information Elements">

<t>Each manifest information element is anchored in a security requirement or a usability requirement. The manifest elements are described below, justified by their requirements.</t>

<section anchor="element-version-id" title="Manifest Element: Version ID of the manifest structure">

<t>An identifier that describes which iteration of the manifest format is contained in the structure.</t>

<t>This element is REQUIRED in order to allow devices to identify the version of the manifest data model that is in use.</t>

</section>
<section anchor="element-sequence-number" title="Manifest Element: Monotonic Sequence Number">

<t>A monotonically increasing sequence number. For convenience, the monotonic sequence number MAY be a UTC timestamp. This allows global synchronisation of sequence numbers without any additional management. This number MUST be easily accessible so that code choosing one out of several manifests can choose which is the latest.</t>

<t>This element is REQUIRED and is necessary to prevent malicious actors from reverting a firmware update against the policies of the relevant authority.</t>

<t>Implements: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="element-vendor-id" title="Manifest Element: Vendor ID">

<t>Vendor IDs must be unique. This is to prevent similarly, or identically named entities from different geographic regions from colliding in their customer’s infrastructure. Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with the vendor’s domain name and the DNS name space ID. Other options include type 1 and type 4 UUIDs.</t>

<t>Vendor ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of a Vendor ID is RECOMMENDED. It helps to distinguish between identically named products from different vendors.</t>

<t>Implements: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-domain-name-based-uuids" title="Example: Domain Name-based UUIDs">

<t>Vendor A creates a UUID based on their domain name:</t>

<t>vendorId = UUID5(DNS, “vendor-a.com”)</t>

<t>Because the DNS infrastructure prevents multiple registrations of the same domain name, this UUID is (with very high probability) guaranteed to be unique. Because the domain name is known, this UUID is reproducible. Type 1 and type 4 UUIDs produce similar guarantees of uniqueness, but not reproducibility.</t>

<t>This approach creates a contention when a vendor changes its name or relinquishes control of a domain name. In this scenario, it is possible that another vendor would start using that same domain name. However, this UUID is not proof of identity; a device’s trust in a vendor must be anchored in a cryptographic key, not a UUID.</t>

</section>
</section>
<section anchor="element-class-id" title="Manifest Element: Class ID">

<t>A device “Class” is a set of different device types that can accept the same firmware update without modification. Class IDs MUST be unique within the scope of a Vendor ID. This is to prevent similarly, or identically named devices colliding in their customer’s infrastructure.</t>

<t>Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with as much information as necessary to define firmware compatibility. Possible information used to derive the class UUID includes:</t>

<t><list style="symbols">
  <t>model name or number</t>
  <t>hardware revision</t>
  <t>runtime library version</t>
  <t>bootloader version</t>
  <t>ROM revision</t>
  <t>silicon batch number</t>
</list></t>

<t>The Class Identifier UUID SHOULD use the Vendor ID as the name space ID. Other options include version 1 and 4 UUIDs. Classes MAY be more granular than is required to identify firmware compatibility. Classes MUST NOT be less granular than is required to identify firmware compatibility. Devices MAY have multiple Class IDs.</t>

<t>Class ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of Class ID is RECOMMENDED. It allows devices to determine applicability of a firmware in an unambiguous way.</t>

<t>If Class ID is not implemented, then each logical device class MUST use a unique trust anchor for authorisation.</t>

<t>Implements: Security Requirement <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-1-different-classes" title="Example 1: Different Classes">

<t>Vendor A creates product Z and product Y. The firmware images of products Z and Y are not interchangeable. Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>ZclassId = UUID5(vendorId, “Product Z”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
</list></t>

<t>This ensures that Vendor A’s Product Z cannot install firmware for Product Y and Product Y cannot install firmware for Product Z.</t>

</section>
<section anchor="example-2-upgrading-class-id" title="Example 2: Upgrading Class ID">

<t>Vendor A creates product X. Later, Vendor A adds a new feature to product X, creating product X v2. Product X requires a firmware update to work with firmware intended for product X v2.</t>

<t>Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>Xv2classId = UUID5(vendorId, “Product X v2”)</t>
</list></t>

<t>When product X receives the firmware update necessary to be compatible with product X v2, part of the firmware update changes the class ID to Xv2classId.</t>

</section>
<section anchor="example-3-shared-functionality" title="Example 3: Shared Functionality">

<t>Vendor A produces two products, product X and product Y. These components share a common core (such as an operating system), but have different applications. The common core and the applications can be updated independently. To enable X and Y to receive the same common core update, they require the same class ID. To ensure that only product X receives application X and only product Y receives application Y, product X and product Y must have different class IDs. The vendor creates Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
  <t>CommonClassId = UUID5(vendorId, “common core”)</t>
</list></t>

<t>Product X matches against both XclassId and CommonClassId. Product Y matches against both YclassId and CommonClassId.</t>

</section>
<section anchor="example-4-white-labelling" title="Example 4: White-labelling">

<t>Vendor A creates a product A and its firmware. Vendor B sells the product under its own name as Product B with some customised configuration. The vendors create the Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorIdA = UUID5(DNS, “vendor-a.com”)</t>
  <t>classIdA = UUID5(vendorIdA, “Product A-Unlabelled”)</t>
  <t>vendorIdB = UUID5(DNS, “vendor-b.com”)</t>
  <t>classIdB = UUID5(vendorIdB, “Product B”)</t>
</list></t>

<t>The product will match against each of these class IDs. If Vendor A and Vendor B provide different components for the device, the implementor MAY choose to make ID matching scoped to each component. Then, the vendorIdA, classIdA match the component ID supplied by Vendor A, and the vendorIdB, classIdB match the component ID supplied by Vendor B.</t>

</section>
</section>
<section anchor="element-precursor-digest" title="Manifest Element: Precursor Image Digest Condition">

<t>When a precursor image is required by the payload format, a precursor image digest condition MUST be present in the conditions list. The precursor image may be installed or stored as a candidate.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Enables feature: differential updates.</t>

<t>Implements: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="element-required-version" title="Manifest Element: Required Image Version List">

<t>When a payload applies to multiple versions of a firmware, the required image version list specifies which versions must be present for the update to be applied. This allows the update author to target specific versions of firmware for an update, while excluding those to which it should not be applied.</t>

<t>Where an update can only be applied over specific predecessor versions, that version MUST be specified by the Required Image Version List.</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="manifest-element-expiration" title="Manifest Element: Expiration Time">

<t>This element tells a device the time at which the manifest expires and should no longer be used. This is only usable in conjunction with a secure source of time.</t>

<t>This element is OPTIONAL and may enable user stories where a secure source of time is provided and firmware is intended to expire predictably.</t>

<t>Implements: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="manifest-element-format" title="Manifest Element: Payload Format">

<t>The format of the payload MUST be indicated to devices in an unambiguous way. This element provides a mechanism to describe the payload format, within the signed metadata.</t>

<t>This element is REQUIRED and MUST be present to enable devices to decode payloads correctly.</t>

<t>Implements: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref>, <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="manifest-element-processing-steps" title="Manifest Element: Processing Steps">

<t>A representation of the Processing Steps required to decode a payload. The representation MUST describe which algorithm(s) is used and any additional parameters required by the algorithm(s). The representation MAY group Processing Steps together in predefined combinations.</t>

<t>A Processing Step MAY indicate the expected digest of the payload after the processing is complete.</t>

<t>Processing steps are RECOMMENDED to implement.</t>

<t>Enables feature: Encrypted, compressed, packed formats</t>

<t>Implements: <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref></t>

</section>
<section anchor="maniest-element-storage-location" title="Manifest Element: Storage Location">

<t>This element tells the device where to store a payload within a given component. The device can use this to establish which permissions are necessary and the physical storage location to use.</t>

<t>This element is REQUIRED and MUST be present to enable devices to store payloads to the correct location.</t>

<t>Implements: <xref target="req-sec-authentic-image-location">REQ.SEC.AUTH.IMG_LOC</xref></t>

<section anchor="example-1-two-storage-locations" title="Example 1: Two Storage Locations">

<t>A device supports two components: an OS and an application. These components can be updated independently, expressing dependencies to ensure compatibility between the components. The Author chooses two storage identifiers:</t>

<t><list style="symbols">
  <t>“OS”</t>
  <t>“APP”</t>
</list></t>

</section>
<section anchor="example-2-file-system" title="Example 2: File System">

<t>A device supports a full filesystem. The Author chooses to use the storage identifier as the path at which to install the payload. The payload may be a tarball, in which case, it unpacks the tarball into the specified path.</t>

</section>
<section anchor="example-3-flash-memory" title="Example 3: Flash Memory">

<t>A device supports flash memory. The Author chooses to make the storage identifier the offset where the image should be written.</t>

</section>
</section>
<section anchor="manifest-element-component-identifier" title="Manifest Element: Component Identifier">

<t>In a heterogeneous storage architecture, a storage identifier is insufficient to identify where and how to store a payload. To resolve this, a component identifier indicates which part of the storage architecture is targeted by the payload. In a homogeneous storage architecture, this element is unnecessary.</t>

<t>This element is OPTIONAL and only necessary in heterogeneous storage architecture devices.</t>

<t>N.B. A manifest format MAY choose to combine Component Identifier and <xref target="maniest-element-storage-location">Storage Location</xref></t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-resource-indicator" title="Manifest Element: Resource Indicator">

<t>This element provides the information required for the device to acquire the resource. This can be encoded in several ways:</t>

<t><list style="symbols">
  <t>One URI</t>
  <t>A list of URIs</t>
  <t>A prioritised list of URIs</t>
  <t>A list of signed URIs</t>
</list></t>

<t>This element is OPTIONAL and only needed when the target device does not intrinsically know where to find the payload.</t>

<t>N.B. Devices will typically require URIs.</t>

<t>Implements: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="manifest-element-payload-digest" title="Manifest Element: Payload Digests">

<t>This element contains one or more digests of one or more payloads. This allows the target device to ensure authenticity of the payload(s). A manifest format MUST provide a mechanism to select one payload from a list based on system parameters, such as Execute-In-Place Installation Address.</t>

<t>This element is REQUIRED to implement and fundamentally necessary to ensure the authenticity and integrity of the payload. Support for more than one digest is OPTIONAL to implement in a recipient device.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-size" title="Manifest Element: Size">

<t>The size of the payload in bytes.</t>

<t>Variable-size storage locations MUST be set to exactly the size listed in this element.</t>

<t>This element is REQUIRED and informs the target device how big of a payload to expect. Without it, devices are exposed to some classes of denial of service attack.</t>

<t>Implements: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="manifest-element-signature" title="Manifest Element: Signature">

<t>This is not strictly a manifest element. Instead, the manifest is wrapped by a standardised authentication container. The authentication container MUST support multiple signers and multiple signature algorithms.</t>

<t>This element is REQUIRED in non-dependency manifests and represents the foundation of all security properties of the manifest. Manifests which are included as dependencies by another manifest SHOULD include a signature so that the recipient can distinguish between different actors with different permissions.</t>

<t>A manifest MUST NOT be considered authenticated by channel security even if it contains only channel information (such as URIs). If the authenticated remote or channel were compromised, the threat actor could induce recipients to query traffic over any accessible network. Lightweight authentication with pre-existing relationships SHOULD be done with MAC.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref></t>

</section>
<section anchor="manifest-element-additional-install-info" title="Manifest Element: Additional installation instructions">

<t>Instructions that the device should execute when processing the manifest. This information is distinct from the information necessary to process a payload. Additional installation instructions include information such as update timing (for example, install only on Sunday, at 0200), procedural considerations (for example, shut down the equipment under control before executing the update), pre- and post-installation steps (for example, run a script).</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="manifest-element-aliases" title="Manifest Element: Aliases">

<t>A mechanism for a manifest to augment or replace URIs or URI lists defined by one or more of its dependencies.</t>

<t>This element is OPTIONAL and enables some user stories.</t>

<t>Implements: <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="manifest-element-dependencies" title="Manifest Element: Dependencies">

<t>A list of other manifests that are required by the current manifest. Manifests are identified an unambiguous way, such as a digest.</t>

<t>This element is REQUIRED to use in deployments that include both multiple authorities and multiple payloads.</t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-encryption-wrapper" title="Manifest Element: Encryption Wrapper">

<t>Encrypting firmware images requires symmetric content encryption keys. The encryption wrapper provides the information needed for a device to obtain or locate a key that it uses to decrypt the firmware. This MAY be included in a decryption step contained in <xref target="manifest-element-processing-steps">Processing Steps</xref>.</t>

<t>This element is REQUIRED to use for encrypted payloads,</t>

<t>Implements: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="manifest-element-xip-address" title="Manifest Element: XIP Address">

<t>In order to support XIP systems with multiple possible base addresses, it is necessary to specify which address the payload is linked for.</t>

<t>For example a microcontroller may have a simple bootloader that chooses one of two images to boot. That microcontroller then needs to choose one of two firmware images to install, based on which of its two images is older.</t>

<t>Implements: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-load-metadata" title="Manifest Element: Load-time metadata">

<t>Load-time metadata provides the device with information that it needs in order to load one or more images. This is effectively a copy operation from the permanent storage location of an image into the active use location of that image. The metadata contains the source and destination of the image as well as any operations that are performed on the image.</t>

<t>Implements: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="manifest-element-exec-metadata" title="Manifest Element: Run-time metadata">

<t>Run-time metadata provides the device with any extra information needed to boot the device. This may include information such as the entry-point of an XIP image or the kernel command-line of a Linux image.</t>

<t>Implements: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="manifest-element-payload" title="Manifest Element: Payload">

<t>The Payload element provides a recipient device with the whole payload, contained within the manifest superstructure. This enables the manifest and payload to be delivered simultaneously.</t>

<t>Implements: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="manifest-element-key-claims" title="Manifest Element: Key Claims">

<t>The Key Claims element is not authenticated by the <xref target="manifest-element-signature">Signature</xref>, instead, it provides a chain of key delegations (or references to them) for the device to follow in order to verify the key that authenticated the manifest using a trusted key.</t>

<t>Implements: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
</section>
<section anchor="design-motivation" title="Security Considerations">
<t>The following sub-sections describe the threat model, user stories, security requirements, and usability requirements. This section also provides the motivations for each of the manifest information elements.</t>

<section anchor="threat-model" title="Threat Model">

<t>The following sub-sections aim to provide information about the threats that were considered, the security requirements that are derived from those threats and the fields that permit implementation of the security requirements. This model uses the S.T.R.I.D.E. <xref target="STRIDE"/> approach. Each threat is classified according to:</t>

<t><list style="symbols">
  <t>Spoofing identity</t>
  <t>Tampering with data</t>
  <t>Repudiation</t>
  <t>Information disclosure</t>
  <t>Denial of service</t>
  <t>Elevation of privilege</t>
</list></t>

<t>This threat model only covers elements related to the transport of firmware updates. It explicitly does not cover threats outside of the transport of firmware updates. For example, threats to an IoT device due to physical access are out of scope.</t>

</section>
<section anchor="threat-descriptions" title="Threat Descriptions">

<section anchor="threat-expired" title="THREAT.IMG.EXPIRED: Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker sends an old, but valid manifest with an old, but valid firmware image to a device. If there is a known vulnerability in the provided firmware image, this may allow an attacker to exploit the vulnerability and gain control of the device.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="threat-expired-rollback" title="THREAT.IMG.EXPIRED.ROLLBACK : Offline device + Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker targets a device that has been offline for a long time and runs an old firmware version. The attacker sends an old, but valid manifest to a device with an old, but valid firmware image. The attacker-provided firmware is newer than the installed one but older than the most recently available firmware. If there is a known vulnerability in the provided firmware image then this may allow an attacker to gain control of a device. Because the device has been offline for a long time, it is unaware of any new updates. As such it will treat the old manifest as the most current.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="threat-incompatible" title="THREAT.IMG.INCOMPATIBLE: Mismatched Firmware">

<t>Classification: Denial of Service</t>

<t>An attacker sends a valid firmware image, for the wrong type of device, signed by an actor with firmware installation permission on both types of device. The firmware is verified by the device positively because it is signed by an actor with the appropriate permission. This could have wide-ranging consequences. For devices that are similar, it could cause minor breakage, or expose security vulnerabilities. For devices that are very different, it is likely to render devices inoperable.</t>

<t>Mitigated by: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref></t>

<section anchor="example" title="Example:">

<t>Suppose that two vendors, Vendor A and Vendor B, adopt the same trade name in different geographic regions, and they both make products with the same names, or product name matching is not used. This causes firmware from Vendor A to match devices from Vendor B.</t>

<t>If the vendors are the firmware authorities, then devices from Vendor A will reject images signed by Vendor B since they use different credentials. However, if both devices trust the same Author, then, devices from Vendor A could install firmware intended for devices from Vendor B.</t>

</section>
</section>
<section anchor="threat-img-format" title="THREAT.IMG.FORMAT: The target device misinterprets the type of payload">

<t>Classification: Denial of Service</t>

<t>If a device misinterprets the format of the firmware image, it may cause a device to install a firmware image incorrectly. An incorrectly installed firmware image would likely cause the device to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received firmware image may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref></t>

</section>
<section anchor="threat-img-location" title="THREAT.IMG.LOCATION: The target device installs the payload to the wrong location">

<t>Classification: Denial of Service</t>

<t>If a device installs a firmware image to the wrong location on the device, then it is likely to break. For example, a firmware image installed as an application could cause a device and/or an application to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received code may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_LOC</xref></t>

</section>
<section anchor="threat-net-redirect" title="THREAT.NET.REDIRECT: Redirection to inauthentic payload hosting">

<t>Classification: Denial of Service</t>

<t>If a device does not know where to obtain the payload for an update, it may be redirected to an attacker’s server. This would allow an attacker to provide broken payloads to devices.</t>

<t>Mitigated by: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="threat-net-mitm" title="THREAT.NET.MITM: Traffic interception">

<t>Classification: Spoofing Identity, Tampering with Data</t>

<t>An attacker intercepts all traffic to and from a device. The attacker can monitor or modify any data sent to or received from the device. This can take the form of: manifests, payloads, status reports, and capability reports being modified or not delivered to the intended recipient. It can also take the form of analysis of data sent to or from the device, either in content, size, or frequency.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref>, <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref>, <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref>, <xref target="req-sec-reporting">REQ.SEC.REPORTING</xref></t>

</section>
<section anchor="threat-image-replacement" title="THREAT.IMG.REPLACE: Payload Replacement">

<t>Classification: Elevation of Privilege</t>

<t>An attacker replaces a newly downloaded firmware after a device finishes verifying a manifest. This could cause the device to execute the attacker’s code. This attack likely requires physical access to the device. However, it is possible that this attack is carried out in combination with another threat that allows remote execution. This is a typical Time Of Check/Time Of Use threat.</t>

<t>Threat Escalation: If the attacker is able to exploit a known
vulnerability, or if the attacker can supply their own firmware, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="threat-img-unauthenticated" title="THREAT.IMG.NON_AUTH: Unauthenticated Images">

<t>Classification: Elevation of Privilege / All Types</t>

<t>If an attacker can install their firmware on a device, by manipulating either payload or metadata, then they have complete control of the device.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref></t>

</section>
<section anchor="threat-upd-wrong-precursor" title="THREAT.UPD.WRONG_PRECURSOR: Unexpected Precursor images">

<t>Classification: Denial of Service / All Types</t>

<t>An attacker sends a valid, current manifest to a device that has an unexpected precursor image. If a payload format requires a precursor image (for example, delta updates) and that precursor image is not available on the target device, it could cause the update to break.</t>

<t>An attacker that can cause a device to install a payload against the wrong precursor image could gain elevation of privilege and potentially expand this to all types of threat. However, it is unlikely that a valid differential update applied to an incorrect precursor would result in a functional, but vulnerable firmware.</t>

<t>Mitigated by: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="threat-upd-unapproved" title="THREAT.UPD.UNAPPROVED: Unapproved Firmware">

<t>Classification: Denial of Service, Elevation of Privilege</t>

<t>This threat can appear in several ways, however it is ultimately about ensuring that devices retain the behaviour required by their Owner, Device Operator, or Network Operator. The owner or operator of a device typically requires that the device maintain certain features, functions, capabilities, behaviours, or interoperability constraints (more generally, behaviour). If these requirements are broken, then a device will not fulfill its purpose. Therefore, if any party other than the device’s Owner or the Owner’s contracted Device Operator has the ability to modify device behaviour without approval, then this constitutes an elevation of privilege.</t>

<t>Similarly, a network operator may require that devices behave in a particular way in order to maintain the integrity of the network. If devices behaviour on a network can be modified without the approval of the network operator, then this constitutes an elevation of privilege with respect to the network.</t>

<t>For example, if the owner of a device has purchased that device because of Features A, B, and C, and a firmware update is issued by the manufacturer, which removes Feature A, then the device may not fulfill the owner’s requirements any more. In certain circumstances, this can cause significantly greater threats. Suppose that Feature A is used to implement a safety-critical system, whether the manufacturer intended this behaviour or not. When unapproved firmware is installed, the system may become unsafe.</t>

<t>In a second example, the owner or operator of a system of two or more interoperating devices needs to approve firmware for their system in order to ensure interoperability with other devices in the system. If the firmware is not qualified, the system as a whole may not work. Therefore, if a device installs firmware without the approval of the device owner or operator, this is a threat to devices or the system as a whole.</t>

<t>Similarly, the operator of a network may need to approve firmware for devices attached to the network in order to ensure favourable operating conditions within the network. If the firmware is not qualified, it may degrade the performance of the network. Therefore, if a device installs firmware without the approval of the network operator, this is a threat to the network itself.</t>

<t>Threat Escalation: If the firmware expects configuration that is present in devices deployed in Network A, but not in devices deployed in Network B, then the device may experience degraded security, leading to threats of All Types.</t>

<t>Mitigated by: <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

<section anchor="example-1-multiple-network-operators-with-a-single-device-operator" title="Example 1: Multiple Network Operators with a Single Device Operator">

<t>In this example, assume that Device Operators expect the rights to create firmware but that Network Operators expect the rights to qualify firmware as fit-for-purpose on their networks. Additionally, assume that Device Operators manage devices that can be deployed on any network, including Network A and B in our example.</t>

<t>An attacker may obtain a manifest for a device on Network A. Then, this attacker sends that manifest to a device on Network B. Because Network A and Network B are under control of different Operators, and the firmware for a device on Network A has not been qualified to be deployed on Network B, the target device on Network B is now in violation of the Operator B’s policy and may be disabled by this unqualified, but signed firmware.</t>

<t>This is a denial of service because it can render devices inoperable. This is an elevation of privilege because it allows the attacker to make installation decisions that should be made by the Operator.</t>

</section>
<section anchor="example-2-single-network-operator-with-multiple-device-operators" title="Example 2: Single Network Operator with Multiple Device Operators">

<t>Multiple devices that interoperate are used on the same network and communicate with each other. Some devices are manufactured and managed by Device Operator A and other devices by Device Operator B. A new firmware is released by Device Operator A that breaks compatibility with devices from Device Operator B. An attacker sends the new firmware to the devices managed by Device Operator A without approval of the Network Operator. This breaks the behaviour of the larger system causing denial of service and possibly other threats. Where the network is a distributed SCADA system, this could cause misbehaviour of the process that is under control.</t>

</section>
</section>
<section anchor="threat-img-disclosure" title="THREAT.IMG.DISCLOSURE: Reverse Engineering Of Firmware Image for Vulnerability Analysis">

<t>Classification: All Types</t>

<t>An attacker wants to mount an attack on an IoT device. To prepare the attack he or she retrieves the provided firmware image and performs reverse engineering of the firmware image to analyze it for specific vulnerabilities.</t>

<t>Mitigated by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-mfst-override" title="THREAT.MFST.OVERRIDE: Overriding Critical Manifest Elements">

<t>Classification: Elevation of Privilege</t>

<t>An authorised actor, but not the Author, uses an override mechanism (<xref target="user-story-override">USER_STORY.OVERRIDE</xref>) to change an information element in a manifest signed by the Author. For example, if the authorised actor overrides the digest and URI of the payload, the actor can replace the entire payload with a payload of their choice.</t>

<t>Threat Escalation: By overriding elements such as payload installation instructions or firmware digest, this threat can be escalated to all types.</t>

<t>Mitigated by: <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="threat-mfst-exposure" title="THREAT.MFST.EXPOSURE: Confidential Manifest Element Exposure">

<t>Classification: Information Disclosure</t>

<t>A third party may be able to extract sensitive information from the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-img-extra" title="THREAT.IMG.EXTRA: Extra data after image">

<t>Classification: All Types</t>

<t>If a third party modifies the image so that it contains extra code after a valid, authentic image, that third party can then use their own code in order to make better use of an existing vulnerability.</t>

<t>Mitigated by: <xref target="req-sec-img-complete-digest">REQ.SEC.IMG.COMPLETE_DIGEST</xref></t>

</section>
<section anchor="threat-key-exposure" title="THREAT.KEY.EXPOSURE: Exposure of signing keys">

<t>Classification: All Types</t>

<t>If a third party obtains a key or even indirect access to a key, for example in an HSM, then they can perform the same actions as the legitimate owner of the key. If the key is trusted for firmware update, then the third party can perform firmware updates as though they were the legitimate owner of the key.</t>

<t>For example, if manifest signing is performed on a server connected to the internet, an attacker may compromise the server and then be able to sign manifests, even if the keys for manifest signing are held in an HSM that is accessed by the server.</t>

<t>Mitigated by: <xref target="req-sec-key-protection">REQ.SEC.KEY.PROTECTION</xref></t>

</section>
<section anchor="threat-mfst-modification" title="THREAT.MFST.MODIFICATION: Modification of manifest or payload prior to signing">

<t>Classification: All Types</t>

<t>If an attacker can alter a manifest or payload before it is signed, they can perform all the same actions as the manifest author. This allows the attacker to deploy firmware updates to any devices that trust the manifest author. If an attacker can modify the code of a payload before the corresponding manifest is created, they can insert their own code. If an attacker can modify the manifest before it is signed, they can redirect the manifest to their own payload.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that watches manifest creation activities and inserts code into any binary that is referenced by a manifest.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that replaces the referenced binary (digest) and URI with the attacker’s binary (digest) and URI.</t>

<t>Mitigated by: <xref target="req-sec-mfst-check">REQ.SEC.MFST.CHECK</xref>, <xref target="req-sec-mfst-trusted">REQ.SEC.MFST.TRUSTED</xref></t>

</section>
<section anchor="threat-mfst-toctou" title="THREAT.MFST.TOCTOU: Modification of manifest between authentication and use">

<t>Classification: All Types</t>

<t>If an attacker can modify a manifest after it is authenticated (Time Of Check) but before it is used (Time Of Use), then the attacker can place any content whatsoever in the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-const">REQ.SEC.MFST.CONST</xref></t>

</section>
</section>
<section anchor="security-requirements" title="Security Requirements">

<t>The security requirements here are a set of policies that mitigate the threats described in <xref target="threat-model"/>.</t>

<section anchor="req-sec-sequence" title="REQ.SEC.SEQUENCE: Monotonic Sequence Numbers">

<t>Only an actor with firmware installation authority is permitted to decide when device firmware can be installed. To enforce this rule, manifests MUST contain monotonically increasing sequence numbers. Manifests MAY use UTC epoch timestamps to coordinate monotonically increasing sequence numbers across many actors in many locations. If UTC epoch timestamps are used, they MUST NOT be treated as times, they MUST be treated only as sequence numbers. Devices MUST reject manifests with sequence numbers smaller than any onboard sequence number.</t>

<t>Note: This is not a firmware version. It is a manifest sequence number. A firmware version may be rolled back by creating a new manifest for the old firmware version with a later sequence number.</t>

<t>Mitigates: <xref target="threat-expired">THREAT.IMG.EXPIRED</xref></t>

<t>Implemented by: <xref target="element-sequence-number">Monotonic Sequence Number</xref></t>

</section>
<section anchor="req-sec-compatible" title="REQ.SEC.COMPATIBLE: Vendor, Device-type Identifiers">

<t>Devices MUST only apply firmware that is intended for them. Devices MUST know with fine granularity that a given update applies to their vendor, model, hardware revision, software revision. Human-readable identifiers are often error-prone in this regard, so unique identifiers SHOULD be used.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented by: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-exp" title="REQ.SEC.EXP: Expiration Time">

<t>A firmware manifest MAY expire after a given time. Devices MAY provide a secure clock (local or remote). If a secure clock is provided and the Firmware manifest has an expiration timestamp, the device MUST reject the manifest if current time is later than the expiration time.</t>

<t>Mitigates: <xref target="threat-expired-rollback">THREAT.IMG.EXPIRED.ROLLBACK </xref></t>

<t>Implemented by: <xref target="manifest-element-expiration">Expiration Time</xref></t>

</section>
<section anchor="req-sec-authentic" title="REQ.SEC.AUTHENTIC: Cryptographic Authenticity">

<t>The authenticity of an update MUST be demonstrable. Typically, this means that updates must be digitally authenticated. Because the manifest contains information about how to install the update, the manifest’s authenticity MUST also be demonstrable. To reduce the overhead required for validation, the manifest contains the digest of the firmware image, rather than a second digital signature. The authenticity of the manifest can be verified with a digital signature or Message Authentication Code. The authenticity of the firmware image is tied to the manifest by the use of a digest of the firmware image.</t>

<t>Mitigates: <xref target="threat-img-unauthenticated">THREAT.IMG.NON_AUTH</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref>, <xref target="manifest-element-payload-digest">Payload Digest</xref></t>

</section>
<section anchor="req-sec-authentic-image-type" title="REQ.SEC.AUTH.IMG_TYPE: Authenticated Payload Type">

<t>The type of payload (which may be independent of format) MUST be authenticated. For example, the target must know whether the payload is XIP firmware, a loadable module, or configuration data.</t>

<t>Mitigates: <xref target="threat-img-format">THREAT.IMG.FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref>, <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authentic-image-location" title="Security Requirement REQ.SEC.AUTH.IMG_LOC: Authenticated Storage Location">

<t>The location on the target where the payload is to be stored MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-img-location">THREAT.IMG.LOCATION</xref></t>

<t>Implemented by: <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authenticated-remote-resource" title="REQ.SEC.AUTH.REMOTE_LOC: Authenticated Remote Resource Location">

<t>The location where a target should find a payload MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-net-redirect">THREAT.NET.REDIRECT</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-resource-indicator">Resource Indicator</xref></t>

</section>
<section anchor="req-sec-authentic-execution" title="REQ.SEC.AUTH.EXEC: Secure Execution">

<t>The target SHOULD verify firmware at time of boot. This requires authenticated payload size, and digest.</t>

<t>Mitigates: <xref target="threat-image-replacement">THREAT.IMG.REPLACE</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digest</xref>, <xref target="manifest-element-size">Size</xref></t>

</section>
<section anchor="req-sec-authentic-precursor" title="REQ.SEC.AUTH.PRECURSOR: Authenticated precursor images">

<t>If an update uses a differential compression method, it MUST specify the digest of the precursor image and that digest MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-upd-wrong-precursor">THREAT.UPD.WRONG_PRECURSOR</xref></t>

<t>Implemented by: <xref target="element-precursor-digest">Precursor Image Digest</xref></t>

</section>
<section anchor="req-sec-authentic-compatibility" title="REQ.SEC.AUTH.COMPATIBILITY: Authenticated Vendor and Class IDs">

<t>The identifiers that specify firmware compatibility MUST be authenticated to ensure that only compatible firmware is installed on a target device.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented By: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-rights" title="REQ.SEC.RIGHTS: Rights Require Authenticity">

<t>If a device grants different rights to different actors, exercising those rights MUST be accompanied by proof of those rights, in the form of proof of authenticity. Authenticity mechanisms such as those required in <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref> can be used to prove authenticity.</t>

<t>For example, if a device has a policy that requires that firmware have both an Authorship right and a Qualification right and if that device grants Authorship and Qualification rights to different parties, such as a Device Operator and a Network Operator, respectively, then the firmware cannot be installed without proof of rights from both the Device Operator and the Network Operator.</t>

<t>Mitigates: <xref target="threat-upd-unapproved">THREAT.UPD.UNAPPROVED</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-sec-image-confidentiality" title="REQ.SEC.IMG.CONFIDENTIALITY: Payload Encryption">

<t>The manifest information model MUST enable encrypted payloads. Encryption helps to prevent third parties, including attackers, from reading the content of the firmware image. This can protect against confidential information disclosures and discovery of vulnerabilities through reverse engineering. Therefore the manifest must convey the information required to allow an intended recipient to decrypt an encrypted payload.</t>

<t>Mitigates: <xref target="threat-img-disclosure">THREAT.IMG.DISCLOSURE</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-encryption-wrapper">Encryption Wrapper</xref></t>

</section>
<section anchor="req-sec-access-control" title="REQ.SEC.ACCESS_CONTROL: Access Control">

<t>If a device grants different rights to different actors, then an exercise of those rights MUST be validated against a list of rights for the actor. This typically takes the form of an Access Control List (ACL). ACLs are applied to two scenarios:</t>

<t><list style="numbers">
  <t>An ACL decides which elements of the manifest may be overridden and by which actors.</t>
  <t>An ACL decides which component identifier/storage identifier pairs can be written by which actors.</t>
</list></t>

<t>Mitigates: <xref target="threat-mfst-override">THREAT.MFST.OVERRIDE</xref>, <xref target="threat-upd-unapproved">THREAT.UPD.UNAPPROVED</xref></t>

<t>Implemented by: Client-side code, not specified in manifest.</t>

</section>
<section anchor="req-sec-mfst-confidentiality" title="REQ.SEC.MFST.CONFIDENTIALITY: Encrypted Manifests">

<t>It MUST be possible to encrypt part or all of the manifest. This may be accomplished with either transport encryption or with at-rest encryption.</t>

<t>Mitigates: <xref target="threat-mfst-exposure">THREAT.MFST.EXPOSURE</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: External Encryption Wrapper / Transport Security</t>

</section>
<section anchor="req-sec-img-complete-digest" title="REQ.SEC.IMG.COMPLETE_DIGEST: Whole Image Digest">

<t>The digest SHOULD cover all available space in a fixed-size storage location. Variable-size storage locations MUST be restricted to exactly the size of deployed payload. This prevents any data from being distributed without being covered by the digest. For example, XIP microcontrollers typically have fixed-size storage. These devices should deploy a digest that covers the deployed firmware image, concatenated with the default erased value of any remaining space.</t>

<t>Mitigates: <xref target="threat-img-extra">THREAT.IMG.EXTRA</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digests</xref></t>

</section>
<section anchor="req-sec-reporting" title="REQ.SEC.REPORTING: Secure Reporting">

<t>Status reports from the device to any remote system SHOULD be performed over an authenticated, confidential channel in order to prevent modification or spoofing of the reports.</t>

<t>Mitigates: <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

</section>
<section anchor="req-sec-key-protection" title="REQ.SEC.KEY.PROTECTION: Protected storage of signing keys">

<t>Cryptographic keys for signing/authenticating manifests SHOULD be stored in a manner that is inaccessible to networked devices, for example in an HSM, or an air-gapped computer. This protects against an attacker obtaining the keys.</t>

<t>Keys SHOULD be stored in a way that limits the risk of a legitimate, but compromised, entity (such as a server or developer computer) issuing signing requests.</t>

<t>Mitigates: <xref target="threat-key-exposure">THREAT.KEY.EXPOSURE</xref></t>

</section>
<section anchor="req-sec-mfst-check" title="REQ.SEC.MFST.CHECK: Validate manifests prior to deployment">

<t>Manifests SHOULD be parsed and examined prior to deployment to validate that their contents have not been modified during creation and signing.</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
<section anchor="req-sec-mfst-trusted" title="REQ.SEC.MFST.TRUSTED: Construct manifests in a trusted environment">

<t>For high risk deployments, such as large numbers of devices or critical function devices, manifests SHOULD be constructed in an environment that is protected from interference, such as an air-gapped computer. Note that a networked computer connected to an HSM does not fulfill this requirement (see <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref>).</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
<section anchor="req-sec-mfst-const" title="REQ.SEC.MFST.CONST: Manifest kept immutable between check and use">

<t>Both the manifest and any data extracted from it MUST be held immutable between its authenticity verification (time of check) and its use (time of use). To make this guarantee, the manifest MUST fit within an internal memory or a secure memory, such as encrypted memory. The recipient SHOULD defend the manifest from tampering by code or hardware resident in the recipient, for example other processes or debuggers.</t>

<t>If an application requires that the manifest is verified before storing it, then this means the manifest MUST fit in RAM.</t>

<t>Mitigates: <xref target="threat-mfst-toctou">THREAT.MFST.TOCTOU</xref></t>

</section>
</section>
<section anchor="user-stories" title="User Stories">

<t>User stories provide expected use cases. These are used to feed into usability requirements.</t>

<section anchor="user-story-install-instructions" title="USER_STORY.INSTALL.INSTRUCTIONS: Installation Instructions">

<t>As a Device Operator, I want to provide my devices with additional installation instructions so that I can keep process details out of my payload data.</t>

<t>Some installation instructions might be:</t>

<t><list style="symbols">
  <t>Use a table of hashes to ensure that each block of the payload is validate before writing.</t>
  <t>Do not report progress.</t>
  <t>Pre-cache the update, but do not install.</t>
  <t>Install the pre-cached update matching this manifest.</t>
  <t>Install this update immediately, overriding any long-running tasks.</t>
</list></t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-fail-early" title="USER_STORY.MFST.FAIL_EARLY: Fail Early">

<t>As a designer of a resource-constrained IoT device, I want bad updates to fail as early as possible to preserve battery life and limit consumed bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-override" title="USER_STORY.OVERRIDE: Override Non-Critical Manifest Elements">

<t>As a Device Operator, I would like to be able to override the non-critical information in the manifest so that I can control my devices more precisely. The authority to override this information is provided via the installation of a limited trust anchor by another authority.</t>

<t>Some examples of potentially overridable information:</t>

<t><list style="symbols">
  <t><xref target="manifest-element-resource-indicator">URIs</xref>: this allows the Device Operator to direct devices to their own infrastructure in order to reduce network load.</t>
  <t>Conditions: this allows the Device Operator to pose additional constraints on the installation of the manifest.</t>
  <t><xref target="manifest-element-additional-install-info">Directives</xref>: this allows the Device Operator to add more instructions such as time of installation.</t>
  <t><xref target="manifest-element-processing-steps">Processing Steps</xref>: If an intermediary performs an action on behalf of a device, it may need to override the processing steps. It is still possible for a device to verify the final content and the result of any processing step that specifies a digest. Some processing steps should be non-overridable.</t>
</list></t>

<t>Satisfied by: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-component" title="USER_STORY.COMPONENT: Component Update">

<t>As a Device Operator, I want to divide my firmware into components, so that I can reduce the size of updates, make different parties responsible for different components, and divide my firmware into frequently updated and infrequently updated components.</t>

<t>Satisfied by: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-multi-auth" title="USER_STORY.MULTI_AUTH: Multiple Authorisations">

<t>As a Device Operator, I want to ensure the quality of a firmware update before installing it, so that I can ensure interoperability of all devices in my product family. I want to restrict the ability to make changes to my devices to require my express approval.</t>

<t>Satisfied by: <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="user-story-img-format" title="USER_STORY.IMG.FORMAT: Multiple Payload Formats">

<t>As a Device Operator, I want to be able to send multiple payload formats to suit the needs of my update, so that I can optimise the bandwidth used by my devices.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="user-story-img-confidentiality" title="USER_STORY.IMG.CONFIDENTIALITY: Prevent Confidential Information Disclosures">

<t>As a firmware author, I want to prevent confidential information from being disclosed during firmware updates. It is assumed that channel security or at-rest encryption is adequate to protect the manifest itself against information disclosure.</t>

<t>Satisfied by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="user-story-img-unknown-format" title="USER_STORY.IMG.UNKNOWN_FORMAT: Prevent Devices from Unpacking Unknown Formats">

<t>As a Device Operator, I want devices to determine whether they can process a payload prior to downloading it.</t>

<t>In some cases, it may be desirable for a third party to perform some processing on behalf of a target. For this to occur, the third party MUST indicate what processing occurred and how to verify it against the Trust Provisioning Authority’s intent.</t>

<t>This amounts to overriding <xref target="manifest-element-processing-steps">Processing Steps</xref> and <xref target="manifest-element-resource-indicator">Resource Indicator</xref>.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref>, <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref>, <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="user-story-img-current-version" title="USER_STORY.IMG.CURRENT_VERSION: Specify Version Numbers of Target Firmware">

<t>As a Device Operator, I want to be able to target devices for updates based on their current firmware version, so that I can control which versions are replaced with a single manifest.</t>

<t>Satisfied by: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="user-story-img-select" title="USER_STORY.IMG.SELECT: Enable Devices to Choose Between Images">

<t>As a developer, I want to be able to sign two or more versions of my firmware in a single manifest so that I can use a very simple bootloader that chooses between two or more images that are executed in-place.</t>

<t>Satisfied by: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="user-story-exec-mfst" title="USER_STORY.EXEC.MFST: Secure Execution Using Manifests">

<t>As a signer for both secure execution/boot and firmware deployment, I would like to use the same signed document for both tasks so that my data size is smaller, I can share common code, and I can reduce signature verifications.</t>

<t>Satisfied by: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="user-story-exec-decompress" title="USER_STORY.EXEC.DECOMPRESS: Decompress on Load">

<t>As a developer of firmware for a run-from-RAM device, I would like to use compressed images and to indicate to the bootloader that I am using a compressed image in the manifest so that it can be used with secure execution/boot.</t>

<t>Satisfied by: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="user-story-mfst-img" title="USER_STORY.MFST.IMG: Payload in Manifest">

<t>As an operator of devices on a constrained network, I would like the manifest to be able to include a small payload in the same packet so that I can reduce network traffic.</t>

<t>Small payloads may include, for example, wrapped encryption keys, configuration information, public keys, authorization tokens, or X.509 certificates.</t>

<t>Satisfied by: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="user-story-mfst-parse" title="USER_STORY.MFST.PARSE: Simple Parsing">

<t>As a developer for constrained devices, I want a low complexity library for processing updates so that I can fit more application code on my device.</t>

<t>Satisfied by: <xref target="req-use-parse">REQ.USE.PARSE</xref></t>

</section>
<section anchor="user-story-mfst-delegation" title="USER_STORY.MFST.DELEGATION: Delegated Authority in Manifest">

<t>As a Device Operator that rotates delegated authority more often than delivering firmware updates, I would like to delegate a new authority when I deliver a firmware update so that I can accomplish both tasks in a single transmission.</t>

<t>Satisfied by: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
<section anchor="user-story-mfst-pre-check" title="USER_STORY.MFST.PRE_CHECK: Update Evaluation">

<t>As an operator of a constrained network, I would like devices on my network to be able to evaluate the suitability of an update prior to initiating any large download so that I can prevent unnecessary consumption of bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
</section>
<section anchor="usability-requirements" title="Usability Requirements">

<t>The following usability requirements satisfy the user stories listed above.</t>

<section anchor="req-use-mfst-pre-check" title="REQ.USE.MFST.PRE_CHECK: Pre-Installation Checks">

<t>It MUST be possible for a manifest author to place ALL information required to process an update in the manifest.</t>

<t>For example: Information about which precursor image is required for a differential update MUST be placed in the manifest, not in the differential compression header.</t>

<t>Satisfies: [USER_STORY.MFST.PRE_CHECK(#user-story-mfst-pre-check), <xref target="user-story-install-instructions">USER_STORY.INSTALL.INSTRUCTIONS</xref></t>

<t>Implemented by: <xref target="manifest-element-additional-install-info">Additional installation instructions</xref></t>

</section>
<section anchor="req-use-mfst-override" title="REQ.USE.MFST.OVERRIDE_REMOTE: Override Remote Resource Location">

<t>It MUST be possible to redirect payload fetches. This applies where two manifests are used in conjunction. For example, a Device Operator creates a manifest specifying a payload and signs it, and provides a URI for that payload. A Network Operator creates a second manifest, with a dependency on the first. They use this second manifest to override the URIs provided by the Device Operator, directing them into their own infrastructure instead. Some devices may provide this capability, while others may only look at canonical sources of firmware. For this to be possible, the device must fetch the payload, whereas a device that accepts payload pushes will ignore this feature.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref></t>

<t>Implemented by: <xref target="manifest-element-aliases">Aliases</xref></t>

</section>
<section anchor="req-use-mfst-component" title="REQ.USE.MFST.COMPONENT: Component Updates">

<t>It MUST be possible to express the requirement to install one or more payloads from one or more authorities so that a multi-payload update can be described. This allows multiple parties with different permissions to collaborate in creating a single update for the IoT device, across multiple components.</t>

<t>This requirement effectively means that it must be possible to construct a tree of manifests on a multi-image target.</t>

<t>In order to enable devices with a heterogeneous storage architecture, the manifest must enable specification of both storage system and the storage location within that storage system.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="user-story-component">USER_STORY.COMPONENT</xref></t>

<t>Implemented by Manifest Element: Dependencies, StorageIdentifier, ComponentIdentifier</t>

<section anchor="example-1-multiple-microcontrollers" title="Example 1: Multiple Microcontrollers">

<t>An IoT device with multiple microcontrollers in the same physical device (HeSA) will likely require multiple payloads with different component identifiers.</t>

</section>
<section anchor="example-2-code-and-configuration" title="Example 2: Code and Configuration">

<t>A firmware image can be divided into two payloads: code and configuration. These payloads may require authorizations from different actors in order to install (see <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref> and <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref>). This structure means that multiple manifests may be required, with a dependency structure between them.</t>

</section>
<section anchor="example-3-multiple-software-modules" title="Example 3: Multiple Software Modules">

<t>A firmware image can be divided into multiple functional blocks for separate testing and distribution. This means that code would need to be distributed in multiple payloads. For example, this might be desirable in order to ensure that common code between devices is identical in order to reduce distribution bandwidth.</t>

</section>
</section>
<section anchor="req-use-mfst-multi-auth" title="REQ.USE.MFST.MULTI_AUTH: Multiple authentications">

<t>It MUST be possible to authenticate a manifest multiple times so that authorisations from multiple parties with different permissions can be required in order to authorise installation of a manifest.</t>

<t>Satisfies: <xref target="user-story-multi-auth">USER_STORY.MULTI_AUTH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-use-img-format" title="REQ.USE.IMG.FORMAT: Format Usability">

<t>The manifest format MUST accommodate any payload format that an Operator wishes to use. This enables the recipient to detect which format the Operator has chosen. Some examples of payload format are:</t>

<t><list style="symbols">
  <t>Binary</t>
  <t>Executable and Linkable Format (ELF)</t>
  <t>Differential</t>
  <t>Compressed</t>
  <t>Packed configuration</t>
  <t>Intel HEX</t>
  <t>Motorola S-Record</t>
</list></t>

<t>Satisfies: <xref target="user-story-img-format">USER_STORY.IMG.FORMAT</xref> <xref target="user-story-img-unknown-format">USER_STORY.IMG.UNKNOWN_FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref></t>

</section>
<section anchor="req-use-img-nested" title="REQ.USE.IMG.NESTED: Nested Formats">

<t>The manifest format MUST accommodate nested formats, announcing to the target device all the nesting steps and any parameters used by those steps.</t>

<t>Satisfies: <xref target="user-story-img-confidentiality">USER_STORY.IMG.CONFIDENTIALITY</xref></t>

<t>Implemented by: <xref target="manifest-element-processing-steps">Processing Steps</xref></t>

</section>
<section anchor="req-use-img-versions" title="REQ.USE.IMG.VERSIONS: Target Version Matching">

<t>The manifest format MUST provide a method to specify multiple version numbers of firmware to which the manifest applies, either with a list or with range matching.</t>

<t>Satisfies: <xref target="user-story-img-current-version">USER_STORY.IMG.CURRENT_VERSION</xref></t>

<t>Implemented by: <xref target="element-required-version">Required Image Version List</xref></t>

</section>
<section anchor="req-use-img-select" title="REQ.USE.IMG.SELECT: Select Image by Destination">

<t>The manifest format MUST provide a mechanism to list multiple equivalent payloads by Execute-In-Place Installation Address, including the payload digest and, optionally, payload URIs.</t>

<t>Satisfies: <xref target="user-story-img-select">USER_STORY.IMG.SELECT</xref></t>

<t>Implemented by: <xref target="manifest-element-xip-address">XIP Address</xref></t>

</section>
<section anchor="req-use-exec" title="REQ.USE.EXEC: Executable Manifest">

<t>It MUST be possible to describe an executable system with a manifest on both Execute-In-Place microcontrollers and on complex operating systems. This requires the manifest to specify the digest of each statically linked dependency. In addition, the manifest format MUST be able to express metadata, such as a kernel command-line, used by any loader or bootloader.</t>

<t>Satisfies: <xref target="user-story-exec-mfst">USER_STORY.EXEC.MFST</xref></t>

<t>Implemented by: <xref target="manifest-element-exec-metadata">Run-time metadata</xref></t>

</section>
<section anchor="req-use-load" title="REQ.USE.LOAD: Load-Time Information">

<t>It MUST be possible to specify additional metadata for load time processing of a payload, such as cryptographic information, load-address, and compression algorithm.</t>

<t>N.B. load comes before exec/boot.</t>

<t>Satisfies: <xref target="user-story-exec-decompress">USER_STORY.EXEC.DECOMPRESS</xref></t>

<t>Implemented by: <xref target="manifest-element-load-metadata">Load-time metadata</xref></t>

</section>
<section anchor="req-use-payload" title="REQ.USE.PAYLOAD: Payload in Manifest Superstructure">

<t>It MUST be possible to place a payload in the same structure as the manifest. This MAY place the payload in the same packet as the manifest.</t>

<t>Integrated payloads may include, for example, wrapped encryption keys, configuration information, public keys, authorization tokens, or X.509 certificates.</t>

<t>When an integrated payload is provided, this increases the size of the manifest. Manifest size can cause several processing and storage concerns that require careful consideration. The payload can prevent the whole manifest from being contained in a single network packet, which can cause fragmentation and the loss of portions of the manifest in lossy networks. This causes the need for reassembly and retransmission logic. The manifest MUST be held immutable between verification and processing (see <xref target="req-sec-mfst-const">REQ.SEC.MFST.CONST</xref>), so a larger manifest will consume more memory with immutability guarantees, for example internal RAM or NVRAM, or external secure memory. If the manifest exceeds the available immutable memory, then it MUST be processed modularly, evaluating each of: delegation chains, the security container, and the actual manifest, which includes verifying the integrated payload. If the security model calls for downloading the manifest and validating it before storing to NVRAM in order to prevent wear to NVRAM and energy expenditure in NVRAM, then either increasing memory allocated to manifest storage or modular processing of the received manifest may be required. While the manifest has been organised to enable this type of processing, it creates additional complexity in the parser. If the manifest is stored in NVRAM prior to processing, the integrated payload may cause the manifest to exceed the available storage. Because the manifest is received prior to validation of applicability, authority, or correctness, integrated payloads cause the recipient to expend network bandwidth and energy that may not be required if the manifest is discarded and these costs vary with the size of the integrated payload.</t>

<t>See also: <xref target="req-sec-mfst-const">REQ.SEC.MFST.CONST</xref>.</t>

<t>Satisfies: <xref target="user-story-mfst-img">USER_STORY.MFST.IMG</xref></t>

<t>Implemented by: <xref target="manifest-element-payload">Payload</xref></t>

</section>
<section anchor="req-use-parse" title="REQ.USE.PARSE: Simple Parsing">

<t>The structure of the manifest MUST be simple to parse, without need for a general-purpose parser.</t>

<t>Satisfies: <xref target="user-story-mfst-parse">USER_STORY.MFST.PARSE</xref></t>

<t>Implemented by: N/A</t>

</section>
<section anchor="req-use-delegation" title="REQ.USE.DELEGATION: Delegation of Authority in Manifest">

<t>Any manifest format MUST enable the delivery of a key claim with, but not authenticated by, a manifest. This key claim delivers a new key with which the recipient can verify the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-delegation">USER_STORY.MFST.DELEGATION</xref></t>

<t>Implemented by: <xref target="manifest-element-key-claims">Key Claims</xref></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank our working group chairs, Dave Thaler, Russ Housley and David Waltermire, for their review comments and their support.</t>

<t>We would like to thank the participants of the 2018 Berlin SUIT Hackathon and the June 2018 virtual design team meetings for their discussion input.
In particular, we would like to thank Koen Zandberg, Emmanuel Baccelli, Carsten Bormann, David Brown, Markus Gueller, Frank Audun Kvamtro, Oyvind Ronningstad, Michael Richardson, Jan-Frederik Rieckers, Francisco Acosta, Anton Gerasimov, Matthias Waehlisch, Max Groening, Daniel Petry, Gaetan Harter, Ralph Hamm, Steve Patrick, Fabio Utzig, Paul Lambert, Benjamin Kaduk, Said Gharout, and Milen Stoychev.</t>

<t>We would like to thank those who contributed to the development of this information model. In particular, we would like to thank Milosch Meriac, Jean-Luc Giraud, Dan Ros, Amyas Philips, and Gary Thomson.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='October' day='21' year='2020' />

<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints.  Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities but it also enables other important capabilities such as updating configuration settings as well as adding new functionality.  In addition to the definition of terminology and an architecture this document motivates the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-14.txt' />
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="STRIDE" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx">
  <front>
    <title>The STRIDE Threat Model</title>
    <author >
      <organization>Microsoft</organization>
    </author>
    <date year="2018" month="May"/>
  </front>
  <format type="HTML" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAM4dmV8AA8192XLjRpbou74C135wqS9JL90T06MbEzEsSeXSWNto8dId
Ew6IBCV0kQAbAKWiK/wv91vul92zZp5MJChV2T0zHeEuigRyOXny7Mt4PN7r
ym5ZHGTTKjupFnWzyruyrrKzel4sM/g7e1M2q6e8KbLb9TzvijYr4cn6Jjsq
HstZ0e7ld3dN8QgD+CfP8qpcFG3XH3FvXs+qfAXzzZt80Y3LoluM200Jn/yj
4xU+Ov7qn/dmMOF93WwPMvx5b69cNwdZ12za7puvvvqXr77Zg9nyg+y6mG2a
stvuPdXNu/um3qzhu9uTm713xRa+mh/AQrqiqYpufITT7u21XV7Nf86XdQVL
2cIu1uXBXpY1i1kxb7vtUr7Nsq6emY9lNS+qTr9o66ZrikXr/t6ugj+7ppy5
h2f1agXvul/LallWbhoAyypfr8vqnr/JN91D3cCSxvAj/a+s4NXXEwBjk1f6
JYPydVNU87wKf6qbeziFXwigcDjNKjstV2VXzPWBYpWXS/fyhF7+t7xZTWCl
e/HEbyfZTTt7qBdFVd6Hs7/Nqwqwov/zS1fwQANMOjfAv92v3k/gsFKreF02
7x7q5S/RGorqXe+ncP43Tb6pcIImuwbMiJYA70/u5P1/a8tusnCPT+bF3l7F
uPlYIJZcvTn85uuv/0U+/unrb77Bjyfjo4lH57yZPcBeZ92mgXcccvMA1zdX
J0fHB7SILm/uC8CS7KHr1u3Bl1+u2nk1WZWzpm7rRYen8WVRjTftl8vyrsmb
7ZdF8edv/vjnf/7zq8d/nbWTb77an+Tt+j0Pxnf55qGQOeAj3JBOLh8+4jBL
YXSQnelk9CVecvgu32bffPX1n+krXry+8/bm7PR3WO/eeDzO8ju4JfkMjvr7
zbIqmvyuXJZdCfj0VHYP7tpm9QJ2ArejzV4B7dnP5kx8AHcei6zJy7aYZx3s
uirgA1KtHG7nspxncM2zFslDkS2UPG2IkGWrYgaoV7YreBNAVLZZvmzrDI8v
v1sWNMysrnCBcFPnOuckO65aIDfVPb+nS1lsqhkROpyyQcSqdOb6EbAOllc2
8E2Dj2dLIJDw1N83ZQPvtpvZA7yXWFkNy36fPYbAGeH38iyscFHebxomsm3R
dQimUZYDCIvlEv/N53NcbVU8uUXmMNB2srd3UeEIqzXQwYqgzCvpwQqBg1PN
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

-->

</rfc>

