<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-information-model-08" category="info">

  <front>
    <title abbrev="A Firmware Manifest Information Model">An Information Model for Firmware Updates in IoT Devices</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2020" month="October" day="28"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality</t>

<t>One component of such a firmware update is a concise and machine-processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The information model describes all the information elements required to secure firmware updates of IoT devices from the threats described in <xref target="threat-model"/> and enables the user stories captured in <xref target="user-stories"/>. These threats and user stories are not intended to be an exhaustive list of the threats against IoT devices, nor of the possible user stories that describe how to conduct a firmware update. Instead they are intended to describe the threats against firmware updates in isolation and provide sufficient motivation to specify the information elements that cover a wide range of user stories. The information model does not define the serialization, encoding, ordering, or structure of information elements, only their semantics.</t>

<t>Because the information model covers a wide range of user stories and a wide range of threats, not all information elements apply to all scenarios. As a result, various information elements could be considered optional to implement and optional to use, depending on which threats exist in a particular domain of application and which user stories are required. Elements marked as REQUIRED provide baseline security and usability properties that are expected to be required for most applications. Those elements are required to be implemented and used. Elements marked as RECOMMENDED provide important security or usability properties that are needed on most devices. Elements marked as OPTIONAL enable security or usability properties that are useful in some applications.</t>

<t>The definition of some of the information elements include examples that illustrate their semantics and how they are intended to be used.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>This document uses terms defined in <xref target="I-D.ietf-suit-architecture"/>.
The term ‘Operator’ refers to both Device and Network Operator.</t>

<t>Secure time and secure clock refer to a set of requirements on time sources. For local time sources, this primarily means that the clock must be monotonically increasing, including across power cycles, firmware updates, etc. For remote time sources, the provided time must be guaranteed to be correct to within some predetermined bounds, whenever the time source is accessible.</t>

<t>The term Envelope is used to describe an encoding that allows the bundling of a manifest with related information elements that are not directly contained within the manifest.</t>

<t>The term Payload is used to describe the data that is delivered to a device during an update. This is distinct from a “firmware image” as described in <xref target="I-D.ietf-suit-architecture"/> because the payload is often in an intermediate state, such as being encrypted, compressed and/or encoded as a differential update. The payload, taken in isolation, is often not the final firmware image.</t>

<section anchor="requirements-notation" title="Requirements Notation">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="manifest-information-elements" title="Manifest Information Elements">

<t>Each manifest information element is anchored in a security requirement or a usability requirement. The manifest elements are described below, justified by their requirements.</t>

<section anchor="element-version-id" title="Manifest Element: Version ID of the manifest structure">

<t>An identifier that describes which iteration of the manifest format is contained in the structure.</t>

<t>This element is REQUIRED in order to allow devices to identify the version of the manifest data model that is in use.</t>

</section>
<section anchor="element-sequence-number" title="Manifest Element: Monotonic Sequence Number">

<t>A monotonically increasing sequence number. For convenience, the monotonic sequence number MAY be a UTC timestamp. This allows global synchronisation of sequence numbers without any additional management. This number MUST be possible to extract with a simple, minimal parser so that code choosing one out of several manifests can choose which is the latest without fully parsing a complex structure.</t>

<t>This element is REQUIRED and is necessary to prevent malicious actors from reverting a firmware update against the policies of the relevant authority.</t>

<t>Implements: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="element-vendor-id" title="Manifest Element: Vendor ID">

<t>Vendor IDs must be unique. This is to prevent similarly, or identically named entities from different geographic regions from colliding in their customer’s infrastructure. Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with the vendor’s domain name and the DNS name space ID. Other options include type 1 and type 4 UUIDs.</t>

<t>Vendor ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of a Vendor ID is RECOMMENDED. It helps to distinguish between identically named products from different vendors.</t>

<t>Implements: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-domain-name-based-uuids" title="Example: Domain Name-based UUIDs">

<t>Vendor A creates a UUID based on their domain name:</t>

<t>vendorId = UUID5(DNS, “vendor-a.com”)</t>

<t>Because the DNS infrastructure prevents multiple registrations of the same domain name, this UUID is (with very high probability) guaranteed to be unique. Because the domain name is known, this UUID is reproducible. Type 1 and type 4 UUIDs produce similar guarantees of uniqueness, but not reproducibility.</t>

<t>This approach creates a contention when a vendor changes its name or relinquishes control of a domain name. In this scenario, it is possible that another vendor would start using that same domain name. However, this UUID is not proof of identity; a device’s trust in a vendor must be anchored in a cryptographic key, not a UUID.</t>

</section>
</section>
<section anchor="element-class-id" title="Manifest Element: Class ID">

<t>A device “Class” is a set of different device types that can accept the same firmware update without modification. Class IDs MUST be unique within the scope of a Vendor ID. This is to prevent similarly, or identically named devices colliding in their customer’s infrastructure.</t>

<t>Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with as much information as necessary to define firmware compatibility. Possible information used to derive the class UUID includes:</t>

<t><list style="symbols">
  <t>model name or number</t>
  <t>hardware revision</t>
  <t>runtime library version</t>
  <t>bootloader version</t>
  <t>ROM revision</t>
  <t>silicon batch number</t>
</list></t>

<t>The Class Identifier UUID SHOULD use the Vendor ID as the name space ID. Other options include version 1 and 4 UUIDs. Classes MAY be more granular than is required to identify firmware compatibility. Classes MUST NOT be less granular than is required to identify firmware compatibility. Devices MAY have multiple Class IDs.</t>

<t>Class ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of Class ID is RECOMMENDED. It allows devices to determine applicability of a firmware in an unambiguous way.</t>

<t>If Class ID is not implemented, then each logical device class MUST use a unique trust anchor for authorization.</t>

<t>Implements: Security Requirement <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-1-different-classes" title="Example 1: Different Classes">

<t>Vendor A creates product Z and product Y. The firmware images of products Z and Y are not interchangeable. Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>ZclassId = UUID5(vendorId, “Product Z”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
</list></t>

<t>This ensures that Vendor A’s Product Z cannot install firmware for Product Y and Product Y cannot install firmware for Product Z.</t>

</section>
<section anchor="example-2-upgrading-class-id" title="Example 2: Upgrading Class ID">

<t>Vendor A creates product X. Later, Vendor A adds a new feature to product X, creating product X v2. Product X requires a firmware update to work with firmware intended for product X v2.</t>

<t>Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>Xv2classId = UUID5(vendorId, “Product X v2”)</t>
</list></t>

<t>When product X receives the firmware update necessary to be compatible with product X v2, part of the firmware update changes the class ID to Xv2classId.</t>

</section>
<section anchor="example-3-shared-functionality" title="Example 3: Shared Functionality">

<t>Vendor A produces two products, product X and product Y. These components share a common core (such as an operating system), but have different applications. The common core and the applications can be updated independently. To enable X and Y to receive the same common core update, they require the same class ID. To ensure that only product X receives application X and only product Y receives application Y, product X and product Y must have different class IDs. The vendor creates Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
  <t>CommonClassId = UUID5(vendorId, “common core”)</t>
</list></t>

<t>Product X matches against both XclassId and CommonClassId. Product Y matches against both YclassId and CommonClassId.</t>

</section>
<section anchor="example-4-white-labelling" title="Example 4: White-labelling">

<t>Vendor A creates a product A and its firmware. Vendor B sells the product under its own name as Product B with some customised configuration. The vendors create the Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorIdA = UUID5(DNS, “vendor-a.com”)</t>
  <t>classIdA = UUID5(vendorIdA, “Product A-Unlabelled”)</t>
  <t>vendorIdB = UUID5(DNS, “vendor-b.com”)</t>
  <t>classIdB = UUID5(vendorIdB, “Product B”)</t>
</list></t>

<t>The product will match against each of these class IDs. If Vendor A and Vendor B provide different components for the device, the implementor MAY choose to make ID matching scoped to each component. Then, the vendorIdA, classIdA match the component ID supplied by Vendor A, and the vendorIdB, classIdB match the component ID supplied by Vendor B.</t>

</section>
</section>
<section anchor="element-precursor-digest" title="Manifest Element: Precursor Image Digest Condition">

<t>When a precursor image is required by the payload format (for example, differential updates), a precursor image digest condition MUST be present. The precursor image MAY be installed or stored as a candidate.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Implements: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="element-required-version" title="Manifest Element: Required Image Version List">

<t>When a payload applies to multiple versions of a firmware, the required image version list specifies which versions must be present for the update to be applied. This allows the update author to target specific versions of firmware for an update, while excluding those to which it should not be applied.</t>

<t>Where an update can only be applied over specific predecessor versions, that version MUST be specified by the Required Image Version List.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Implements: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="manifest-element-expiration" title="Manifest Element: Expiration Time">

<t>This element tells a device the time at which the manifest expires and should no longer be used. This element SHOULD be used where a secure source of time is provided and firmware is intended to expire predictably. This element may also be displayed (e.g. via an app) for user confirmation since users typically have a reliable knowledge of the date.</t>

<t>Special consideration is required for end-of-life: if a firmware will not be updated again, for example if a business stops issuing updates to a device. The last valid firmware should not have an expiration time.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Implements: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="manifest-element-format" title="Manifest Element: Payload Format">

<t>The format of the payload MUST be indicated to devices in an unambiguous way. This element provides a mechanism to describe the payload format, within the signed metadata.</t>

<t>This element is REQUIRED and MUST be present to enable devices to decode payloads correctly.</t>

<t>Implements: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref>, <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="manifest-element-processing-steps" title="Manifest Element: Processing Steps">

<t>A representation of the Processing Steps required to decode a payload, in particular those that are compressed, packed, or encrypted. The representation MUST describe which algorithm(s) is used and any additional parameters required by the algorithm(s). The representation MAY group Processing Steps together in predefined combinations.</t>

<t>A Processing Step MAY indicate the expected digest of the payload after the processing is complete.</t>

<t>Processing steps are RECOMMENDED to implement.</t>

<t>Implements: <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref></t>

</section>
<section anchor="maniest-element-storage-location" title="Manifest Element: Storage Location">

<t>This element tells the device where to store a payload within a given component. The device can use this to establish which permissions are necessary and the physical storage location to use.</t>

<t>This element is REQUIRED and MUST be present to enable devices to store payloads to the correct location.</t>

<t>Implements: <xref target="req-sec-authentic-image-location">REQ.SEC.AUTH.IMG_LOC</xref></t>

<section anchor="example-1-two-storage-locations" title="Example 1: Two Storage Locations">

<t>A device supports two components: an OS and an application. These components can be updated independently, expressing dependencies to ensure compatibility between the components. The Author chooses two storage identifiers:</t>

<t><list style="symbols">
  <t>“OS”</t>
  <t>“APP”</t>
</list></t>

</section>
<section anchor="example-2-file-system" title="Example 2: File System">

<t>A device supports a full filesystem. The Author chooses to use the storage identifier as the path at which to install the payload. The payload may be a tarball, in which case, it unpacks the tarball into the specified path.</t>

</section>
<section anchor="example-3-flash-memory" title="Example 3: Flash Memory">

<t>A device supports flash memory. The Author chooses to make the storage identifier the offset where the image should be written.</t>

</section>
</section>
<section anchor="manifest-element-component-identifier" title="Manifest Element: Component Identifier">

<t>In a device with more than one storage subsystem, a storage identifier is insufficient to identify where and how to store a payload. To resolve this, a component identifier indicates which part of the storage architecture is targeted by the payload.</t>

<t>This element is OPTIONAL and only necessary in devices with multiple storage subsystems.</t>

<t>N.B. A serialization MAY choose to combine Component Identifier and <xref target="maniest-element-storage-location">Storage Location</xref></t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-resource-indicator" title="Manifest Element: Resource Indicator">

<t>This element provides the information required for the device to acquire the resource. This can be encoded in several ways:</t>

<t><list style="symbols">
  <t>One URI</t>
  <t>A list of URIs</t>
  <t>A prioritised list of URIs</t>
  <t>A list of signed URIs</t>
</list></t>

<t>This element is OPTIONAL and only needed when the target device does not intrinsically know where to find the payload.</t>

<t>N.B. Devices will typically require URIs.</t>

<t>Implements: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="manifest-element-payload-digest" title="Manifest Element: Payload Digests">

<t>This element contains one or more digests of one or more payloads. This allows the target device to ensure authenticity of the payload(s). A manifest format MUST provide a mechanism to select one payload from a list based on system parameters, such as Execute-In-Place Installation Address.</t>

<t>This element is REQUIRED to implement and fundamentally necessary to ensure the authenticity and integrity of the payload. Support for more than one digest is OPTIONAL to implement in a recipient device.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-size" title="Manifest Element: Size">

<t>The size of the payload in bytes.</t>

<t>Variable-size storage locations MUST be set to exactly the size listed in this element.</t>

<t>This element is REQUIRED and informs the target device how big of a payload to expect. Without it, devices are exposed to some classes of denial of service attack.</t>

<t>Implements: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="manifest-element-signature" title="Manifest Envelope Element: Signature">

<t>The Signature element MUST contain all the information necessary to cryptographically verify the contents of the manifest against a root of trust. Because the Signature element authenticates the manifest, it cannot be contained within the manifest. Instead, the manifest is either contained within the signature element, or the signature element is a member of the Manifest Envelope and bundled with the manifest.</t>

<t>This element MAY be provided either by the manifest envelope serialization or by another serialization of authentication objects, such as a COSE (<xref target="RFC8152"/>) or CMS (<xref target="RFC5652"/>) signature object. The Signature element MUST support multiple actors and multiple authentication methods. It is NOT REQUIRED for a serialization to authenticate multiple manifests with a single Signature element.</t>

<t>This element is REQUIRED in non-dependency manifests and represents the foundation of all security properties of the manifest. Manifests which are included as dependencies by another manifest SHOULD include a signature so that the recipient can distinguish between different actors with different permissions.</t>

<t>A manifest MUST NOT be considered authenticated by channel security even if it contains only channel information (such as URIs). If the authenticated remote or channel were compromised, the threat actor could induce recipients to execute queries over any accessible network. Where public key operations require too many resources, the recommended authentication mechanism is MAC with a per-device pre-shared key.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref></t>

</section>
<section anchor="manifest-element-additional-install-info" title="Manifest Element: Additional installation instructions">

<t>Instructions that the device should execute when processing the manifest. This information is distinct from the information necessary to process a payload. Additional installation instructions include information such as update timing (for example, install only on Sunday, at 0200), procedural considerations (for example, shut down the equipment under control before executing the update), pre- and post-installation steps (for example, run a script). Other installation instructions could include requesting user confirmation before installing.</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="manifest-element-aliases" title="Manifest Element: Aliases">

<t>A mechanism for a manifest to augment or replace URIs or URI lists defined by one or more of its dependencies.</t>

<t>This element is OPTIONAL and enables some user stories.</t>

<t>Implements: <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="manifest-element-dependencies" title="Manifest Element: Dependencies">

<t>A list of other manifests that are required by the current manifest. Manifests are identified an unambiguous way, such as a digest.</t>

<t>This element is REQUIRED to use in deployments that include both multiple authorities and multiple payloads.</t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-encryption-wrapper" title="Manifest Element: Encryption Wrapper">

<t>Encrypting firmware images requires symmetric content encryption keys. The encryption wrapper provides the information needed for a device to obtain or locate a key that it uses to decrypt the firmware. This MAY be included in a decryption step contained in <xref target="manifest-element-processing-steps">Processing Steps</xref>.</t>

<t>This element is REQUIRED to use for encrypted payloads,</t>

<t>Implements: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="manifest-element-xip-address" title="Manifest Element: XIP Address">

<t>In order to support XIP systems with multiple possible base addresses, it is necessary to specify which address the payload is linked for.</t>

<t>For example a microcontroller may have a simple bootloader that chooses one of two images to boot. That microcontroller then needs to choose one of two firmware images to install, based on which of its two images is older.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Implements: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-load-metadata" title="Manifest Element: Load-time metadata">

<t>Load-time metadata provides the device with information that it needs in order to load one or more images. This metadata MAY include any of:</t>

<t><list style="symbols">
  <t>the source</t>
  <t>the destination</t>
  <t>the destination address</t>
  <t>cryptographic information</t>
  <t>decompression information</t>
  <t>unpacking information</t>
</list></t>

<t>Typically, loading is done by copying an image from its permanent storage location into its active use location. The metadata allows operations such as decryption, decompression, and unpacking to be performed during that copy.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Implements: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="manifest-element-exec-metadata" title="Manifest Element: Run-time metadata">

<t>Run-time metadata provides the device with any extra information needed to boot the device. This may include information such as the entry-point of an XIP image or the kernel command-line of a Linux image.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Implements: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="manifest-element-payload" title="Manifest Element: Payload">

<t>The Payload element is contained within the manifest or manifest envelope. This enables the manifest and payload to be delivered simultaneously. Typically this is used for delivering small payloads such as cryptographic keys, or configuration data.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Implements: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="manifest-element-key-claims" title="Manifest Envelope Element: Key Claims">

<t>The <xref target="manifest-element-signature">Signature</xref> is NOT REQUIRED to cover the Key Claims element. The Key Claims element provides a chain of key delegations (or references to them) for the device to follow in order to verify the key that authenticated the manifest using a trusted key. Because this element is needed to verify the signature, it must be placed in the Manifest Envelope, rather than the Manifest.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Implements: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
</section>
<section anchor="design-motivation" title="Security Considerations">
<t>The following sub-sections describe the threat model, user stories, security requirements, and usability requirements. This section also provides the motivations for each of the manifest information elements.</t>

<section anchor="threat-model" title="Threat Model">

<t>The following sub-sections aim to provide information about the threats that were considered, the security requirements that are derived from those threats and the fields that permit implementation of the security requirements. This model uses the S.T.R.I.D.E. <xref target="STRIDE"/> approach. Each threat is classified according to:</t>

<t><list style="symbols">
  <t>Spoofing identity</t>
  <t>Tampering with data</t>
  <t>Repudiation</t>
  <t>Information disclosure</t>
  <t>Denial of service</t>
  <t>Elevation of privilege</t>
</list></t>

<t>This threat model only covers elements related to the transport of firmware updates. It explicitly does not cover threats outside of the transport of firmware updates. For example, threats to an IoT device due to physical access are out of scope.</t>

</section>
<section anchor="threat-descriptions" title="Threat Descriptions">

<section anchor="threat-expired" title="THREAT.IMG.EXPIRED: Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker sends an old, but valid manifest with an old, but valid firmware image to a device. If there is a known vulnerability in the provided firmware image, this may allow an attacker to exploit the vulnerability and gain control of the device.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="threat-expired-offline" title="THREAT.IMG.EXPIRED.OFFLINE : Offline device + Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker targets a device that has been offline for a long time and runs an old firmware version. The attacker sends an old, but valid manifest to a device with an old, but valid firmware image. The attacker-provided firmware is newer than the installed one but older than the most recently available firmware. If there is a known vulnerability in the provided firmware image then this may allow an attacker to gain control of a device. Because the device has been offline for a long time, it is unaware of any new updates. As such it will treat the old manifest as the most current.</t>

<t>The exact mitigation for this threat depends on where the threat comes from. This requires careful consideration by the implementor. If the threat is from a network actor, including an on-path attacker, or an intruder into a management system, then a user confirmation can mitigate this attack, simply by displaying an expiration date and requesting confirmation. On the other hand, if the user is the attacker, then an online confirmation system (for example a trusted timestamp server) can be used as a mitigation system.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-exp">REQ.SEC.EXP</xref>, <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref>,</t>

</section>
<section anchor="threat-incompatible" title="THREAT.IMG.INCOMPATIBLE: Mismatched Firmware">

<t>Classification: Denial of Service</t>

<t>An attacker sends a valid firmware image, for the wrong type of device, signed by an actor with firmware installation permission on both types of device. The firmware is verified by the device positively because it is signed by an actor with the appropriate permission. This could have wide-ranging consequences. For devices that are similar, it could cause minor breakage, or expose security vulnerabilities. For devices that are very different, it is likely to render devices inoperable.</t>

<t>Mitigated by: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref></t>

<section anchor="example" title="Example:">

<t>Suppose that two vendors, Vendor A and Vendor B, adopt the same trade name in different geographic regions, and they both make products with the same names, or product name matching is not used. This causes firmware from Vendor A to match devices from Vendor B.</t>

<t>If the vendors are the firmware authorities, then devices from Vendor A will reject images signed by Vendor B since they use different credentials. However, if both devices trust the same Author, then, devices from Vendor A could install firmware intended for devices from Vendor B.</t>

</section>
</section>
<section anchor="threat-img-format" title="THREAT.IMG.FORMAT: The target device misinterprets the type of payload">

<t>Classification: Denial of Service</t>

<t>If a device misinterprets the format of the firmware image, it may cause a device to install a firmware image incorrectly. An incorrectly installed firmware image would likely cause the device to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received firmware image may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref></t>

</section>
<section anchor="threat-img-location" title="THREAT.IMG.LOCATION: The target device installs the payload to the wrong location">

<t>Classification: Denial of Service</t>

<t>If a device installs a firmware image to the wrong location on the device, then it is likely to break. For example, a firmware image installed as an application could cause a device and/or an application to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received code may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-location">REQ.SEC.AUTH.IMG_LOC</xref></t>

</section>
<section anchor="threat-net-redirect" title="THREAT.NET.REDIRECT: Redirection to inauthentic payload hosting">

<t>Classification: Denial of Service</t>

<t>If a device does not know where to obtain the payload for an update, it may be redirected to an attacker’s server. This would allow an attacker to provide broken payloads to devices.</t>

<t>Mitigated by: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="threat-net-onpath" title="THREAT.NET.ONPATH: Traffic interception">

<t>Classification: Spoofing Identity, Tampering with Data</t>

<t>An attacker intercepts all traffic to and from a device. The attacker can monitor or modify any data sent to or received from the device. This can take the form of: manifests, payloads, status reports, and capability reports being modified or not delivered to the intended recipient. It can also take the form of analysis of data sent to or from the device, either in content, size, or frequency.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref>, <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref>, <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref>, <xref target="req-sec-reporting">REQ.SEC.REPORTING</xref></t>

</section>
<section anchor="threat-image-replacement" title="THREAT.IMG.REPLACE: Payload Replacement">

<t>Classification: Elevation of Privilege</t>

<t>An attacker replaces a newly downloaded firmware after a device finishes verifying a manifest. This could cause the device to execute the attacker’s code. This attack likely requires physical access to the device. However, it is possible that this attack is carried out in combination with another threat that allows remote execution. This is a typical Time Of Check/Time Of Use threat.</t>

<t>Threat Escalation: If the attacker is able to exploit a known
vulnerability, or if the attacker can supply their own firmware, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="threat-img-unauthenticated" title="THREAT.IMG.NON_AUTH: Unauthenticated Images">

<t>Classification: Elevation of Privilege / All Types</t>

<t>If an attacker can install their firmware on a device, by manipulating either payload or metadata, then they have complete control of the device.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref></t>

</section>
<section anchor="threat-upd-wrong-precursor" title="THREAT.UPD.WRONG_PRECURSOR: Unexpected Precursor images">

<t>Classification: Denial of Service / All Types</t>

<t>An attacker sends a valid, current manifest to a device that has an unexpected precursor image. If a payload format requires a precursor image (for example, delta updates) and that precursor image is not available on the target device, it could cause the update to break.</t>

<t>An attacker that can cause a device to install a payload against the wrong precursor image could gain elevation of privilege and potentially expand this to all types of threat. However, it is unlikely that a valid differential update applied to an incorrect precursor would result in a functional, but vulnerable firmware.</t>

<t>Mitigated by: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="threat-upd-unapproved" title="THREAT.UPD.UNAPPROVED: Unapproved Firmware">

<t>Classification: Denial of Service, Elevation of Privilege</t>

<t>This threat can appear in several ways, however it is ultimately about ensuring that devices retain the behaviour required by their Owner, Device Operator, or Network Operator. The owner or operator of a device typically requires that the device maintain certain features, functions, capabilities, behaviours, or interoperability constraints (more generally, behaviour). If these requirements are broken, then a device will not fulfill its purpose. Therefore, if any party other than the device’s Owner or the Owner’s contracted Device Operator has the ability to modify device behaviour without approval, then this constitutes an elevation of privilege.</t>

<t>Similarly, a network operator may require that devices behave in a particular way in order to maintain the integrity of the network. If devices behaviour on a network can be modified without the approval of the network operator, then this constitutes an elevation of privilege with respect to the network.</t>

<t>For example, if the owner of a device has purchased that device because of Features A, B, and C, and a firmware update is issued by the manufacturer, which removes Feature A, then the device may not fulfill the owner’s requirements any more. In certain circumstances, this can cause significantly greater threats. Suppose that Feature A is used to implement a safety-critical system, whether the manufacturer intended this behaviour or not. When unapproved firmware is installed, the system may become unsafe.</t>

<t>In a second example, the owner or operator of a system of two or more interoperating devices needs to approve firmware for their system in order to ensure interoperability with other devices in the system. If the firmware is not qualified, the system as a whole may not work. Therefore, if a device installs firmware without the approval of the device owner or operator, this is a threat to devices or the system as a whole.</t>

<t>Similarly, the operator of a network may need to approve firmware for devices attached to the network in order to ensure favourable operating conditions within the network. If the firmware is not qualified, it may degrade the performance of the network. Therefore, if a device installs firmware without the approval of the network operator, this is a threat to the network itself.</t>

<t>Threat Escalation: If the firmware expects configuration that is present in devices deployed in Network A, but not in devices deployed in Network B, then the device may experience degraded security, leading to threats of All Types.</t>

<t>Mitigated by: <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

<section anchor="example-1-multiple-network-operators-with-a-single-device-operator" title="Example 1: Multiple Network Operators with a Single Device Operator">

<t>In this example, assume that Device Operators expect the rights to create firmware but that Network Operators expect the rights to qualify firmware as fit-for-purpose on their networks. Additionally, assume that Device Operators manage devices that can be deployed on any network, including Network A and B in our example.</t>

<t>An attacker may obtain a manifest for a device on Network A. Then, this attacker sends that manifest to a device on Network B. Because Network A and Network B are under control of different Operators, and the firmware for a device on Network A has not been qualified to be deployed on Network B, the target device on Network B is now in violation of the Operator B’s policy and may be disabled by this unqualified, but signed firmware.</t>

<t>This is a denial of service because it can render devices inoperable. This is an elevation of privilege because it allows the attacker to make installation decisions that should be made by the Operator.</t>

</section>
<section anchor="example-2-single-network-operator-with-multiple-device-operators" title="Example 2: Single Network Operator with Multiple Device Operators">

<t>Multiple devices that interoperate are used on the same network and communicate with each other. Some devices are manufactured and managed by Device Operator A and other devices by Device Operator B. A new firmware is released by Device Operator A that breaks compatibility with devices from Device Operator B. An attacker sends the new firmware to the devices managed by Device Operator A without approval of the Network Operator. This breaks the behaviour of the larger system causing denial of service and possibly other threats. Where the network is a distributed SCADA system, this could cause misbehaviour of the process that is under control.</t>

</section>
</section>
<section anchor="threat-img-disclosure" title="THREAT.IMG.DISCLOSURE: Reverse Engineering Of Firmware Image for Vulnerability Analysis">

<t>Classification: All Types</t>

<t>An attacker wants to mount an attack on an IoT device. To prepare the attack he or she retrieves the provided firmware image and performs reverse engineering of the firmware image to analyze it for specific vulnerabilities.</t>

<t>Mitigated by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-mfst-override" title="THREAT.MFST.OVERRIDE: Overriding Critical Manifest Elements">

<t>Classification: Elevation of Privilege</t>

<t>An authorized actor, but not the Author, uses an override mechanism (<xref target="user-story-override">USER_STORY.OVERRIDE</xref>) to change an information element in a manifest signed by the Author. For example, if the authorized actor overrides the digest and URI of the payload, the actor can replace the entire payload with a payload of their choice.</t>

<t>Threat Escalation: By overriding elements such as payload installation instructions or firmware digest, this threat can be escalated to all types.</t>

<t>Mitigated by: <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="threat-mfst-exposure" title="THREAT.MFST.EXPOSURE: Confidential Manifest Element Exposure">

<t>Classification: Information Disclosure</t>

<t>A third party may be able to extract sensitive information from the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-img-extra" title="THREAT.IMG.EXTRA: Extra data after image">

<t>Classification: All Types</t>

<t>If a third party modifies the image so that it contains extra code after a valid, authentic image, that third party can then use their own code in order to make better use of an existing vulnerability.</t>

<t>Mitigated by: <xref target="req-sec-img-complete-digest">REQ.SEC.IMG.COMPLETE_DIGEST</xref></t>

</section>
<section anchor="threat-key-exposure" title="THREAT.KEY.EXPOSURE: Exposure of signing keys">

<t>Classification: All Types</t>

<t>If a third party obtains a key or even indirect access to a key, for example in an HSM, then they can perform the same actions as the legitimate owner of the key. If the key is trusted for firmware update, then the third party can perform firmware updates as though they were the legitimate owner of the key.</t>

<t>For example, if manifest signing is performed on a server connected to the internet, an attacker may compromise the server and then be able to sign manifests, even if the keys for manifest signing are held in an HSM that is accessed by the server.</t>

<t>Mitigated by: <xref target="req-sec-key-protection">REQ.SEC.KEY.PROTECTION</xref></t>

</section>
<section anchor="threat-mfst-modification" title="THREAT.MFST.MODIFICATION: Modification of manifest or payload prior to signing">

<t>Classification: All Types</t>

<t>If an attacker can alter a manifest or payload before it is signed, they can perform all the same actions as the manifest author. This allows the attacker to deploy firmware updates to any devices that trust the manifest author. If an attacker can modify the code of a payload before the corresponding manifest is created, they can insert their own code. If an attacker can modify the manifest before it is signed, they can redirect the manifest to their own payload.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that watches manifest creation activities and inserts code into any binary that is referenced by a manifest.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that replaces the referenced binary (digest) and URI with the attacker’s binary (digest) and URI.</t>

<t>Mitigated by: <xref target="req-sec-mfst-check">REQ.SEC.MFST.CHECK</xref>, <xref target="req-sec-mfst-trusted">REQ.SEC.MFST.TRUSTED</xref></t>

</section>
<section anchor="threat-mfst-toctou" title="THREAT.MFST.TOCTOU: Modification of manifest between authentication and use">

<t>Classification: All Types</t>

<t>If an attacker can modify a manifest after it is authenticated (Time Of Check) but before it is used (Time Of Use), then the attacker can place any content whatsoever in the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-const">REQ.SEC.MFST.CONST</xref></t>

</section>
</section>
<section anchor="security-requirements" title="Security Requirements">

<t>The security requirements here are a set of policies that mitigate the threats described in <xref target="threat-model"/>.</t>

<section anchor="req-sec-sequence" title="REQ.SEC.SEQUENCE: Monotonic Sequence Numbers">

<t>Only an actor with firmware installation authority is permitted to decide when device firmware can be installed. To enforce this rule, manifests MUST contain monotonically increasing sequence numbers. Manifests MAY use UTC epoch timestamps to coordinate monotonically increasing sequence numbers across many actors in many locations. If UTC epoch timestamps are used, they MUST NOT be treated as times, they MUST be treated only as sequence numbers. Devices MUST reject manifests with sequence numbers smaller than any onboard sequence number.</t>

<t>Note: This is not a firmware version. It is a manifest sequence number. A firmware version may be rolled back by creating a new manifest for the old firmware version with a later sequence number.</t>

<t>Mitigates: <xref target="threat-expired">THREAT.IMG.EXPIRED</xref></t>

<t>Implemented by: <xref target="element-sequence-number">Monotonic Sequence Number</xref></t>

</section>
<section anchor="req-sec-compatible" title="REQ.SEC.COMPATIBLE: Vendor, Device-type Identifiers">

<t>Devices MUST only apply firmware that is intended for them. Devices MUST know with fine granularity that a given update applies to their vendor, model, hardware revision, software revision. Human-readable identifiers are often error-prone in this regard, so unique identifiers SHOULD be used.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented by: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-exp" title="REQ.SEC.EXP: Expiration Time">

<t>A firmware manifest MAY expire after a given time. Devices MAY provide a secure clock (local or remote). If a secure clock is provided and the Firmware manifest has an expiration timestamp, the device MUST reject the manifest if current time is later than the expiration time.</t>

<t>Special consideration is required for end-of-life: if a firmware will not be updated again, for example if a business stops issuing updates to a device. The last valid firmware should not have an expiration time.</t>

<t>Mitigates: <xref target="threat-expired-offline">THREAT.IMG.EXPIRED.OFFLINE </xref></t>

<t>Implemented by: <xref target="manifest-element-expiration">Expiration Time</xref></t>

</section>
<section anchor="req-sec-authentic" title="REQ.SEC.AUTHENTIC: Cryptographic Authenticity">

<t>The authenticity of an update MUST be demonstrable. Typically, this means that updates must be digitally authenticated. Because the manifest contains information about how to install the update, the manifest’s authenticity MUST also be demonstrable. To reduce the overhead required for validation, the manifest contains the digest of the firmware image, rather than a second digital signature. The authenticity of the manifest can be verified with a digital signature or Message Authentication Code. The authenticity of the firmware image is tied to the manifest by the use of a digest of the firmware image.</t>

<t>Mitigates: <xref target="threat-img-unauthenticated">THREAT.IMG.NON_AUTH</xref>, <xref target="threat-net-onpath">THREAT.NET.ONPATH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref>, <xref target="manifest-element-payload-digest">Payload Digest</xref></t>

</section>
<section anchor="req-sec-authentic-image-type" title="REQ.SEC.AUTH.IMG_TYPE: Authenticated Payload Type">

<t>The type of payload (which may be independent of format) MUST be authenticated. For example, the target must know whether the payload is XIP firmware, a loadable module, or configuration data.</t>

<t>Mitigates: <xref target="threat-img-format">THREAT.IMG.FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref>, <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authentic-image-location" title="Security Requirement REQ.SEC.AUTH.IMG_LOC: Authenticated Storage Location">

<t>The location on the target where the payload is to be stored MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-img-location">THREAT.IMG.LOCATION</xref></t>

<t>Implemented by: <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authenticated-remote-resource" title="REQ.SEC.AUTH.REMOTE_LOC: Authenticated Remote Resource Location">

<t>The location where a target should find a payload MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-net-redirect">THREAT.NET.REDIRECT</xref>, <xref target="threat-net-onpath">THREAT.NET.ONPATH</xref></t>

<t>Implemented by: <xref target="manifest-element-resource-indicator">Resource Indicator</xref></t>

</section>
<section anchor="req-sec-authentic-execution" title="REQ.SEC.AUTH.EXEC: Secure Execution">

<t>The target SHOULD verify firmware at time of boot. This requires authenticated payload size, and digest.</t>

<t>Mitigates: <xref target="threat-image-replacement">THREAT.IMG.REPLACE</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digest</xref>, <xref target="manifest-element-size">Size</xref></t>

</section>
<section anchor="req-sec-authentic-precursor" title="REQ.SEC.AUTH.PRECURSOR: Authenticated precursor images">

<t>If an update uses a differential compression method, it MUST specify the digest of the precursor image and that digest MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-upd-wrong-precursor">THREAT.UPD.WRONG_PRECURSOR</xref></t>

<t>Implemented by: <xref target="element-precursor-digest">Precursor Image Digest</xref></t>

</section>
<section anchor="req-sec-authentic-compatibility" title="REQ.SEC.AUTH.COMPATIBILITY: Authenticated Vendor and Class IDs">

<t>The identifiers that specify firmware compatibility MUST be authenticated to ensure that only compatible firmware is installed on a target device.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented By: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-rights" title="REQ.SEC.RIGHTS: Rights Require Authenticity">

<t>If a device grants different rights to different actors, exercising those rights MUST be accompanied by proof of those rights, in the form of proof of authenticity. Authenticity mechanisms such as those required in <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref> can be used to prove authenticity.</t>

<t>For example, if a device has a policy that requires that firmware have both an Authorship right and a Qualification right and if that device grants Authorship and Qualification rights to different parties, such as a Device Operator and a Network Operator, respectively, then the firmware cannot be installed without proof of rights from both the Device Operator and the Network Operator.</t>

<t>Mitigates: <xref target="threat-upd-unapproved">THREAT.UPD.UNAPPROVED</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-sec-image-confidentiality" title="REQ.SEC.IMG.CONFIDENTIALITY: Payload Encryption">

<t>The manifest information model MUST enable encrypted payloads. Encryption helps to prevent third parties, including attackers, from reading the content of the firmware image. This can protect against confidential information disclosures and discovery of vulnerabilities through reverse engineering. Therefore the manifest must convey the information required to allow an intended recipient to decrypt an encrypted payload.</t>

<t>Mitigates: <xref target="threat-img-disclosure">THREAT.IMG.DISCLOSURE</xref>, <xref target="threat-net-onpath">THREAT.NET.ONPATH</xref></t>

<t>Implemented by: <xref target="manifest-element-encryption-wrapper">Encryption Wrapper</xref></t>

</section>
<section anchor="req-sec-access-control" title="REQ.SEC.ACCESS_CONTROL: Access Control">

<t>If a device grants different rights to different actors, then an exercise of those rights MUST be validated against a list of rights for the actor. This typically takes the form of an Access Control List (ACL). ACLs are applied to two scenarios:</t>

<t><list style="numbers">
  <t>An ACL decides which elements of the manifest may be overridden and by which actors.</t>
  <t>An ACL decides which component identifier/storage identifier pairs can be written by which actors.</t>
</list></t>

<t>Mitigates: <xref target="threat-mfst-override">THREAT.MFST.OVERRIDE</xref>, <xref target="threat-upd-unapproved">THREAT.UPD.UNAPPROVED</xref></t>

<t>Implemented by: Client-side code, not specified in manifest.</t>

</section>
<section anchor="req-sec-mfst-confidentiality" title="REQ.SEC.MFST.CONFIDENTIALITY: Encrypted Manifests">

<t>It MUST be possible to encrypt part or all of the manifest. This may be accomplished with either transport encryption or with at-rest encryption.</t>

<t>Mitigates: <xref target="threat-mfst-exposure">THREAT.MFST.EXPOSURE</xref>, <xref target="threat-net-onpath">THREAT.NET.ONPATH</xref></t>

<t>Implemented by: External Encryption Wrapper / Transport Security</t>

</section>
<section anchor="req-sec-img-complete-digest" title="REQ.SEC.IMG.COMPLETE_DIGEST: Whole Image Digest">

<t>The digest SHOULD cover all available space in a fixed-size storage location. Variable-size storage locations MUST be restricted to exactly the size of deployed payload. This prevents any data from being distributed without being covered by the digest. For example, XIP microcontrollers typically have fixed-size storage. These devices should deploy a digest that covers the deployed firmware image, concatenated with the default erased value of any remaining space.</t>

<t>Mitigates: <xref target="threat-img-extra">THREAT.IMG.EXTRA</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digests</xref></t>

</section>
<section anchor="req-sec-reporting" title="REQ.SEC.REPORTING: Secure Reporting">

<t>Status reports from the device to any remote system SHOULD be performed over an authenticated, confidential channel in order to prevent modification or spoofing of the reports.</t>

<t>Mitigates: <xref target="threat-net-onpath">THREAT.NET.ONPATH</xref></t>

</section>
<section anchor="req-sec-key-protection" title="REQ.SEC.KEY.PROTECTION: Protected storage of signing keys">

<t>Cryptographic keys for signing/authenticating manifests SHOULD be stored in a manner that is inaccessible to networked devices, for example in an HSM, or an air-gapped computer. This protects against an attacker obtaining the keys.</t>

<t>Keys SHOULD be stored in a way that limits the risk of a legitimate, but compromised, entity (such as a server or developer computer) issuing signing requests.</t>

<t>Mitigates: <xref target="threat-key-exposure">THREAT.KEY.EXPOSURE</xref></t>

</section>
<section anchor="req-sec-mfst-check" title="REQ.SEC.MFST.CHECK: Validate manifests prior to deployment">

<t>Manifests SHOULD be parsed and examined prior to deployment to validate that their contents have not been modified during creation and signing.</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
<section anchor="req-sec-mfst-trusted" title="REQ.SEC.MFST.TRUSTED: Construct manifests in a trusted environment">

<t>For high risk deployments, such as large numbers of devices or critical function devices, manifests SHOULD be constructed in an environment that is protected from interference, such as an air-gapped computer. Note that a networked computer connected to an HSM does not fulfill this requirement (see <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref>).</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
<section anchor="req-sec-mfst-const" title="REQ.SEC.MFST.CONST: Manifest kept immutable between check and use">

<t>Both the manifest and any data extracted from it MUST be held immutable between its authenticity verification (time of check) and its use (time of use). To make this guarantee, the manifest MUST fit within an internal memory or a secure memory, such as encrypted memory. The recipient SHOULD defend the manifest from tampering by code or hardware resident in the recipient, for example other processes or debuggers.</t>

<t>If an application requires that the manifest is verified before storing it, then this means the manifest MUST fit in RAM.</t>

<t>Mitigates: <xref target="threat-mfst-toctou">THREAT.MFST.TOCTOU</xref></t>

</section>
</section>
<section anchor="user-stories" title="User Stories">

<t>User stories provide expected use cases. These are used to feed into usability requirements.</t>

<section anchor="user-story-install-instructions" title="USER_STORY.INSTALL.INSTRUCTIONS: Installation Instructions">

<t>As a Device Operator, I want to provide my devices with additional installation instructions so that I can keep process details out of my payload data.</t>

<t>Some installation instructions might be:</t>

<t><list style="symbols">
  <t>Use a table of hashes to ensure that each block of the payload is validate before writing.</t>
  <t>Do not report progress.</t>
  <t>Pre-cache the update, but do not install.</t>
  <t>Install the pre-cached update matching this manifest.</t>
  <t>Install this update immediately, overriding any long-running tasks.</t>
</list></t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-fail-early" title="USER_STORY.MFST.FAIL_EARLY: Fail Early">

<t>As a designer of a resource-constrained IoT device, I want bad updates to fail as early as possible to preserve battery life and limit consumed bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-override" title="USER_STORY.OVERRIDE: Override Non-Critical Manifest Elements">

<t>As a Device Operator, I would like to be able to override the non-critical information in the manifest so that I can control my devices more precisely. The authority to override this information is provided via the installation of a limited trust anchor by another authority.</t>

<t>Some examples of potentially overridable information:</t>

<t><list style="symbols">
  <t><xref target="manifest-element-resource-indicator">URIs</xref>: this allows the Device Operator to direct devices to their own infrastructure in order to reduce network load.</t>
  <t>Conditions: this allows the Device Operator to pose additional constraints on the installation of the manifest.</t>
  <t><xref target="manifest-element-additional-install-info">Directives</xref>: this allows the Device Operator to add more instructions such as time of installation.</t>
  <t><xref target="manifest-element-processing-steps">Processing Steps</xref>: If an intermediary performs an action on behalf of a device, it may need to override the processing steps. It is still possible for a device to verify the final content and the result of any processing step that specifies a digest. Some processing steps should be non-overridable.</t>
</list></t>

<t>Satisfied by: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-component" title="USER_STORY.COMPONENT: Component Update">

<t>As a Device Operator, I want to divide my firmware into components, so that I can reduce the size of updates, make different parties responsible for different components, and divide my firmware into frequently updated and infrequently updated components.</t>

<t>Satisfied by: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-multi-auth" title="USER_STORY.MULTI_AUTH: Multiple Authorizations">

<t>As a Device Operator, I want to ensure the quality of a firmware update before installing it, so that I can ensure interoperability of all devices in my product family. I want to restrict the ability to make changes to my devices to require my express approval.</t>

<t>Satisfied by: <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="user-story-img-format" title="USER_STORY.IMG.FORMAT: Multiple Payload Formats">

<t>As a Device Operator, I want to be able to send multiple payload formats to suit the needs of my update, so that I can optimise the bandwidth used by my devices.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="user-story-img-confidentiality" title="USER_STORY.IMG.CONFIDENTIALITY: Prevent Confidential Information Disclosures">

<t>As a firmware author, I want to prevent confidential information from being disclosed during firmware updates. It is assumed that channel security or at-rest encryption is adequate to protect the manifest itself against information disclosure.</t>

<t>Satisfied by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="user-story-img-unknown-format" title="USER_STORY.IMG.UNKNOWN_FORMAT: Prevent Devices from Unpacking Unknown Formats">

<t>As a Device Operator, I want devices to determine whether they can process a payload prior to downloading it.</t>

<t>In some cases, it may be desirable for a third party to perform some processing on behalf of a target. For this to occur, the third party MUST indicate what processing occurred and how to verify it against the Trust Provisioning Authority’s intent.</t>

<t>This amounts to overriding <xref target="manifest-element-processing-steps">Processing Steps</xref> and <xref target="manifest-element-resource-indicator">Resource Indicator</xref>.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref>, <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref>, <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="user-story-img-current-version" title="USER_STORY.IMG.CURRENT_VERSION: Specify Version Numbers of Target Firmware">

<t>As a Device Operator, I want to be able to target devices for updates based on their current firmware version, so that I can control which versions are replaced with a single manifest.</t>

<t>Satisfied by: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="user-story-img-select" title="USER_STORY.IMG.SELECT: Enable Devices to Choose Between Images">

<t>As a developer, I want to be able to sign two or more versions of my firmware in a single manifest so that I can use a very simple bootloader that chooses between two or more images that are executed in-place.</t>

<t>Satisfied by: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="user-story-exec-mfst" title="USER_STORY.EXEC.MFST: Secure Execution Using Manifests">

<t>As a signer for both secure execution/boot and firmware deployment, I would like to use the same signed document for both tasks so that my data size is smaller, I can share common code, and I can reduce signature verifications.</t>

<t>Satisfied by: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="user-story-exec-decompress" title="USER_STORY.EXEC.DECOMPRESS: Decompress on Load">

<t>As a developer of firmware for a run-from-RAM device, I would like to use compressed images and to indicate to the bootloader that I am using a compressed image in the manifest so that it can be used with secure execution/boot.</t>

<t>Satisfied by: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="user-story-mfst-img" title="USER_STORY.MFST.IMG: Payload in Manifest">

<t>As an operator of devices on a constrained network, I would like the manifest to be able to include a small payload in the same packet so that I can reduce network traffic.</t>

<t>Small payloads may include, for example, wrapped encryption keys, configuration information, public keys, authorization tokens, or X.509 certificates.</t>

<t>Satisfied by: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="user-story-mfst-parse" title="USER_STORY.MFST.PARSE: Simple Parsing">

<t>As a developer for constrained devices, I want a low complexity library for processing updates so that I can fit more application code on my device.</t>

<t>Satisfied by: <xref target="req-use-parse">REQ.USE.PARSE</xref></t>

</section>
<section anchor="user-story-mfst-delegation" title="USER_STORY.MFST.DELEGATION: Delegated Authority in Manifest">

<t>As a Device Operator that rotates delegated authority more often than delivering firmware updates, I would like to delegate a new authority when I deliver a firmware update so that I can accomplish both tasks in a single transmission.</t>

<t>Satisfied by: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
<section anchor="user-story-mfst-pre-check" title="USER_STORY.MFST.PRE_CHECK: Update Evaluation">

<t>As an operator of a constrained network, I would like devices on my network to be able to evaluate the suitability of an update prior to initiating any large download so that I can prevent unnecessary consumption of bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
</section>
<section anchor="usability-requirements" title="Usability Requirements">

<t>The following usability requirements satisfy the user stories listed above.</t>

<section anchor="req-use-mfst-pre-check" title="REQ.USE.MFST.PRE_CHECK: Pre-Installation Checks">

<t>It MUST be possible for a manifest author to place ALL information required to process an update in the manifest.</t>

<t>For example: Information about which precursor image is required for a differential update MUST be placed in the manifest, not in the differential compression header.</t>

<t>For example: Information about an installation-time confirmation system that must be used to allow the installation to proceed.</t>

<t>Satisfies: [USER_STORY.MFST.PRE_CHECK(#user-story-mfst-pre-check), <xref target="user-story-install-instructions">USER_STORY.INSTALL.INSTRUCTIONS</xref></t>

<t>Implemented by: <xref target="manifest-element-additional-install-info">Additional installation instructions</xref></t>

</section>
<section anchor="req-use-mfst-override" title="REQ.USE.MFST.OVERRIDE_REMOTE: Override Remote Resource Location">

<t>It MUST be possible to redirect payload fetches. This applies where two manifests are used in conjunction. For example, a Device Operator creates a manifest specifying a payload and signs it, and provides a URI for that payload. A Network Operator creates a second manifest, with a dependency on the first. They use this second manifest to override the URIs provided by the Device Operator, directing them into their own infrastructure instead. Some devices may provide this capability, while others may only look at canonical sources of firmware. For this to be possible, the device must fetch the payload, whereas a device that accepts payload pushes will ignore this feature.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref></t>

<t>Implemented by: <xref target="manifest-element-aliases">Aliases</xref></t>

</section>
<section anchor="req-use-mfst-component" title="REQ.USE.MFST.COMPONENT: Component Updates">

<t>It MUST be possible to express the requirement to install one or more payloads from one or more authorities so that a multi-payload update can be described. This allows multiple parties with different permissions to collaborate in creating a single update for the IoT device, across multiple components.</t>

<t>This requirement effectively means that it must be possible to construct a tree of manifests on a multi-image target.</t>

<t>In order to enable devices with a heterogeneous storage architecture, the manifest must enable specification of both storage system and the storage location within that storage system.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="user-story-component">USER_STORY.COMPONENT</xref></t>

<t>Implemented by Manifest Element: Dependencies, StorageIdentifier, ComponentIdentifier</t>

<section anchor="example-1-multiple-microcontrollers" title="Example 1: Multiple Microcontrollers">

<t>An IoT device with multiple microcontrollers in the same physical device (HeSA) will likely require multiple payloads with different component identifiers.</t>

</section>
<section anchor="example-2-code-and-configuration" title="Example 2: Code and Configuration">

<t>A firmware image can be divided into two payloads: code and configuration. These payloads may require authorizations from different actors in order to install (see <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref> and <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref>). This structure means that multiple manifests may be required, with a dependency structure between them.</t>

</section>
<section anchor="example-3-multiple-software-modules" title="Example 3: Multiple Software Modules">

<t>A firmware image can be divided into multiple functional blocks for separate testing and distribution. This means that code would need to be distributed in multiple payloads. For example, this might be desirable in order to ensure that common code between devices is identical in order to reduce distribution bandwidth.</t>

</section>
</section>
<section anchor="req-use-mfst-multi-auth" title="REQ.USE.MFST.MULTI_AUTH: Multiple authentications">

<t>It MUST be possible to authenticate a manifest multiple times so that authorizations from multiple parties with different permissions can be required in order to authorize installation of a manifest.</t>

<t>Satisfies: <xref target="user-story-multi-auth">USER_STORY.MULTI_AUTH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-use-img-format" title="REQ.USE.IMG.FORMAT: Format Usability">

<t>The manifest format MUST accommodate any payload format that an Operator wishes to use. This enables the recipient to detect which format the Operator has chosen. Some examples of payload format are:</t>

<t><list style="symbols">
  <t>Binary</t>
  <t>Executable and Linkable Format (ELF)</t>
  <t>Differential</t>
  <t>Compressed</t>
  <t>Packed configuration</t>
  <t>Intel HEX</t>
  <t>Motorola S-Record</t>
</list></t>

<t>Satisfies: <xref target="user-story-img-format">USER_STORY.IMG.FORMAT</xref> <xref target="user-story-img-unknown-format">USER_STORY.IMG.UNKNOWN_FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref></t>

</section>
<section anchor="req-use-img-nested" title="REQ.USE.IMG.NESTED: Nested Formats">

<t>The manifest format MUST accommodate nested formats, announcing to the target device all the nesting steps and any parameters used by those steps.</t>

<t>Satisfies: <xref target="user-story-img-confidentiality">USER_STORY.IMG.CONFIDENTIALITY</xref></t>

<t>Implemented by: <xref target="manifest-element-processing-steps">Processing Steps</xref></t>

</section>
<section anchor="req-use-img-versions" title="REQ.USE.IMG.VERSIONS: Target Version Matching">

<t>The manifest format MUST provide a method to specify multiple version numbers of firmware to which the manifest applies, either with a list or with range matching.</t>

<t>Satisfies: <xref target="user-story-img-current-version">USER_STORY.IMG.CURRENT_VERSION</xref></t>

<t>Implemented by: <xref target="element-required-version">Required Image Version List</xref></t>

</section>
<section anchor="req-use-img-select" title="REQ.USE.IMG.SELECT: Select Image by Destination">

<t>The manifest format MUST provide a mechanism to list multiple equivalent payloads by Execute-In-Place Installation Address, including the payload digest and, optionally, payload URIs.</t>

<t>Satisfies: <xref target="user-story-img-select">USER_STORY.IMG.SELECT</xref></t>

<t>Implemented by: <xref target="manifest-element-xip-address">XIP Address</xref></t>

</section>
<section anchor="req-use-exec" title="REQ.USE.EXEC: Executable Manifest">

<t>It MUST be possible to describe an executable system with a manifest on both Execute-In-Place microcontrollers and on complex operating systems. This requires the manifest to specify the digest of each statically linked dependency. In addition, the manifest format MUST be able to express metadata, such as a kernel command-line, used by any loader or bootloader.</t>

<t>Satisfies: <xref target="user-story-exec-mfst">USER_STORY.EXEC.MFST</xref></t>

<t>Implemented by: <xref target="manifest-element-exec-metadata">Run-time metadata</xref></t>

</section>
<section anchor="req-use-load" title="REQ.USE.LOAD: Load-Time Information">

<t>It MUST be possible to specify additional metadata for load time processing of a payload, such as cryptographic information, load-address, and compression algorithm.</t>

<t>N.B. load comes before exec/boot.</t>

<t>Satisfies: <xref target="user-story-exec-decompress">USER_STORY.EXEC.DECOMPRESS</xref></t>

<t>Implemented by: <xref target="manifest-element-load-metadata">Load-time metadata</xref></t>

</section>
<section anchor="req-use-payload" title="REQ.USE.PAYLOAD: Payload in Manifest Envelope">

<t>It MUST be possible to place a payload in the same structure as the manifest. This MAY place the payload in the same packet as the manifest.</t>

<t>Integrated payloads may include, for example, wrapped encryption keys, configuration information, public keys, authorization tokens, or X.509 certificates.</t>

<t>When an integrated payload is provided, this increases the size of the manifest. Manifest size can cause several processing and storage concerns that require careful consideration. The payload can prevent the whole manifest from being contained in a single network packet, which can cause fragmentation and the loss of portions of the manifest in lossy networks. This causes the need for reassembly and retransmission logic. The manifest MUST be held immutable between verification and processing (see <xref target="req-sec-mfst-const">REQ.SEC.MFST.CONST</xref>), so a larger manifest will consume more memory with immutability guarantees, for example internal RAM or NVRAM, or external secure memory. If the manifest exceeds the available immutable memory, then it MUST be processed modularly, evaluating each of: delegation chains, the security container, and the actual manifest, which includes verifying the integrated payload. If the security model calls for downloading the manifest and validating it before storing to NVRAM in order to prevent wear to NVRAM and energy expenditure in NVRAM, then either increasing memory allocated to manifest storage or modular processing of the received manifest may be required. While the manifest has been organised to enable this type of processing, it creates additional complexity in the parser. If the manifest is stored in NVRAM prior to processing, the integrated payload may cause the manifest to exceed the available storage. Because the manifest is received prior to validation of applicability, authority, or correctness, integrated payloads cause the recipient to expend network bandwidth and energy that may not be required if the manifest is discarded and these costs vary with the size of the integrated payload.</t>

<t>See also: <xref target="req-sec-mfst-const">REQ.SEC.MFST.CONST</xref>.</t>

<t>Satisfies: <xref target="user-story-mfst-img">USER_STORY.MFST.IMG</xref></t>

<t>Implemented by: <xref target="manifest-element-payload">Payload</xref></t>

</section>
<section anchor="req-use-parse" title="REQ.USE.PARSE: Simple Parsing">

<t>The structure of the manifest MUST be simple to parse, without need for a general-purpose parser.</t>

<t>Satisfies: <xref target="user-story-mfst-parse">USER_STORY.MFST.PARSE</xref></t>

<t>Implemented by: N/A</t>

</section>
<section anchor="req-use-delegation" title="REQ.USE.DELEGATION: Delegation of Authority in Manifest">

<t>Any manifest format MUST enable the delivery of a key claim with, but not authenticated by, a manifest. This key claim delivers a new key with which the recipient can verify the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-delegation">USER_STORY.MFST.DELEGATION</xref></t>

<t>Implemented by: <xref target="manifest-element-key-claims">Key Claims</xref></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank our working group chairs, Dave Thaler, Russ Housley and David Waltermire, for their review comments and their support.</t>

<t>We would like to thank the participants of the 2018 Berlin SUIT Hackathon and the June 2018 virtual design team meetings for their discussion input.
In particular, we would like to thank Koen Zandberg, Emmanuel Baccelli, Carsten Bormann, David Brown, Markus Gueller, Frank Audun Kvamtro, Oyvind Ronningstad, Michael Richardson, Jan-Frederik Rieckers, Francisco Acosta, Anton Gerasimov, Matthias Waehlisch, Max Groening, Daniel Petry, Gaetan Harter, Ralph Hamm, Steve Patrick, Fabio Utzig, Paul Lambert, Benjamin Kaduk, Said Gharout, and Milen Stoychev.</t>

<t>We would like to thank those who contributed to the development of this information model. In particular, we would like to thank Milosch Meriac, Jean-Luc Giraud, Dan Ros, Amyas Philips, and Gary Thomson.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC5652" target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2009' month='September' />
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='October' day='21' year='2020' />

<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints.  Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities but it also enables other important capabilities such as updating configuration settings as well as adding new functionality.  In addition to the definition of terminology and an architecture this document motivates the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-14.txt' />
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="STRIDE" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx">
  <front>
    <title>The STRIDE Threat Model</title>
    <author >
      <organization>Microsoft</organization>
    </author>
    <date year="2018" month="May"/>
  </front>
  <format type="HTML" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAM4xmV8AA919aXPkRnbgd/4KrPRBzdkqSmrPrGVuOMLVZLWaFi/z0OEJ
hwKsQrEwRAE1AIrsmg79l/0t+8v2nZkvE0CR3a2xHeuIsdgoII+XL999jMfj
vTZvi+wwmZTJSbmo6lXa5lWZnFXzrEjg38nbvF49pXWW3K7naZs1SQ5vVjfJ
cfaYz7JmL727q7NHGMC/eZaW+SJr2u6Ie/NqVqYrmG9ep4t2nGftYtxscvjL
vzpe4avjb77bm8GE91W9PUzw5729fF0fJm29adrX33zzT9+83oPZ0sPkOptt
6rzd7j1V9cN9XW3W8Oz25GbvIdvCo/khLKTN6jJrx8c47d5e06bl/Ne0qEpY
yhZ2sc4P95KkXsyyedNuC3maJG01M3/m5TwrW33QVHVbZ4vG/Xu7Cv7Z1vnM
vTyrViv41v2al0VeumkALKt0vc7Le36SbtplVcOSxvAj/V9ewqdvDgCMdVrq
Qwblmzor52kZ/lTV93AKfyOAwuHUq+Q0X+VtNtcXslWaF+7jA/r4X9J6dQAr
3YsnfneQ3DSzZbXIyvw+nP1dWpaAFd2fX7qCJQ1w0LoB/uV+9f4ADqtvFW/y
+mFZFX+L1pCVD52fwvnf1ummxAnq5BowI1oCfH9wJ9//S5O3Bwv3+sE829sr
GTcfM8SSq7dHr7/99p/kzz9++/q1/Pmn//Un/fO7b/nPk/HxgUfytJ4tAQKz
dlPDSA7ledjrm6uT4+khLa1N6/sMcCdZtu26Ofz661UzLw9W+ayummrR4hl9
nZXjTfN1kd/Vab39Osu+e/0P3/3jd68e/3nWHLz+Zv8gbdbveTC+4TfLTOaA
P+HetHIl8RWHbwq5w+RMJ6OHePXhWbpNXn/z7Xf0iBev37y7OTv9Hda7Nx6P
k/QO7k46AwT4cVOUWZ3e5UXe5oBlT3m7dJc5qRawE7gzTfIKKNJ+MmeSBBj1
mCV1mjfZPGlh12UGfyAtS5M6K/L0rsgSuP9Jg3QjSxZKtzZE4ZJVNgOczJsV
fAxQypskLZoqwROkT3GkWVXiGuEKz3Xag2RaNkCHynv+Tlez2JQzooA4ZY0Y
V+rM1SOgI6wwr+FJja8nBVBOeOuvm7yGb5vNbAnf9aysgmW/Tx5D+IzwubwL
K1zk95uaqW+TtS1CapSkAMWsKPC/6XyOqy2zJ7fItEA6undR4gCrNdDHkuDM
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
ANqJBQiFUxVEHFxUB6eY21QmTmATPwNRzgV5eQSXqe5NRQIBVo+LRkbBiVCS
XhSrtBkkvhneGzPyFi/ephBqMzVW8Shgib9HzNFuG1A/Npyi4ZFL2UiEQx9S
kHlSXwC06PkquMzWR9KpzgfIwNC09RroxC1PY/jIvXWzsPtbNKASTXNkuiYF
nsRs+cecpAWuc9J5otiGkbBBgqVZKvyGkQkcbMDSif2NPWWcXeif792opXlE
GxJf+xz3hXpRtd5KBRv2W5GIiQiBKldKjo2Oz5j8b/gO5iQ+cqaWc+9yNRAF
jph7jTai/MyTuFG4LY5n9bvhCEEYADeFQQWm6CUu/3PR9PRiYgMEEEiDjpRN
+TxiomxqEbP70SBeIvpQbYo+1iMUwXykmJhud8rvJE8D6diO11XO9TXhuJFk
8pGLtekBq5wWlAgBBzCmum9ktTzNy817V7vns2BtrJAIawTVc06KYeeEWBr1
RbOmnWY6WwzU2bU0QsvUsPRGxXJuLbcY8ueKQQFdB04D9wTkNYoSdH6dVvKE
KYgHOat8RDEtK9SZXKSEHlQntbohU2BYWnUg4uujjuFy8kuE9bKWZ23AP4Bw
c1Sk+aqXUcOSMa8bfpWz+bOzevXJKM5atN8xuZGHVcuPmUldculN73MbWgd6
DZdGRIEMgJ/dq95J+gxZliRyBSZZ7fc4LzlRImAKxgrtBL3QDhTgzkYqvJAZ
WkwkxhgdnqG/6GYWByQSWVw0NWpjrhRR58BAt01JPyE3kH3lc1HnGBj69xP8
wGCPhy4ikE9kPQoV/g9fwsnAdsa+jOlvEmeJcKabsblD8ZHf76mfyhnlo0A9
HPVWrGpGUbHKoM4UX3eZiUN5A6rsV8gpICarZGc1LalgZStew7aDarl7u7YM
yCxmHC5faVP379BP5EEhip0YGdX0ySa9XoB4FZUz9+dqT6qiAryspWTFXD4h
66tJhQ4iKXunUs5E+2clCM31BzcHVwcnB8cH04PkwweuDo7Vg6XuxkFC1crk
pJGOo9NLVOPZDO4gywMkX12vq2pB0oxUs8CHNyCKM4llAzLQSnx8la03WBaP
BKI/BJXS5nkzKyp0ueIvx7FrDR9OsQqSbnkNkMsB2zO5RxYtxYDMNWpN9eVC
g4Tp8Oq0bEhpsRkLElBN7ofsPYag5eiWdAEHSgz5kAAR8LhdyePdQ761Ni+H
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

-->

</rfc>

