<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-information-model-05" category="std">

  <front>
    <title abbrev="A Firmware Manifest Information Model">An Information Model for Firmware Updates in IoT Devices</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2020" month="January" day="20"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality</t>

<t>One component of such a firmware update is a concise and machine-processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The information model describes all the information elements required to secure firmware updates of IoT devices from the threats described in <xref target="threat-model"/> and enables the user stories captured in <xref target="user-stories"/>. These threats and user stories are not intended to be an exhaustive list of the threats against IoT devices, nor of the possible user stories that describe how to conduct a firmware update. Instead they are intended to describe the threats against firmware updates in isolation and provide sufficient motivation to specify the information elements that cover a wide range of user stories. The information model does not define the serialization, encoding, ordering, or structure of information elements, only their semantics.</t>

<t>Because the information model covers a wide range of user stories and a wide range of threats, not all information elements apply to all scenarios. As a result, various information elements could be considered optional to implement and optional to use, depending on which threats exist in a particular domain of application and which user stories are required. Elements marked as REQUIRED provide baseline security and usability properties that are expected to be required for most applications. Those elements are REQUIRED to implement and REQUIRED to use. Elements marked as recommended provide important security or usability properties that are needed on most devices. Elements marked as optional enable security or usability properties that are useful in some applications.</t>

<t>The definition of some of the information elements include examples that illustrate their semantics and how they are intended to be used.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>This document uses terms defined in <xref target="I-D.ietf-suit-architecture"/>.
The term ‘Operator’ refers to both Device and Network Operator.</t>

<t>This document treats devices with a homogeneous storage architecture as devices with a heterogeneous storage architecture, but with a single storage subsystem.</t>

<section anchor="requirements-notation" title="Requirements Notation">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="manifest-information-elements" title="Manifest Information Elements">

<t>Each manifest information element is anchored in a security requirement or a usability requirement. The manifest elements are described below, justified by their requirements.</t>

<section anchor="element-version-id" title="Manifest Element: Version ID of the manifest structure">

<t>An identifier that describes which iteration of the manifest format is contained in the structure.</t>

<t>This element is REQUIRED and MUST be present in order to allow devices to identify the version of the manifest data model that is in use.</t>

</section>
<section anchor="element-sequence-number" title="Manifest Element: Monotonic Sequence Number">

<t>A monotonically increasing sequence number. For convenience, the monotonic sequence number MAY be a UTC timestamp. This allows global synchronisation of sequence numbers without any additional management. This number MUST be easily accessible so that code choosing one out of several manifests can choose which is the latest.</t>

<t>This element is REQUIRED and is necessary to prevent malicious actors from reverting a firmware update against the policies of the relevant authority.</t>

<t>Implements: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="element-vendor-id" title="Manifest Element: Vendor ID">

<t>Vendor IDs must be unique. This is to prevent similarly, or identically named entities from different geographic regions from colliding in their customer’s infrastructure. Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with the vendor’s domain name and the DNS name space ID. Other options include type 1 and type 4 UUIDs.</t>

<t>Vendor ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of a Vendor ID is RECOMMENDED. It helps to distinguish between identically named products from different vendors.</t>

<t>Implements: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-domain-name-based-uuids" title="Example: Domain Name-based UUIDs">

<t>Vendor A creates a UUID based on their domain name:</t>

<t>vendorId = UUID5(DNS, “vendor-a.com”)</t>

<t>Because the DNS infrastructure prevents multiple registrations of the same domain name, this UUID is (with very high probability) guaranteed to be unique. Because the domain name is known, this UUID is reproducible. Type 1 and type 4 UUIDs produce similar guarantees of uniqueness, but not reproducibility.</t>

<t>This approach creates a contention when a vendor changes its name or relinquishes control of a domain name. In this scenario, it is possible that another vendor would start using that same domain name. However, this UUID is not proof of identity; a device’s trust in a vendor must be anchored in a cryptographic key, not a UUID.</t>

</section>
</section>
<section anchor="element-class-id" title="Manifest Element: Class ID">

<t>A device “Class” is a set of different device types that can accept the same firmware update without modification. Class IDs MUST be unique within the scope of a Vendor ID. This is to prevent similarly, or identically named devices colliding in their customer’s infrastructure.</t>

<t>Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with as much information as necessary to define firmware compatibility. Possible information used to derive the class UUID includes:</t>

<t><list style="symbols">
  <t>model name or number</t>
  <t>hardware revision</t>
  <t>runtime library version</t>
  <t>bootloader version</t>
  <t>ROM revision</t>
  <t>silicon batch number</t>
</list></t>

<t>The Class Identifier UUID SHOULD use the Vendor ID as the name space ID. Other options include version 1 and 4 UUIDs. Classes MAY be more granular than is required to identify firmware compatibility. Classes MUST NOT be less granular than is required to identify firmware compatibility. Devices MAY have multiple Class IDs.</t>

<t>Class ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of Class ID is RECOMMENDED. It allows devices to determine applicability of a firmware in an unambiguous way.</t>

<t>If Class ID is not implemented, then each logical device class MUST use a unique trust anchor for authorisation.</t>

<t>Implements: Security Requirement <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-1-different-classes" title="Example 1: Different Classes">

<t>Vendor A creates product Z and product Y. The firmware images of products Z and Y are not interchangeable. Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>ZclassId = UUID5(vendorId, “Product Z”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
</list></t>

<t>This ensures that Vendor A’s Product Z cannot install firmware for Product Y and Product Y cannot install firmware for Product Z.</t>

</section>
<section anchor="example-2-upgrading-class-id" title="Example 2: Upgrading Class ID">

<t>Vendor A creates product X. Later, Vendor A adds a new feature to product X, creating product X v2. Product X requires a firmware update to work with firmware intended for product X v2.</t>

<t>Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>Xv2classId = UUID5(vendorId, “Product X v2”)</t>
</list></t>

<t>When product X receives the firmware update necessary to be compatible with product X v2, part of the firmware update changes the class ID to Xv2classId.</t>

</section>
<section anchor="example-3-shared-functionality" title="Example 3: Shared Functionality">

<t>Vendor A produces two products, product X and product Y. These components share a common core (such as an operating system), but have different applications. The common core and the applications can be updated independently. To enable X and Y to receive the same common core update, they require the same class ID. To ensure that only product X receives application X and only product Y receives application Y, product X and product Y must have different class IDs. The vendor creates Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
  <t>CommonClassId = UUID5(vendorId, “common core”)</t>
</list></t>

<t>Product X matches against both XclassId and CommonClassId. Product Y matches against both YclassId and CommonClassId.</t>

</section>
<section anchor="example-4-white-labelling" title="Example 4: White-labelling">

<t>Vendor A creates a product A and its firmware. Vendor B sells the product under its own name as Product B with some customised configuration. The vendors create the Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorIdA = UUID5(DNS, “vendor-a.com”)</t>
  <t>classIdA = UUID5(vendorIdA, “Product A-Unlabelled”)</t>
  <t>vendorIdB = UUID5(DNS, “vendor-b.com”)</t>
  <t>classIdB = UUID5(vendorIdB, “Product B”)</t>
</list></t>

<t>The product will match against each of these class IDs. If Vendor A and Vendor B provide different components for the device, the implementor MAY choose to make ID matching scoped to each component. Then, the vendorIdA, classIdA match the component ID supplied by Vendor A, and the vendorIdB, classIdB match the component ID supplied by Vendor B.</t>

</section>
</section>
<section anchor="element-precursor-digest" title="Manifest Element: Precursor Image Digest Condition">

<t>When a precursor image is required by the payload format, a precursor image digest condition MUST be present in the conditions list. The precursor image may be installed or stored as a candidate.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Enables feature: differential updates.</t>

<t>Implements: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="element-required-version" title="Manifest Element: Required Image Version List">

<t>When a payload applies to multiple versions of a firmware, the required image version list specifies which versions must be present for the update to be applied. This allows the update author to target specific versions of firmware for an update, while excluding those to which it should not be applied.</t>

<t>Where an update can only be applied over specific predecessor versions, that version MUST be specified by the Required Image Version List.</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="manifest-element-expiration" title="Manifest Element: Expiration Time">

<t>This element tells a device the time at which the manifest expires and should no longer be used. This is only usable in conjunction with a secure source of time.</t>

<t>This element is OPTIONAL and MAY enable user stories where a secure source of time is provided and firmware is intended to expire predictably.</t>

<t>Implements: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="manifest-element-format" title="Manifest Element: Payload Format">

<t>The format of the payload MUST be indicated to devices in an unambiguous way. This element provides a mechanism to describe the payload format, within the signed metadata.</t>

<t>This element is REQUIRED and MUST be present to enable devices to decode payloads correctly.</t>

<t>Implements: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref>, <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="manifest-element-processing-steps" title="Manifest Element: Processing Steps">

<t>A representation of the Processing Steps required to decode a payload. The representation MUST describe which algorithm(s) is used and any additional parameters required by the algorithm(s). The representation MAY group Processing Steps together in predefined combinations.</t>

<t>A Processing Step MAY indicate the expected digest of the payload after the processing is complete.</t>

<t>Processing steps are RECOMMENDED to implement.</t>

<t>Enables feature: Encrypted, compressed, packed formats</t>

<t>Implements: <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref></t>

</section>
<section anchor="maniest-element-storage-location" title="Manifest Element: Storage Location">

<t>This element tells the device where to store a payload within a given component. The device can use this to establish which permissions are necessary and the physical storage location to use.</t>

<t>This element is REQUIRED and MUST be present to enable devices to store payloads to the correct location.</t>

<t>Implements: <xref target="req-sec-authentic-image-location">REQ.SEC.AUTH.IMG_LOC</xref></t>

<section anchor="example-1-two-storage-locations" title="Example 1: Two Storage Locations">

<t>A device supports two components: an OS and an application. These components can be updated independently, expressing dependencies to ensure compatibility between the components. The Author chooses two storage identifiers:</t>

<t><list style="symbols">
  <t>“OS”</t>
  <t>“APP”</t>
</list></t>

</section>
<section anchor="example-2-file-system" title="Example 2: File System">

<t>A device supports a full filesystem. The Author chooses to use the storage identifier as the path at which to install the payload. The payload may be a tarball, in which case, it unpacks the tarball into the specified path.</t>

</section>
<section anchor="example-3-flash-memory" title="Example 3: Flash Memory">

<t>A device supports flash memory. The Author chooses to make the storage identifier the offset where the image should be written.</t>

</section>
</section>
<section anchor="manifest-element-component-identifier" title="Manifest Element: Component Identifier">

<t>In a heterogeneous storage architecture, a storage identifier is insufficient to identify where and how to store a payload. To resolve this, a component identifier indicates which part of the storage architecture is targeted by the payload. In a homogeneous storage architecture, this element is unnecessary.</t>

<t>This element is OPTIONAL and only necessary in heterogeneous storage architecture devices.</t>

<t>N.B. A serialisation MAY choose to combine Component Identifier and <xref target="maniest-element-storage-location">Storage Location</xref></t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-resource-indicator" title="Manifest Element: Resource Indicator">

<t>This element provides the information required for the device to acquire the resource. This can be encoded in several ways:</t>

<t><list style="symbols">
  <t>One URI</t>
  <t>A list of URIs</t>
  <t>A prioritised list of URIs</t>
  <t>A list of signed URIs</t>
</list></t>

<t>This element is OPTIONAL and only needed when the target device does not intrinsically know where to find the payload.</t>

<t>N.B. Devices will typically require URIs.</t>

<t>Implements: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="manifest-element-payload-digest" title="Manifest Element: Payload Digests">

<t>This element contains one or more digests of one or more payloads. This allows the target device to ensure authenticity of the payload(s). A serialisation MUST provide a mechanism to select one payload from a list based on system parameters, such as Execute-In-Place Installation Address.</t>

<t>This element is REQUIRED to implement and fundamentally necessary to ensure the authenticity and integrity of the payload. Support for more than one digest is OPTIONAL to implement in a recipient device.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-size" title="Manifest Element: Size">

<t>The size of the payload in bytes.</t>

<t>Variable-size storage locations MUST be set to exactly the size listed in this element.</t>

<t>This element is REQUIRED and informs the target device how big of a payload to expect. Without it, devices are exposed to some classes of denial of service attack.</t>

<t>Implements: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="manifest-element-signature" title="Manifest Element: Signature">

<t>This is not strictly a manifest element. Instead, the manifest is wrapped by a standardised authentication container, such as a COSE (<xref target="RFC8152"/>) or CMS (<xref target="RFC5652"/>) signature object. The authentication container MUST support multiple actors and multiple authentication methods.</t>

<t>This element is REQUIRED in non-dependency manifests and represents the foundation of all security properties of the manifest. Manifests which are included as dependencies by another manifest SHOULD include a signature so that the recipient can distinguish between different actors with different permissions.</t>

<t>A manifest MUST NOT be considered authenticated by channel security even if it contains only channel information (such as URIs). If the authenticated remote or channel were compromised, the threat actor could induce recipients to queries traffic over any accessible network. Lightweight authentication with pre-existing relationships SHOULD be done with MAC.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref></t>

</section>
<section anchor="manifest-element-additional-install-info" title="Manifest Element: Additional installation instructions">

<t>Instructions that the device should execute when processing the manifest. This information is distinct from the information necessary to process a payload. Additional installation instructions include information such as update timing (for example, install only on Sunday, at 0200), procedural considerations (for example, shut down the equipment under control before executing the update), pre- and post-installation steps (for example, run a script).</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="manifest-element-aliases" title="Manifest Element: Aliases">

<t>A mechanism for a manifest to augment or replace URIs or URI lists defined by one or more of its dependencies.</t>

<t>This element is OPTIONAL and enables some user stories.</t>

<t>Implements: <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="manifest-element-dependencies" title="Manifest Element: Dependencies">

<t>A list of other manifests that are required by the current manifest. Manifests are identified an unambiguous way, such as a digest.</t>

<t>This element is REQUIRED to use in deployments that include both multiple authorities and multiple payloads.</t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-encryption-wrapper" title="Manifest Element: Encryption Wrapper">

<t>Encrypting firmware images requires symmetric content encryption keys. The encryption wrapper provides the information needed for a device to obtain or locate a key that it uses to decrypt the firmware. Typical choices for an encryption wrapper include CMS (<xref target="RFC5652"/>) or COSE (<xref target="RFC8152"/>). This MAY be included in a decryption step contained in <xref target="manifest-element-processing-steps">Processing Steps</xref>.</t>

<t>This element is REQUIRED to use for encrypted payloads,</t>

<t>Implements: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="manifest-element-xip-address" title="Manifest Element: XIP Address">

<t>In order to support XIP systems with multiple possible base addresses, it is necessary to specify which address the payload is linked for.</t>

<t>For example a microcontroller may have a simple bootloader that chooses one of two images to boot. That microcontroller then needs to choose one of two firmware images to install, based on which of its two images is older.</t>

<t>Implements: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-load-metadata" title="Manifest Element: Load-time metadata">

<t>Load-time metadata provides the device with information that it needs in order to load one or more images. This is effectively a copy operation from the permanent storage location of an image into the active use location of that image. The metadata contains the source and destination of the image as well as any operations that are performed on the image.</t>

<t>Implements: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="manifest-element-exec-metadata" title="Manifest Element: Run-time metadata">

<t>Run-time metadata provides the device with any extra information needed to boot the device. This may include information such as the entry-point of an XIP image or the kernel command-line of a Linux image.</t>

<t>Implements: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="manifest-element-payload" title="Manifest Element: Payload">

<t>The Payload element provides a recipient device with the whole payload, contained within the manifest superstructure. This enables the manifest and payload to be delivered simultaneously.</t>

<t>Implements: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="manifest-element-key-claims" title="Manifest Element: Key Claims">

<t>The Key Claims element is not authenticated by the <xref target="manifest-element-signature">Signature</xref>, instead, it provides a chain of key delegations (or references to them) for the device to follow in order to verify the key that authenticated the manifest using a trusted key.</t>

<t>Implements: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
</section>
<section anchor="design-motivation" title="Security Considerations">
<t>The following sub-sections describe the threat model, user stories, security requirements, and usability requirements. This section also provides the motivations for each of the manifest information elements.</t>

<section anchor="threat-model" title="Threat Model">

<t>The following sub-sections aim to provide information about the threats that were considered, the security requirements that are derived from those threats and the fields that permit implementation of the security requirements. This model uses the S.T.R.I.D.E. <xref target="STRIDE"/> approach. Each threat is classified according to:</t>

<t><list style="symbols">
  <t>Spoofing identity</t>
  <t>Tampering with data</t>
  <t>Repudiation</t>
  <t>Information disclosure</t>
  <t>Denial of service</t>
  <t>Elevation of privilege</t>
</list></t>

<t>This threat model only covers elements related to the transport of firmware updates. It explicitly does not cover threats outside of the transport of firmware updates. For example, threats to an IoT device due to physical access are out of scope.</t>

</section>
<section anchor="threat-descriptions" title="Threat Descriptions">

<section anchor="threat-expired" title="THREAT.IMG.EXPIRED: Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker sends an old, but valid manifest with an old, but valid firmware image to a device. If there is a known vulnerability in the provided firmware image, this may allow an attacker to exploit the vulnerability and gain control of the device.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="threat-expired-rollback" title="THREAT.IMG.EXPIRED.ROLLBACK : Offline device + Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker targets a device that has been offline for a long time and runs an old firmware version. The attacker sends an old, but valid manifest to a device with an old, but valid firmware image. The attacker-provided firmware is newer than the installed one but older than the most recently available firmware. If there is a known vulnerability in the provided firmware image then this may allow an attacker to gain control of a device. Because the device has been offline for a long time, it is unaware of any new updates. As such it will treat the old manifest as the most current.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="threat-incompatible" title="THREAT.IMG.INCOMPATIBLE: Mismatched Firmware">

<t>Classification: Denial of Service</t>

<t>An attacker sends a valid firmware image, for the wrong type of device, signed by an actor with firmware installation permission on both types of device. The firmware is verified by the device positively because it is signed by an actor with the appropriate permission. This could have wide-ranging consequences. For devices that are similar, it could cause minor breakage, or expose security vulnerabilities. For devices that are very different, it is likely to render devices inoperable.</t>

<t>Mitigated by: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref></t>

<section anchor="example" title="Example:">

<t>Suppose that two vendors, Vendor A and Vendor B, adopt the same trade name in different geographic regions, and they both make products with the same names, or product name matching is not used. This causes firmware from Vendor A to match devices from Vendor B.</t>

<t>If the vendors are the firmware authorities, then devices from Vendor A will reject images signed by Vendor B since they use different credentials. However, if both devices trust the same Author, then, devices from Vendor A could install firmware intended for devices from Vendor B.</t>

</section>
</section>
<section anchor="threat-img-format" title="THREAT.IMG.FORMAT: The target device misinterprets the type of payload">

<t>Classification: Denial of Service</t>

<t>If a device misinterprets the format of the firmware image, it may cause a device to install a firmware image incorrectly. An incorrectly installed firmware image would likely cause the device to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received firmware image may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref></t>

</section>
<section anchor="threat-img-location" title="THREAT.IMG.LOCATION: The target device installs the payload to the wrong location">

<t>Classification: Denial of Service</t>

<t>If a device installs a firmware image to the wrong location on the device, then it is likely to break. For example, a firmware image installed as an application could cause a device and/or an application to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received code may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_LOC</xref></t>

</section>
<section anchor="threat-net-redirect" title="THREAT.NET.REDIRECT: Redirection to inauthentic payload hosting">

<t>Classification: Denial of Service</t>

<t>If a device does not know where to obtain the payload for an update, it may be redirected to an attacker’s server. This would allow an attacker to provide broken payloads to devices.</t>

<t>Mitigated by: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="threat-net-mitm" title="THREAT.NET.MITM: Traffic interception">

<t>Classification: Spoofing Identity, Tampering with Data</t>

<t>An attacker intercepts all traffic to and from a device. The attacker can monitor or modify any data sent to or received from the device. This can take the form of: manifests, payloads, status reports, and capability reports being modified or not delivered to the intended recipient. It can also take the form of analysis of data sent to or from the device, either in content, size, or frequency.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref>, <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref>, <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref>, <xref target="req-sec-reporting">REQ.SEC.REPORTING</xref></t>

</section>
<section anchor="threat-image-replacement" title="THREAT.IMG.REPLACE: Payload Replacement">

<t>Classification: Elevation of Privilege</t>

<t>An attacker replaces a newly downloaded firmware after a device finishes verifying a manifest. This could cause the device to execute the attacker’s code. This attack likely requires physical access to the device. However, it is possible that this attack is carried out in combination with another threat that allows remote execution. This is a typical Time Of Check/Time Of Use threat.</t>

<t>Threat Escalation: If the attacker is able to exploit a known
vulnerability, or if the attacker can supply their own firmware, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="threat-img-unauthenticated" title="THREAT.IMG.NON_AUTH: Unauthenticated Images">

<t>Classification: Elevation of Privilege / All Types</t>

<t>If an attacker can install their firmware on a device, by manipulating either payload or metadata, then they have complete control of the device.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref></t>

</section>
<section anchor="threat-upd-wrong-precursor" title="THREAT.UPD.WRONG_PRECURSOR: Unexpected Precursor images">

<t>Classification: Denial of Service / All Types</t>

<t>An attacker sends a valid, current manifest to a device that has an unexpected precursor image. If a payload format requires a precursor image (for example, delta updates) and that precursor image is not available on the target device, it could cause the update to break.</t>

<t>An attacker that can cause a device to install a payload against the wrong precursor image could gain elevation of privilege and potentially expand this to all types of threat. However, it is unlikely that a valid differential update applied to an incorrect precursor would result in a functional, but vulnerable firmware.</t>

<t>Mitigated by: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="threat-upd-unapproved" title="THREAT.UPD.UNAPPROVED: Unapproved Firmware">

<t>Classification: Denial of Service, Elevation of Privilege</t>

<t>This threat can appear in several ways, however it is ultimately about ensuring that devices retain the behaviour required by their Owner, Device Operator, or Network Operator. The owner or operator of a device typically requires that the device maintain certain features, functions, capabilities, behaviours, or interoperability constraints (more generally, behaviour). If these requirements are broken, then a device will not fulfill its purpose. Therefore, if any party other than the device’s Owner or the Owner’s contracted Device Operator has the ability to modify device behaviour without approval, then this constitutes an elevation of privilege.</t>

<t>Similarly, a network operator may require that devices behave in a particular way in order to maintain the integrity of the network. If devices behaviour on a network can be modified without the approval of the network operator, then this constitutes an elevation of privilege with respect to the network.</t>

<t>For example, if the owner of a device has purchased that device because of Features A, B, and C, and a firmware update is issued by the manufacturer, which removes Feature A, then the device may not fulfill the owner’s requirements any more. In certain circumstances, this can cause significantly greater threats. Suppose that Feature A is used to implement a safety-critical system, whether the manufacturer intended this behaviour or not. When unapproved firmware is installed, the system may become unsafe.</t>

<t>In a second example, the owner or operator of a system of two or more interoperating devices needs to approve firmware for their system in order to ensure interoperability with other devices in the system. If the firmware is not qualified, the system as a whole may not work. Therefore, if a device installs firmware without the approval of the device owner or operator, this is a threat to devices or the system as a whole.</t>

<t>Similarly, the operator of a network may need to approve firmware for devices attached to the network in order to ensure favourable operating conditions within the network. If the firmware is not qualified, it may degrade the performance of the network. Therefore, if a device installs firmware without the approval of the network operator, this is a threat to the network itself.</t>

<t>Threat Escalation: If the firmware expects configuration that is present in devices deployed in Network A, but not in devices deployed in Network B, then the device may experience degraded security, leading to threats of All Types.</t>

<t>Mitigated by: <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

<section anchor="example-1-multiple-network-operators-with-a-single-device-operator" title="Example 1: Multiple Network Operators with a Single Device Operator">

<t>In this example, assume that Device Operators expect the rights to create firmware but that Network Operators expect the rights to qualify firmware as fit-for-purpose on their networks. Additionally, assume that Device Operators manage devices that can be deployed on any network, including Network A and B in our example.</t>

<t>An attacker may obtain a manifest for a device on Network A. Then, this attacker sends that manifest to a device on Network B. Because Network A and Network B are under control of different Operators, and the firmware for a device on Network A has not been qualified to be deployed on Network B, the target device on Network B is now in violation of the Operator B’s policy and may be disabled by this unqualified, but signed firmware.</t>

<t>This is a denial of service because it can render devices inoperable. This is an elevation of privilege because it allows the attacker to make installation decisions that should be made by the Operator.</t>

</section>
<section anchor="example-2-single-network-operator-with-multiple-device-operators" title="Example 2: Single Network Operator with Multiple Device Operators">

<t>Multiple devices that interoperate are used on the same network and communicate with each other. Some devices are manufactured and managed by Device Operator A and other devices by Device Operator B. A new firmware is released by Device Operator A that breaks compatibility with devices from Device Operator B. An attacker sends the new firmware to the devices managed by Device Operator A without approval of the Network Operator. This breaks the behaviour of the larger system causing denial of service and possibly other threats. Where the network is a distributed SCADA system, this could cause misbehaviour of the process that is under control.</t>

</section>
</section>
<section anchor="threat-img-disclosure" title="THREAT.IMG.DISCLOSURE: Reverse Engineering Of Firmware Image for Vulnerability Analysis">

<t>Classification: All Types</t>

<t>An attacker wants to mount an attack on an IoT device. To prepare the attack he or she retrieves the provided firmware image and performs reverse engineering of the firmware image to analyze it for specific vulnerabilities.</t>

<t>Mitigated by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-mfst-override" title="THREAT.MFST.OVERRIDE: Overriding Critical Manifest Elements">

<t>Classification: Elevation of Privilege</t>

<t>An authorised actor, but not the Author, uses an override mechanism (<xref target="user-story-override">USER_STORY.OVERRIDE</xref>) to change an information element in a manifest signed by the Author. For example, if the authorised actor overrides the digest and URI of the payload, the actor can replace the entire payload with a payload of their choice.</t>

<t>Threat Escalation: By overriding elements such as payload installation instructions or firmware digest, this threat can be escalated to all types.</t>

<t>Mitigated by: <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="threat-mfst-exposure" title="THREAT.MFST.EXPOSURE: Confidential Manifest Element Exposure">

<t>Classification: Information Disclosure</t>

<t>A third party may be able to extract sensitive information from the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-img-extra" title="THREAT.IMG.EXTRA: Extra data after image">

<t>Classification: All Types</t>

<t>If a third party modifies the image so that it contains extra code after a valid, authentic image, that third party can then use their own code in order to make better use of an existing vulnerability.</t>

<t>Mitigated by: <xref target="req-sec-img-complete-digest">REQ.SEC.IMG.COMPLETE_DIGEST</xref></t>

</section>
<section anchor="threat-key-exposure" title="THREAT.KEY.EXPOSURE: Exposure of signing keys">

<t>Classification: All Types</t>

<t>If a third party obtains a key or even indirect access to a key, for example in an HSM, then they can perform the same actions as the legitimate owner of the key. If the key is trusted for firmware update, then the third party can perform firmware updates as though they were the legitimate owner of the key.</t>

<t>For example, if manifest signing is performed on a server connected to the internet, an attacker may compromise the server and then be able to sign manifests, even if the keys for manifest signing are held in an HSM that is accessed by the server.</t>

<t>Mitigated by: <xref target="req-sec-key-protection">REQ.SEC.KEY.PROTECTION</xref></t>

</section>
<section anchor="threat-mfst-modification" title="THREAT.MFST.MODIFICATION: Modification of manifest or payload prior to signing">

<t>Classification: All Types</t>

<t>If an attacker can alter a manifest or payload before it is signed, they can perform all the same actions as the manifest author. This allows the attacker to deploy firmware updates to any devices that trust the manifest author. If an attacker can modify the code of a payload before the corresponding manifest is created, they can insert their own code. If an attacker can modify the manifest before it is signed, they can redirect the manifest to their own payload.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that watches manifest creation activities and inserts code into any binary that is referenced by a manifest.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that replaces the referenced binary (digest) and URI with the attacker’s binary (digest) and URI.</t>

<t>Mitigated by: <xref target="req-sec-mfst-check">REQ.SEC.MFST.CHECK</xref>, <xref target="req-sec-mfst-trusted">REQ.SEC.MFST.TRUSTED</xref></t>

</section>
<section anchor="threat-mfst-toctou" title="THREAT.MFST.TOCTOU: Modification of manifest between authentication and use">

<t>Classification: All Types</t>

<t>If an attacker can modify a manifest after it is authenticated (Time Of Check) but before it is used (Time Of Use), then the attacker can place any content whatsoever in the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-const">REQ.SEC.MFST.CONST</xref></t>

</section>
</section>
<section anchor="security-requirements" title="Security Requirements">

<t>The security requirements here are a set of policies that mitigate the threats described in <xref target="threat-model"/>.</t>

<section anchor="req-sec-sequence" title="REQ.SEC.SEQUENCE: Monotonic Sequence Numbers">

<t>Only an actor with firmware installation authority is permitted to decide when device firmware can be installed. To enforce this rule, manifests MUST contain monotonically increasing sequence numbers. Manifests MAY use UTC epoch timestamps to coordinate monotonically increasing sequence numbers across many actors in many locations. If UTC epoch timestamps are used, they MUST NOT be treated as times, they MUST be treated only as sequence numbers. Devices MUST reject manifests with sequence numbers smaller than any onboard sequence number.</t>

<t>Note: This is not a firmware version. It is a manifest sequence number. A firmware version may be rolled back by creating a new manifest for the old firmware version with a later sequence number.</t>

<t>Mitigates: <xref target="threat-expired">THREAT.IMG.EXPIRED</xref></t>

<t>Implemented by: <xref target="element-sequence-number">Monotonic Sequence Number</xref></t>

</section>
<section anchor="req-sec-compatible" title="REQ.SEC.COMPATIBLE: Vendor, Device-type Identifiers">

<t>Devices MUST only apply firmware that is intended for them. Devices MUST know with fine granularity that a given update applies to their vendor, model, hardware revision, software revision. Human-readable identifiers are often error-prone in this regard, so unique identifiers SHOULD be used.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented by: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-exp" title="REQ.SEC.EXP: Expiration Time">

<t>Firmware MAY expire after a given time. Devices MAY provide a secure clock (local or remote). If a secure clock is provided and the Firmware manifest has an expiration timestamp, the device MUST reject the manifest if current time is later than the expiration time.</t>

<t>Mitigates: <xref target="threat-expired-rollback">THREAT.IMG.EXPIRED.ROLLBACK </xref></t>

<t>Implemented by: <xref target="manifest-element-expiration">Expiration Time</xref></t>

</section>
<section anchor="req-sec-authentic" title="REQ.SEC.AUTHENTIC: Cryptographic Authenticity">

<t>The authenticity of an update MUST be demonstrable. Typically, this means that updates must be digitally authenticated. Because the manifest contains information about how to install the update, the manifest’s authenticity MUST also be demonstrable. To reduce the overhead required for validation, the manifest contains the digest of the firmware image, rather than a second digital signature. The authenticity of the manifest can be verified with a digital signature or Message Authentication Code. The authenticity of the firmware image is tied to the manifest by the use of a digest of the firmware image.</t>

<t>Mitigates: <xref target="threat-img-unauthenticated">THREAT.IMG.NON_AUTH</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref>, <xref target="manifest-element-payload-digest">Payload Digest</xref></t>

</section>
<section anchor="req-sec-authentic-image-type" title="REQ.SEC.AUTH.IMG_TYPE: Authenticated Payload Type">

<t>The type of payload (which may be independent of format) MUST be authenticated. For example, the target must know whether the payload is XIP firmware, a loadable module, or serialized configuration data.</t>

<t>Mitigates: <xref target="threat-img-format">THREAT.IMG.FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref>, <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authentic-image-location" title="Security Requirement REQ.SEC.AUTH.IMG_LOC: Authenticated Storage Location">

<t>The location on the target where the payload is to be stored MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-img-location">THREAT.IMG.LOCATION</xref></t>

<t>Implemented by: <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authenticated-remote-resource" title="REQ.SEC.AUTH.REMOTE_LOC: Authenticated Remote Resource Location">

<t>The location where a target should find a payload MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-net-redirect">THREAT.NET.REDIRECT</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-resource-indicator">Resource Indicator</xref></t>

</section>
<section anchor="req-sec-authentic-execution" title="REQ.SEC.AUTH.EXEC: Secure Execution">

<t>The target SHOULD verify firmware at time of boot. This requires authenticated payload size, and digest.</t>

<t>Mitigates: <xref target="threat-image-replacement">THREAT.IMG.REPLACE</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digest</xref>, <xref target="manifest-element-size">Size</xref></t>

</section>
<section anchor="req-sec-authentic-precursor" title="REQ.SEC.AUTH.PRECURSOR: Authenticated precursor images">

<t>If an update uses a differential compression method, it MUST specify the digest of the precursor image and that digest MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-upd-wrong-precursor">THREAT.UPD.WRONG_PRECURSOR</xref></t>

<t>Implemented by: <xref target="element-precursor-digest">Precursor Image Digest</xref></t>

</section>
<section anchor="req-sec-authentic-compatibility" title="REQ.SEC.AUTH.COMPATIBILITY: Authenticated Vendor and Class IDs">

<t>The identifiers that specify firmware compatibility MUST be authenticated to ensure that only compatible firmware is installed on a target device.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented By: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-rights" title="REQ.SEC.RIGHTS: Rights Require Authenticity">

<t>If a device grants different rights to different actors, exercising those rights MUST be accompanied by proof of those rights, in the form of proof of authenticity. Authenticity mechanisms such as those required in <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref> can be used to prove authenticity.</t>

<t>For example, if a device has a policy that requires that firmware have both an Authorship right and a Qualification right and if that device grants Authorship and Qualification rights to different parties, such as a Device Operator and a Network Operator, respectively, then the firmware cannot be installed without proof of rights from both the Device Operator and the Network Operator.</t>

<t>Mitigates: <xref target="threat-upd-unapproved">THREAT.UPD.UNAPPROVED</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-sec-image-confidentiality" title="REQ.SEC.IMG.CONFIDENTIALITY: Payload Encryption">

<t>The manifest information model MUST enable encrypted payloads. Encryption helps to prevent third parties, including attackers, from reading the content of the firmware image. This can protect against confidential information disclosures and discovery of vulnerabilities through reverse engineering. Therefore the manifest must convey the information required to allow an intended recipient to decrypt an encrypted payload.</t>

<t>Mitigates: <xref target="threat-img-disclosure">THREAT.IMG.DISCLOSURE</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-encryption-wrapper">Encryption Wrapper</xref></t>

</section>
<section anchor="req-sec-access-control" title="REQ.SEC.ACCESS_CONTROL: Access Control">

<t>If a device grants different rights to different actors, then an exercise of those rights MUST be validated against a list of rights for the actor. This typically takes the form of an Access Control List (ACL). ACLs are applied to two scenarios:</t>

<t><list style="numbers">
  <t>An ACL decides which elements of the manifest may be overridden and by which actors.</t>
  <t>An ACL decides which component identifier/storage identifier pairs can be written by which actors.</t>
</list></t>

<t>Mitigates: <xref target="threat-mfst-override">THREAT.MFST.OVERRIDE</xref>, <xref target="threat-upd-unapproved">THREAT.UPD.UNAPPROVED</xref></t>

<t>Implemented by: Client-side code, not specified in manifest.</t>

</section>
<section anchor="req-sec-mfst-confidentiality" title="REQ.SEC.MFST.CONFIDENTIALITY: Encrypted Manifests">

<t>It MUST be possible to encrypt part or all of the manifest. This may be accomplished with either transport encryption or with at-rest encryption.</t>

<t>Mitigates: <xref target="threat-mfst-exposure">THREAT.MFST.EXPOSURE</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: External Encryption Wrapper / Transport Security</t>

</section>
<section anchor="req-sec-img-complete-digest" title="REQ.SEC.IMG.COMPLETE_DIGEST: Whole Image Digest">

<t>The digest SHOULD cover all available space in a fixed-size storage location. Variable-size storage locations MUST be restricted to exactly the size of deployed payload. This prevents any data from being distributed without being covered by the digest. For example, XIP microcontrollers typically have fixed-size storage. These devices should deploy a digest that covers the deployed firmware image, concatenated with the default erased value of any remaining space.</t>

<t>Mitigates: <xref target="threat-img-extra">THREAT.IMG.EXTRA</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digests</xref></t>

</section>
<section anchor="req-sec-reporting" title="REQ.SEC.REPORTING: Secure Reporting">

<t>Status reports from the device to any remote system SHOULD be performed over an authenticated, confidential channel in order to prevent modification or spoofing of the reports.</t>

<t>Mitigates: <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

</section>
<section anchor="req-sec-key-protection" title="REQ.SEC.KEY.PROTECTION: Protected storage of signing keys">

<t>Cryptographic keys for signing/authenticating manifests SHOULD be stored in a manner that is inaccessible to networked devices, for example in an HSM, or an air-gapped computer. This protects against an attacker obtaining the keys.</t>

<t>Keys SHOULD be stored in a way that limits the risk of a legitimate, but compromised, entity (such as a server or developer computer) issuing signing requests.</t>

<t>Mitigates: <xref target="threat-key-exposure">THREAT.KEY.EXPOSURE</xref></t>

</section>
<section anchor="req-sec-mfst-check" title="REQ.SEC.MFST.CHECK: Validate manifests prior to deployment">

<t>Manifests SHOULD be parsed and examined prior to deployment to validate that their contents have not been modified during creation and signing.</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
<section anchor="req-sec-mfst-trusted" title="REQ.SEC.MFST.TRUSTED: Construct manifests in a trusted environment">

<t>For high risk deployments, such as large numbers of devices or critical function devices, manifests SHOULD be constructed in an environment that is protected from interference, such as an air-gapped computer. Note that a networked computer connected to an HSM does not fulfill this requirement (see <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref>).</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
<section anchor="req-sec-mfst-const" title="REQ.SEC.MFST.CONST: Manifest kept immutable between check and use">

<t>Both the manifest and any data extracted from it MUST be held immutable between its authenticity verification (time of check) and its use (time of use). To make this guarantee, the manifest MUST fit within an internal memory or a secure memory, such as encrypted memory. The recipient SHOULD defend the manifest from tampering by code or hardware resident in the recipient, for example other processes or debuggers.</t>

<t>If an application requires that the manifest is verified before storing it, then this means the manifest MUST fit in RAM.</t>

<t>Mitigates: <xref target="threat-mfst-toctou">THREAT.MFST.TOCTOU</xref></t>

</section>
</section>
<section anchor="user-stories" title="User Stories">

<t>User stories provide expected use cases. These are used to feed into usability requirements.</t>

<section anchor="user-story-install-instructions" title="USER_STORY.INSTALL.INSTRUCTIONS: Installation Instructions">

<t>As a Device Operator, I want to provide my devices with additional installation instructions so that I can keep process details out of my payload data.</t>

<t>Some installation instructions might be:</t>

<t><list style="symbols">
  <t>Use a table of hashes to ensure that each block of the payload is validate before writing.</t>
  <t>Do not report progress.</t>
  <t>Pre-cache the update, but do not install.</t>
  <t>Install the pre-cached update matching this manifest.</t>
  <t>Install this update immediately, overriding any long-running tasks.</t>
</list></t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-fail-early" title="USER_STORY.MFST.FAIL_EARLY: Fail Early">

<t>As a designer of a resource-constrained IoT device, I want bad updates to fail as early as possible to preserve battery life and limit consumed bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-override" title="USER_STORY.OVERRIDE: Override Non-Critical Manifest Elements">

<t>As a Device Operator, I would like to be able to override the non-critical information in the manifest so that I can control my devices more precisely. The authority to override this information is provided via the installation of a limited trust anchor by another authority.</t>

<t>Some examples of potentially overridable information:</t>

<t><list style="symbols">
  <t><xref target="manifest-element-resource-indicator">URIs</xref>: this allows the Device Operator to direct devices to their own infrastructure in order to reduce network load.</t>
  <t>Conditions: this allows the Device Operator to pose additional constraints on the installation of the manifest.</t>
  <t><xref target="manifest-element-additional-install-info">Directives</xref>: this allows the Device Operator to add more instructions such as time of installation.</t>
  <t><xref target="manifest-element-processing-steps">Processing Steps</xref>: If an intermediary performs an action on behalf of a device, it may need to override the processing steps. It is still possible for a device to verify the final content and the result of any processing step that specifies a digest. Some processing steps should be non-overridable.</t>
</list></t>

<t>Satisfied by: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-component" title="USER_STORY.COMPONENT: Component Update">

<t>As a Device Operator, I want to divide my firmware into components, so that I can reduce the size of updates, make different parties responsible for different components, and divide my firmware into frequently updated and infrequently updated components.</t>

<t>Satisfied by: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-multi-auth" title="USER_STORY.MULTI_AUTH: Multiple Authorisations">

<t>As a Device Operator, I want to ensure the quality of a firmware update before installing it, so that I can ensure interoperability of all devices in my product family. I want to restrict the ability to make changes to my devices to require my express approval.</t>

<t>Satisfied by: <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="user-story-img-format" title="USER_STORY.IMG.FORMAT: Multiple Payload Formats">

<t>As a Device Operator, I want to be able to send multiple payload formats to suit the needs of my update, so that I can optimise the bandwidth used by my devices.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="user-story-img-confidentiality" title="USER_STORY.IMG.CONFIDENTIALITY: Prevent Confidential Information Disclosures">

<t>As a firmware author, I want to prevent confidential information from being disclosed during firmware updates. It is assumed that channel security or at-rest encryption is adequate to protect the manifest itself against information disclosure.</t>

<t>Satisfied by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="user-story-img-unknown-format" title="USER_STORY.IMG.UNKNOWN_FORMAT: Prevent Devices from Unpacking Unknown Formats">

<t>As a Device Operator, I want devices to determine whether they can process a payload prior to downloading it.</t>

<t>In some cases, it may be desirable for a third party to perform some processing on behalf of a target. For this to occur, the third party MUST indicate what processing occurred and how to verify it against the Trust Provisioning Authority’s intent.</t>

<t>This amounts to overriding <xref target="manifest-element-processing-steps">Processing Steps</xref> and <xref target="manifest-element-resource-indicator">Resource Indicator</xref>.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref>, <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref>, <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="user-story-img-current-version" title="USER_STORY.IMG.CURRENT_VERSION: Specify Version Numbers of Target Firmware">

<t>As a Device Operator, I want to be able to target devices for updates based on their current firmware version, so that I can control which versions are replaced with a single manifest.</t>

<t>Satisfied by: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="user-story-img-select" title="USER_STORY.IMG.SELECT: Enable Devices to Choose Between Images">

<t>As a developer, I want to be able to sign two or more versions of my firmware in a single manifest so that I can use a very simple bootloader that chooses between two or more images that are executed in-place.</t>

<t>Satisfied by: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="user-story-exec-mfst" title="USER_STORY.EXEC.MFST: Secure Execution Using Manifests">

<t>As a signer for both secure execution/boot and firmware deployment, I would like to use the same signed document for both tasks so that my data size is smaller, I can share common code, and I can reduce signature verifications.</t>

<t>Satisfied by: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="user-story-exec-decompress" title="USER_STORY.EXEC.DECOMPRESS: Decompress on Load">

<t>As a developer of firmware for a run-from-RAM device, I would like to use compressed images and to indicate to the bootloader that I am using a compressed image in the manifest so that it can be used with secure execution/boot.</t>

<t>Satisfied by: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="user-story-mfst-img" title="USER_STORY.MFST.IMG: Payload in Manifest">

<t>As an operator of devices on a constrained network, I would like the manifest to be able to include a small payload in the same packet so that I can reduce network traffic.</t>

<t>Small payloads may include, for example, wrapped encryption keys, encoded configuration, public keys, <xref target="RFC8392"/> CBOR Web Tokens, or X.509 certificates.</t>

<t>Satisfied by: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="user-story-mfst-parse" title="USER_STORY.MFST.PARSE: Simple Parsing">

<t>As a developer for constrained devices, I want a low complexity library for processing updates so that I can fit more application code on my device.</t>

<t>Satisfied by: <xref target="req-use-parse">REQ.USE.PARSE</xref></t>

</section>
<section anchor="user-story-mfst-delegation" title="USER_STORY.MFST.DELEGATION: Delegated Authority in Manifest">

<t>As a Device Operator that rotates delegated authority more often than delivering firmware updates, I would like to delegate a new authority when I deliver a firmware update so that I can accomplish both tasks in a single transmission.</t>

<t>Satisfied by: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
<section anchor="user-story-mfst-pre-check" title="USER_STORY.MFST.PRE_CHECK: Update Evaluation">

<t>As an operator of a constrained network, I would like devices on my network to be able to evaluate the suitability of an update prior to initiating any large download so that I can prevent unnecessary consumption of bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
</section>
<section anchor="usability-requirements" title="Usability Requirements">

<t>The following usability requirements satisfy the user stories listed above.</t>

<section anchor="req-use-mfst-pre-check" title="REQ.USE.MFST.PRE_CHECK: Pre-Installation Checks">

<t>It MUST be possible for a manifest author to place ALL information required to process an update in the manifest.</t>

<t>For example: Information about which precursor image is required for a differential update MUST be placed in the manifest, not in the differential compression header.</t>

<t>Satisfies: [USER_STORY.MFST.PRE_CHECK(#user-story-mfst-pre-check), <xref target="user-story-install-instructions">USER_STORY.INSTALL.INSTRUCTIONS</xref></t>

<t>Implemented by: <xref target="manifest-element-additional-install-info">Additional installation instructions</xref></t>

</section>
<section anchor="req-use-mfst-override" title="REQ.USE.MFST.OVERRIDE_REMOTE: Override Remote Resource Location">

<t>It MUST be possible to redirect payload fetches. This applies where two manifests are used in conjunction. For example, a Device Operator creates a manifest specifying a payload and signs it, and provides a URI for that payload. A Network Operator creates a second manifest, with a dependency on the first. They use this second manifest to override the URIs provided by the Device Operator, directing them into their own infrastructure instead. Some devices may provide this capability, while others may only look at canonical sources of firmware. For this to be possible, the device must fetch the payload, whereas a device that accepts payload pushes will ignore this feature.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref></t>

<t>Implemented by: <xref target="manifest-element-aliases">Aliases</xref></t>

</section>
<section anchor="req-use-mfst-component" title="REQ.USE.MFST.COMPONENT: Component Updates">

<t>It MUST be possible express the requirement to install one or more payloads from one or more authorities so that a multi-payload update can be described. This allows multiple parties with different permissions to collaborate in creating a single update for the IoT device, across multiple components.</t>

<t>This requirement effectively means that it must be possible to construct a tree of manifests on a multi-image target.</t>

<t>In order to enable devices with a heterogeneous storage architecture, the manifest must enable specification of both storage system and the storage location within that storage system.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="user-story-component">USER_STORY.COMPONENT</xref></t>

<t>Implemented by Manifest Element: Dependencies, StorageIdentifier, ComponentIdentifier</t>

<section anchor="example-1-multiple-microcontrollers" title="Example 1: Multiple Microcontrollers">

<t>An IoT device with multiple microcontrollers in the same physical device (HeSA) will likely require multiple payloads with different component identifiers.</t>

</section>
<section anchor="example-2-code-and-configuration" title="Example 2: Code and Configuration">

<t>A firmware image can be divided into two payloads: code and configuration. These payloads may require authorizations from different actors in order to install (see <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref> and <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref>). This structure means that multiple manifests may be required, with a dependency structure between them.</t>

</section>
<section anchor="example-3-multiple-software-modules" title="Example 3: Multiple Software Modules">

<t>A firmware image can be divided into multiple functional blocks for separate testing and distribution. This means that code would need to be distributed in multiple payloads. For example, this might be desirable in order to ensure that common code between devices is identical in order to reduce distribution bandwidth.</t>

</section>
</section>
<section anchor="req-use-mfst-multi-auth" title="REQ.USE.MFST.MULTI_AUTH: Multiple authentications">

<t>It MUST be possible to authenticate a manifest multiple times so that authorisations from multiple parties with different permissions can be required in order to authorise installation of a manifest.</t>

<t>Satisfies: <xref target="user-story-multi-auth">USER_STORY.MULTI_AUTH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-use-img-format" title="REQ.USE.IMG.FORMAT: Format Usability">

<t>The manifest serialisation MUST accommodate any payload format that an Operator wishes to use. This enables the recipient to detect which format the Operator has chosen. Some examples of payload format are:</t>

<t><list style="symbols">
  <t>Binary</t>
  <t>Elf</t>
  <t>Differential</t>
  <t>Compressed</t>
  <t>Packed configuration</t>
  <t>Intel HEX</t>
  <t>S-Record</t>
</list></t>

<t>Satisfies: <xref target="user-story-img-format">USER_STORY.IMG.FORMAT</xref> <xref target="user-story-img-unknown-format">USER_STORY.IMG.UNKNOWN_FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref></t>

</section>
<section anchor="req-use-img-nested" title="REQ.USE.IMG.NESTED: Nested Formats">

<t>The manifest serialisation MUST accommodate nested formats, announcing to the target device all the nesting steps and any parameters used by those steps.</t>

<t>Satisfies: <xref target="user-story-img-confidentiality">USER_STORY.IMG.CONFIDENTIALITY</xref></t>

<t>Implemented by: <xref target="manifest-element-processing-steps">Processing Steps</xref></t>

</section>
<section anchor="req-use-img-versions" title="REQ.USE.IMG.VERSIONS: Target Version Matching">

<t>The manifest serialisation MUST provide a method to specify multiple version numbers of firmware to which the manifest applies, either with a list or with range matching.</t>

<t>Satisfies: <xref target="user-story-img-current-version">USER_STORY.IMG.CURRENT_VERSION</xref></t>

<t>Implemented by: <xref target="element-required-version">Required Image Version List</xref></t>

</section>
<section anchor="req-use-img-select" title="REQ.USE.IMG.SELECT: Select Image by Destination">

<t>The manifest serialisation MUST provide a mechanism to list multiple equivalent payloads by Execute-In-Place Installation Address, including the payload digest and, optionally, payload URIs.</t>

<t>Satisfies: <xref target="user-story-img-select">USER_STORY.IMG.SELECT</xref></t>

<t>Implemented by: <xref target="manifest-element-xip-address">XIP Address</xref></t>

</section>
<section anchor="req-use-exec" title="REQ.USE.EXEC: Executable Manifest">

<t>It MUST be possible to describe an executable system with a manifest on both Execute-In-Place microcontrollers and on complex operating systems. This requires the manifest to specify the digest of each statically linked dependency. In addition, the manifest serialisation MUST be able to express metadata, such as a kernel command-line, used by any loader or bootloader.</t>

<t>Satisfies: <xref target="user-story-exec-mfst">USER_STORY.EXEC.MFST</xref></t>

<t>Implemented by: <xref target="manifest-element-exec-metadata">Run-time metadata</xref></t>

</section>
<section anchor="req-use-load" title="REQ.USE.LOAD: Load-Time Information">

<t>It MUST be possible to specify additional metadata for load time processing of a payload, such as cryptographic information, load-address, and compression algorithm.</t>

<t>N.B. load comes before exec/boot.</t>

<t>Satisfies: <xref target="user-story-exec-decompress">USER_STORY.EXEC.DECOMPRESS</xref></t>

<t>Implemented by: <xref target="manifest-element-load-metadata">Load-time metadata</xref></t>

</section>
<section anchor="req-use-payload" title="REQ.USE.PAYLOAD: Payload in Manifest Superstructure">

<t>It MUST be possible to place a payload in the same structure as the manifest. This MAY place the payload in the same packet as the manifest.</t>

<t>Integrated payloads may include, for example, wrapped encryption keys, encoded configuration, public keys, <xref target="RFC8392"/> CBOR Web Tokens, or X.509 certificates.</t>

<t>When an integrated payload is provided, this increases the size of the manifest. Manifest size can cause several processing and storage concerns that require careful consideration. The payload can prevent the whole manifest from being contained in a single network packet, which can cause fragmentation and the loss of portions of the manifest in lossy networks. This causes the need for reassembly and retransmission logic. The manifest must be held immutable between verification and processing (see <xref target="req-sec-mfst-const">REQ.SEC.MFST.CONST</xref>), so a larger manifest will consume more memory with immutability guarantees, for example internal RAM or NVRAM, or external secure memory. If the manifest exceeds the available immutable memory, then it must be processed modularly, evaluating each of: delegation chains, the security container, and the actual manifest, which includes verifying the integrated payload. If the security model calls for downloading the manifest and validating it before storing to NVRAM in order to prevent wear to NVRAM and energy expenditure in NVRAM, then either increasing memory allocated to manifest storage or modular processing of the received manifest may be required. While the manifest has been organised to enable this type of processing, it creates additional complexity in the parser. If the manifest is stored in NVRAM prior to processing, the integrated payload may cause the manifest to exceed the available storage. Because the manifest is received prior to validation of applicability, authority, or correctness, integrated payloads cause the recipient to expend network bandwidth and energy that may not be required if the manifest is discarded and these costs vary with the size of the integrated payload.</t>

<t>See also: <xref target="req-sec-mfst-const">REQ.SEC.MFST.CONST</xref>.</t>

<t>Satisfies: <xref target="user-story-mfst-img">USER_STORY.MFST.IMG</xref></t>

<t>Implemented by: <xref target="manifest-element-payload">Payload</xref></t>

</section>
<section anchor="req-use-parse" title="REQ.USE.PARSE: Simple Parsing">

<t>The structure of the manifest MUST be simple to parse, without need for a general-purpose parser.</t>

<t>Satisfies: <xref target="user-story-mfst-parse">USER_STORY.MFST.PARSE</xref></t>

<t>Implemented by: N/A</t>

</section>
<section anchor="req-use-delegation" title="REQ.USE.DELEGATION: Delegation of Authority in Manifest">

<t>Any serialisation MUST enable the delivery of a key claim with, but not authenticated by, a manifest. This key claim delivers a new key with which the recipient can verify the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-delegation">USER_STORY.MFST.DELEGATION</xref></t>

<t>Implemented by: <xref target="manifest-element-key-claims">Key Claims</xref></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank our working group chairs, Dave Thaler, Russ Housley and David Waltermire, for their review comments and their support.</t>

<t>We would like to thank the participants of the 2018 Berlin SUIT Hackathon and the June 2018 virtual design team meetings for their discussion input.
In particular, we would like to thank Koen Zandberg, Emmanuel Baccelli, Carsten Bormann, David Brown, Markus Gueller, Frank Audun Kvamtro, Oyvind Ronningstad, Michael Richardson, Jan-Frederik Rieckers, Francisco Acosta, Anton Gerasimov, Matthias Waehlisch, Max Groening, Daniel Petry, Gaetan Harter, Ralph Hamm, Steve Patrick, Fabio Utzig, Paul Lambert, Benjamin Kaduk, Said Gharout, and Milen Stoychev.</t>

<t>We would like to thank those who contributed to the development of this information model. In particular, we would like to thank Milosch Meriac, Jean-Luc Giraud, Dan Ros, Amyas Philips, and Gary Thomson.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='November' day='19' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-08.txt' />
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="STRIDE" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx">
  <front>
    <title>The STRIDE Threat Model</title>
    <author >
      <organization>Microsoft</organization>
    </author>
    <date year="2018" month="May"/>
  </front>
  <format type="HTML" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx"/>
</reference>




<reference  anchor="RFC5652" target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2009' month='September' />
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>




    </references>


<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

