<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-information-model-04" category="std">

  <front>
    <title abbrev="A Firmware Manifest Information Model">An Information Model for Firmware Updates in IoT Devices</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="October" day="18"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality</t>

<t>One component of such a firmware update is a concise and machine-processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The information model describes all the information elements required to secure firmware updates of IoT devices from the threats described in <xref target="threat-model"/> and enables the user stories captured in <xref target="user-stories"/>. These threats and user stories are not intended to be an exhaustive list of the threats against IoT devices, nor of the possible user stories that describe how to conduct a firmware update. Instead they are intended to describe the threats against firmware updates in isolation and provide sufficient motivation to specify the information elements that cover a wide range of user stories. The information model does not define the serialization, encoding, ordering, or structure of information elements, only their semantics.</t>

<t>Because the information model covers a wide range of user stories and a wide range of threats, not all information elements apply to all scenarios. As a result, various information elements could be considered optional to implement and optional to use, depending on which threats exist in a particular domain of application and which user stories are required. Elements marked as mandatory provide baseline security and usability properties that are expected to be required for most applications. Those elements are mandatory to implement and mandatory to use. Elements marked as recommended provide important security or usability properties that are needed on most devices. Elements marked as optional enable security or usability properties that are useful in some applications.</t>

<t>The definition of some of the information elements include examples that illustrate their semantics and how they are intended to be used.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>This document uses terms defined in <xref target="I-D.ietf-suit-architecture"/>.
The term ‘Operator’ refers to both Device and Network Operator.</t>

<t>This document treats devices with a homogeneous storage architecture as devices with a heterogeneous storage architecture, but with a single storage subsystem.</t>

<section anchor="requirements-notation" title="Requirements Notation">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="manifest-information-elements" title="Manifest Information Elements">

<t>Each manifest information element is anchored in a security requirement or a usability requirement. The manifest elements are described below, justified by their requirements.</t>

<section anchor="element-version-id" title="Manifest Element: Version ID of the manifest structure">

<t>An identifier that describes which iteration of the manifest format is contained in the structure.</t>

<t>This element is MANDATORY and MUST be present in order to allow devices to identify the version of the manifest data model that is in use.</t>

</section>
<section anchor="element-sequence-number" title="Manifest Element: Monotonic Sequence Number">

<t>A monotonically increasing sequence number. For convenience, the monotonic sequence number MAY be a UTC timestamp. This allows global synchronisation of sequence numbers without any additional management. This number MUST be easily accessible so that code choosing one out of several manifests can choose which is the latest.</t>

<t>This element is MANDATORY and is necessary to prevent malicious actors from reverting a firmware update against the policies of the relevant authority.</t>

<t>Implements: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="element-vendor-id" title="Manifest Element: Vendor ID">

<t>Vendor IDs must be unique. This is to prevent similarly, or identically named entities from different geographic regions from colliding in their customer’s infrastructure. Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with the vendor’s domain name and the DNS name space ID. Other options include type 1 and type 4 UUIDs.</t>

<t>Vendor ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of a Vendor ID is RECOMMENDED. It helps to distinguish between identically named products from different vendors.</t>

<t>Implements: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-domain-name-based-uuids" title="Example: Domain Name-based UUIDs">

<t>Vendor A creates a UUID based on their domain name:</t>

<t>vendorId = UUID5(DNS, “vendor-a.com”)</t>

<t>Because the DNS infrastructure prevents multiple registrations of the same domain name, this UUID is (with very high probability) guaranteed to be unique. Because the domain name is known, this UUID is reproducible. Type 1 and type 4 UUIDs produce similar guarantees of uniqueness, but not reproducibility.</t>

<t>This approach creates a contention when a vendor changes its name or relinquishes control of a domain name. In this scenario, it is possible that another vendor would start using that same domain name. However, this UUID is not proof of identity; a device’s trust in a vendor must be anchored in a cryptographic key, not a UUID.</t>

</section>
</section>
<section anchor="element-class-id" title="Manifest Element: Class ID">

<t>A device “Class” is a set of different device types that can accept the same firmware update without modification. Class IDs MUST be unique within the scope of a Vendor ID. This is to prevent similarly, or identically named devices colliding in their customer’s infrastructure.</t>

<t>Recommended practice is to use <xref target="RFC4122"/> version 5 UUIDs with as much information as necessary to define firmware compatibility. Possible information used to derive the class UUID includes:</t>

<t><list style="symbols">
  <t>model name or number</t>
  <t>hardware revision</t>
  <t>runtime library version</t>
  <t>bootloader version</t>
  <t>ROM revision</t>
  <t>silicon batch number</t>
</list></t>

<t>The Class Identifier UUID SHOULD use the Vendor ID as the name space ID. Other options include version 1 and 4 UUIDs. Classes MAY be more granular than is required to identify firmware compatibility. Classes MUST NOT be less granular than is required to identify firmware compatibility. Devices MAY have multiple Class IDs.</t>

<t>Class ID is not intended to be a human-readable element. It is intended for binary match/mismatch comparison only.</t>

<t>The use of Class ID is RECOMMENDED. It allows devices to determine applicability of a firmware in an unambiguous way.</t>

<t>If Class ID is not implemented, then each logical device class MUST use a unique trust anchor for authorisation.</t>

<t>Implements: Security Requirement <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref>, <xref target="req-sec-authentic-compatibility">REQ.SEC.AUTH.COMPATIBILITY</xref>.</t>

<section anchor="example-1-different-classes" title="Example 1: Different Classes">

<t>Vendor A creates product Z and product Y. The firmware images of products Z and Y are not interchangeable. Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>ZclassId = UUID5(vendorId, “Product Z”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
</list></t>

<t>This ensures that Vendor A’s Product Z cannot install firmware for Product Y and Product Y cannot install firmware for Product Z.</t>

</section>
<section anchor="example-2-upgrading-class-id" title="Example 2: Upgrading Class ID">

<t>Vendor A creates product X. Later, Vendor A adds a new feature to product X, creating product X v2. Product X requires a firmware update to work with firmware intended for product X v2.</t>

<t>Vendor A creates UUIDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>Xv2classId = UUID5(vendorId, “Product X v2”)</t>
</list></t>

<t>When product X receives the firmware update necessary to be compatible with product X v2, part of the firmware update changes the class ID to Xv2classId.</t>

</section>
<section anchor="example-3-shared-functionality" title="Example 3: Shared Functionality">

<t>Vendor A produces two products, product X and product Y. These components share a common core (such as an operating system), but have different applications. The common core and the applications can be updated independently. To enable X and Y to receive the same common core update, they require the same class ID. To ensure that only product X receives application X and only product Y receives application Y, product X and product Y must have different class IDs. The vendor creates Class IDs as follows:</t>

<t><list style="symbols">
  <t>vendorId = UUID5(DNS, “vendor-a.com”)</t>
  <t>XclassId = UUID5(vendorId, “Product X”)</t>
  <t>YclassId = UUID5(vendorId, “Product Y”)</t>
  <t>CommonClassId = UUID5(vendorId, “common core”)</t>
</list></t>

<t>Product X matches against both XclassId and CommonClassId. Product Y matches against both YclassId and CommonClassId.</t>

</section>
</section>
<section anchor="element-precursor-digest" title="Manifest Element: Precursor Image Digest Condition">

<t>When a precursor image is required by the payload format, a precursor image digest condition MUST be present in the conditions list. The precursor image may be installed or stored as a candidate.</t>

<t>This element is OPTIONAL to implement.</t>

<t>Enables feature: differential updates.</t>

<t>Implements: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="element-required-version" title="Manifest Element: Required Image Version List">

<t>When a payload applies to multiple versions of a firmware, the required image version list specifies which versions must be present for the update to be applied. This allows the update author to target specific versions of firmware for an update, while excluding those to which it should not be applied.</t>

<t>Where an update can only be applied over specific predecessor versions, that version MUST be specified by the Required Image Version List.</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="manifest-element-expiration" title="Manifest Element: Expiration Time">

<t>This element tells a device the time at which the manifest expires and should no longer be used. This is only usable in conjunction with a secure source of time.</t>

<t>This element is OPTIONAL and MAY enable user stories where a secure source of time is provided and firmware is intended to expire predictably.</t>

<t>Implements: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="manifest-element-format" title="Manifest Element: Payload Format">

<t>The format of the payload MUST be indicated to devices in an unambiguous way. This element provides a mechanism to describe the payload format, within the signed metadata.</t>

<t>This element is MANDATORY and MUST be present to enable devices to decode payloads correctly.</t>

<t>Implements: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref>, <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="manifest-element-processing-steps" title="Manifest Element: Processing Steps">

<t>A representation of the Processing Steps required to decode a payload. The representation MUST describe which algorithm(s) is used and any additional parameters required by the algorithm(s). The representation MAY group Processing Steps together in predefined combinations.</t>

<t>A Processing Step MAY indicate the expected digest of the payload after the processing is complete.</t>

<t>Processing steps are RECOMMENDED to implement.</t>

<t>Enables feature: Encrypted, compressed, packed formats</t>

<t>Implements: <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref></t>

</section>
<section anchor="maniest-element-storage-location" title="Manifest Element: Storage Location">

<t>This element tells the device where to store a payload within a given component. The device can use this to establish which permissions are necessary and the physical storage location to use.</t>

<t>This element is MANDATORY and MUST be present to enable devices to store payloads to the correct location.</t>

<t>Implements: <xref target="req-sec-authentic-image-location">REQ.SEC.AUTH.IMG_LOC</xref></t>

<section anchor="example-1-two-storage-locations" title="Example 1: Two Storage Locations">

<t>A device supports two components: an OS and an application. These components can be updated independently, expressing dependencies to ensure compatibility between the components. The Author chooses two storage identifiers:</t>

<t><list style="symbols">
  <t>“OS”</t>
  <t>“APP”</t>
</list></t>

</section>
<section anchor="example-2-file-system" title="Example 2: File System">

<t>A device supports a full filesystem. The Author chooses to use the storage identifier as the path at which to install the payload. The payload may be a tarball, in which case, it unpacks the tarball into the specified path.</t>

</section>
<section anchor="example-3-flash-memory" title="Example 3: Flash Memory">

<t>A device supports flash memory. The Author chooses to make the storage identifier the offset where the image should be written.</t>

</section>
</section>
<section anchor="manifest-element-component-identifier" title="Manifest Element: Component Identifier">

<t>In a heterogeneous storage architecture, a storage identifier is insufficient to identify where and how to store a payload. To resolve this, a component identifier indicates which part of the storage architecture is targeted by the payload. In a homogeneous storage architecture, this element is unnecessary.</t>

<t>This element is OPTIONAL and only necessary in heterogeneous storage architecture devices.</t>

<t>N.B. A serialisation MAY choose to combine Component Identifier and <xref target="maniest-element-storage-location">Storage Location</xref></t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-resource-indicator" title="Manifest Element: Resource Indicator">

<t>This element provides the information required for the device to acquire the resource. This can be encoded in several ways:</t>

<t><list style="symbols">
  <t>One URI</t>
  <t>A list of URIs</t>
  <t>A prioritised list of URIs</t>
  <t>A list of signed URIs</t>
</list></t>

<t>This element is OPTIONAL and only needed when the target device does not intrinsically know where to find the payload.</t>

<t>N.B. Devices will typically require URIs.</t>

<t>Implements: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="manifest-element-payload-digest" title="Manifest Element: Payload Digests">

<t>This element contains one or more digests of one or more payloads. This allows the target device to ensure authenticity of the payload(s). A serialisation MUST provide a mechanism to select one payload from a list based on system parameters, such as Execute-In-Place Installation Address.</t>

<t>This element is MANDATORY to implement and fundamentally necessary to ensure the authenticity and integrity of the payload. Support for more than one digest is OPTIONAL to implement in a recipient device.</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-size" title="Manifest Element: Size">

<t>The size of the payload in bytes.</t>

<t>Variable-size storage locations MUST be set to exactly the size listed in this element.</t>

<t>This element is MANDATORY and informs the target device how big of a payload to expect. Without it, devices are exposed to some classes of denial of service attack.</t>

<t>Implements: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="manifest-element-signature" title="Manifest Element: Signature">

<t>This is not strictly a manifest element. Instead, the manifest is wrapped by a standardised authentication container, such as a COSE (<xref target="RFC8152"/>) or CMS (<xref target="RFC5652"/>) signature object. The authentication container MUST support multiple actors and multiple authentication methods.</t>

<t>This element is MANDATORY and represents the foundation of all security properties of the manifest. There are two exceptions to this requirement: 1) if the manifest is authenticated by a second manifest as a dependency and 2) if the manifest is authenticated by channel security and contains only channel information (such as URIs).</t>

<t>Implements: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref></t>

</section>
<section anchor="manifest-element-additional-install-info" title="Manifest Element: Additional installation instructions">

<t>Instructions that the device should execute when processing the manifest. This information is distinct from the information necessary to process a payload. Additional installation instructions include information such as update timing (for example, install only on Sunday, at 0200), procedural considerations (for example, shut down the equipment under control before executing the update), pre- and post-installation steps (for example, run a script).</t>

<t>This element is OPTIONAL.</t>

<t>Implements: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="manifest-element-aliases" title="Manifest Element: Aliases">

<t>A mechanism for a manifest to augment or replace URIs or URI lists defined by one or more of its dependencies.</t>

<t>This element is OPTIONAL and enables some user stories.</t>

<t>Implements: <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="manifest-element-dependencies" title="Manifest Element: Dependencies">

<t>A list of other manifests that are required by the current manifest. Manifests are identified an unambiguous way, such as a digest.</t>

<t>This element is MANDATORY to use in deployments that include both multiple authorities and multiple payloads.</t>

<t>Implements: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="manifest-element-encryption-wrapper" title="Manifest Element: Encryption Wrapper">

<t>Encrypting firmware images requires symmetric content encryption keys. The encryption wrapper provides the information needed for a device to obtain or locate a key that it uses to decrypt the firmware. Typical choices for an encryption wrapper include CMS (<xref target="RFC5652"/>) or COSE (<xref target="RFC8152"/>). This MAY be included in a decryption step contained in <xref target="manifest-element-processing-steps">Processing Steps</xref>.</t>

<t>This element is MANDATORY to use for encrypted payloads,</t>

<t>Implements: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="manifest-element-xip-address" title="Manifest Element: XIP Address">

<t>In order to support XIP systems with multiple possible base addresses, it is necessary to specify which address the payload is linked for.</t>

<t>For example a microcontroller may have a simple bootloader that chooses one of two images to boot. That microcontroller then needs to choose one of two firmware images to install, based on which of its two images is older.</t>

<t>Implements: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="manifest-element-load-metadata" title="Manifest Element: Load-time metadata">

<t>Load-time metadata provides the device with information that it needs in order to load one or more images. This is effectively a copy operation from the permanent storage location of an image into the active use location of that image. The metadata contains the source and destination of the image as well as any operations that are performed on the image.</t>

<t>Implements: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="manifest-element-exec-metadata" title="Manifest Element: Run-time metadata">

<t>Run-time metadata provides the device with any extra information needed to boot the device. This may include information such as the entry-point of an XIP image or the kernel command-line of a Linux image.</t>

<t>Implements: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="manifest-element-payload" title="Manifest Element: Payload">

<t>The Payload element provides a recipient device with the whole payload, contained within the manifest superstructure. This enables the manifest and payload to be delivered simultaneously.</t>

<t>Implements: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="manifest-element-key-claims" title="Manifest Element: Key Claims">

<t>The Key Claims element is not authenticated by the <xref target="manifest-element-signature">Signature</xref>, instead, it provides a chain of key delegations (or references to them) for the device to follow in order to verify the key that authenticated the manifest using a trusted key.</t>

<t>Implements: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
</section>
<section anchor="design-motivation" title="Security Considerations">
<t>The following sub-sections describe the threat model, user stories, security requirements, and usability requirements. This section also provides the motivations for each of the manifest information elements.</t>

<section anchor="threat-model" title="Threat Model">

<t>The following sub-sections aim to provide information about the threats that were considered, the security requirements that are derived from those threats and the fields that permit implementation of the security requirements. This model uses the S.T.R.I.D.E. <xref target="STRIDE"/> approach. Each threat is classified according to:</t>

<t><list style="symbols">
  <t>Spoofing identity</t>
  <t>Tampering with data</t>
  <t>Repudiation</t>
  <t>Information disclosure</t>
  <t>Denial of service</t>
  <t>Elevation of privilege</t>
</list></t>

<t>This threat model only covers elements related to the transport of firmware updates. It explicitly does not cover threats outside of the transport of firmware updates. For example, threats to an IoT device due to physical access are out of scope.</t>

</section>
<section anchor="threat-descriptions" title="Threat Descriptions">

<section anchor="threat-expired" title="THREAT.IMG.EXPIRED: Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker sends an old, but valid manifest with an old, but valid firmware image to a device. If there is a known vulnerability in the provided firmware image, this may allow an attacker to exploit the vulnerability and gain control of the device.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-sequence">REQ.SEC.SEQUENCE</xref></t>

</section>
<section anchor="threat-expired-rollback" title="THREAT.IMG.EXPIRED.ROLLBACK : Offline device + Old Firmware">

<t>Classification: Elevation of Privilege</t>

<t>An attacker targets a device that has been offline for a long time and runs an old firmware version. The attacker sends an old, but valid manifest to a device with an old, but valid firmware image. The attacker-provided firmware is newer than the installed one but older than the most recently available firmware. If there is a known vulnerability in the provided firmware image then this may allow an attacker to gain control of a device. Because the device has been offline for a long time, it is unaware of any new updates. As such it will treat the old manifest as the most current.</t>

<t>Threat Escalation: If the attacker is able to exploit the known vulnerability, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-exp">REQ.SEC.EXP</xref></t>

</section>
<section anchor="threat-incompatible" title="THREAT.IMG.INCOMPATIBLE: Mismatched Firmware">

<t>Classification: Denial of Service</t>

<t>An attacker sends a valid firmware image, for the wrong type of device, signed by an actor with firmware installation permission on both types of device. The firmware is verified by the device positively because it is signed by an actor with the appropriate permission. This could have wide-ranging consequences. For devices that are similar, it could cause minor breakage, or expose security vulnerabilities. For devices that are very different, it is likely to render devices inoperable.</t>

<t>Mitigated by: <xref target="req-sec-compatible">REQ.SEC.COMPATIBLE</xref></t>

<section anchor="example" title="Example:">

<t>Suppose that two vendors, Vendor A and Vendor B, adopt the same trade name in different geographic regions, and they both make products with the same names, or product name matching is not used. This causes firmware from Vendor A to match devices from Vendor B.</t>

<t>If the vendors are the firmware authorities, then devices from Vendor A will reject images signed by Vendor B since they use different credentials. However, if both devices trust the same Author, then, devices from Vendor A could install firmware intended for devices from Vendor B.</t>

</section>
</section>
<section anchor="threat-img-format" title="THREAT.IMG.FORMAT: The target device misinterprets the type of payload">

<t>Classification: Denial of Service</t>

<t>If a device misinterprets the format of the firmware image, it may cause a device to install a firmware image incorrectly. An incorrectly installed firmware image would likely cause the device to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received firmware image may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_TYPE</xref></t>

</section>
<section anchor="threat-img-location" title="THREAT.IMG.LOCATION: The target device installs the payload to the wrong location">

<t>Classification: Denial of Service</t>

<t>If a device installs a firmware image to the wrong location on the device, then it is likely to break. For example, a firmware image installed as an application could cause a device and/or an application to stop functioning.</t>

<t>Threat Escalation: An attacker that can cause a device to misinterpret the received code may gain elevation of privilege and potentially expand this to all types of threat.</t>

<t>Mitigated by: <xref target="req-sec-authentic-image-type">REQ.SEC.AUTH.IMG_LOC</xref></t>

</section>
<section anchor="threat-net-redirect" title="THREAT.NET.REDIRECT: Redirection to inauthentic payload hosting">

<t>Classification: Denial of Service</t>

<t>If a device does not know where to obtain the payload for an update, it may be redirected to an attacker’s server. This would allow an attacker to provide broken payloads to devices.</t>

<t>Mitigated by: <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref></t>

</section>
<section anchor="threat-net-mitm" title="THREAT.NET.MITM: Traffic interception">

<t>Classification: Spoofing Identity, Tampering with Data</t>

<t>An attacker intercepts all traffic to and from a device. The attacker can monitor or modify any data sent to or received from the device. This can take the form of: manifests, payloads, status reports, and capability reports being modified or not delivered to the intended recipient. It can also take the form of analysis of data sent to or from the device, either in content, size, or frequency.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref>, <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref>, <xref target="req-sec-authenticated-remote-resource">REQ.SEC.AUTH.REMOTE_LOC</xref>, <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref>, <xref target="req-sec-reporting">REQ.SEC.REPORTING</xref></t>

</section>
<section anchor="threat-image-replacement" title="THREAT.IMG.REPLACE: Payload Replacement">

<t>Classification: Elevation of Privilege</t>

<t>An attacker replaces a newly downloaded firmware after a device finishes verifying a manifest. This could cause the device to execute the attacker’s code. This attack likely requires physical access to the device. However, it is possible that this attack is carried out in combination with another threat that allows remote execution. This is a typical Time Of Check/Time Of Use threat.</t>

<t>Threat Escalation: If the attacker is able to exploit a known
vulnerability, or if the attacker can supply their own firmware, then this threat can be escalated to ALL TYPES.</t>

<t>Mitigated by: <xref target="req-sec-authentic-execution">REQ.SEC.AUTH.EXEC</xref></t>

</section>
<section anchor="threat-img-unauthenticated" title="THREAT.IMG.NON_AUTH: Unauthenticated Images">

<t>Classification: Elevation of Privilege / All Types</t>

<t>If an attacker can install their firmware on a device, by manipulating either payload or metadata, then they have complete control of the device.</t>

<t>Mitigated by: <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref></t>

</section>
<section anchor="threat-upd-wrong-precursor" title="THREAT.UPD.WRONG_PRECURSOR: Unexpected Precursor images">

<t>Classification: Denial of Service / All Types</t>

<t>An attacker sends a valid, current manifest to a device that has an unexpected precursor image. If a payload format requires a precursor image (for example, delta updates) and that precursor image is not available on the target device, it could cause the update to break.</t>

<t>An attacker that can cause a device to install a payload against the wrong precursor image could gain elevation of privilege and potentially expand this to all types of threat. However, it is unlikely that a valid differential update applied to an incorrect precursor would result in a functional, but vulnerable firmware.</t>

<t>Mitigated by: <xref target="req-sec-authentic-precursor">REQ.SEC.AUTH.PRECURSOR</xref></t>

</section>
<section anchor="threat-upd-interop" title="THREAT.UPD.INTEROP: Unqualified Firmware">

<t>Classification: Denial of Service, Elevation of Privilege</t>

<t>This threat can appear in several ways, however it is ultimately about interoperability of devices with other systems. The owner or operator of a system of two or more interoperating devices needs to approve firmware for their system in order to ensure interoperability with other devices in the system. If the firmware is not qualified, it may not work. Therefore, if a device installs firmware without the approval of the device owner or operator, this is a threat to devices.</t>

<t>Similarly, the operator of a network may need to approve firmware for devices attached to the network in order to ensure favourable operating conditions within the network. If the firmware is not qualified, it may degrade the performance of the network. Therefore, if a device installs firmware without the approval of the network operator, this is a threat to the network itself.</t>

<t>Threat Escalation: If the firmware expects configuration that is present in devices deployed in Network A, but not in devices deployed in Network B, then the device may experience degraded security, leading to threats of All Types.</t>

<t>Mitigated by: <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

<section anchor="example-1-multiple-network-operators-with-a-single-device-operator" title="Example 1: Multiple Network Operators with a Single Device Operator">

<t>In this example, assume that Device Operators expect the rights to create firmware but that Network Operators expect the rights to qualify firmware as fit-for-purpose on their networks. Additionally, assume that Device Operators manage devices that can be deployed on any network, including Network A and B in our example.</t>

<t>An attacker may obtain a manifest for a device on Network A. Then, this attacker sends that manifest to a device on Network B. Because Network A and Network B are under control of different Operators, and the firmware for a device on Network A has not been qualified to be deployed on Network B, the target device on Network B is now in violation of the Operator B’s policy and may be disabled by this unqualified, but signed firmware.</t>

<t>This is a denial of service because it can render devices inoperable. This is an elevation of privilege because it allows the attacker to make installation decisions that should be made by the Operator.</t>

</section>
<section anchor="example-2-single-network-operator-with-multiple-device-operators" title="Example 2: Single Network Operator with Multiple Device Operators">

<t>Multiple devices that interoperate are used on the same network and communicate with each other. Some devices are manufactured and managed by Device Operator A and other devices by Device Operator B. A new firmware is released by Device Operator A that breaks compatibility with devices from Device Operator B. An attacker sends the new firmware to the devices managed by Device Operator A without approval of the Network Operator. This breaks the behaviour of the larger system causing denial of service and possibly other threats. Where the network is a distributed SCADA system, this could cause misbehaviour of the process that is under control.</t>

</section>
</section>
<section anchor="threat-img-disclosure" title="THREAT.IMG.DISCLOSURE: Reverse Engineering Of Firmware Image for Vulnerability Analysis">

<t>Classification: All Types</t>

<t>An attacker wants to mount an attack on an IoT device. To prepare the attack he or she retrieves the provided firmware image and performs reverse engineering of the firmware image to analyze it for specific vulnerabilities.</t>

<t>Mitigated by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-mfst-override" title="THREAT.MFST.OVERRIDE: Overriding Critical Manifest Elements">

<t>Classification: Elevation of Privilege</t>

<t>An authorised actor, but not the Author, uses an override mechanism (<xref target="user-story-override">USER_STORY.OVERRIDE</xref>) to change an information element in a manifest signed by the Author. For example, if the authorised actor overrides the digest and URI of the payload, the actor can replace the entire payload with a payload of their choice.</t>

<t>Threat Escalation: By overriding elements such as payload installation instructions or firmware digest, this threat can be escalated to all types.</t>

<t>Mitigated by: <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="threat-mfst-exposure" title="THREAT.MFST.EXPOSURE: Confidential Manifest Element Exposure">

<t>Classification: Information Disclosure</t>

<t>A third party may be able to extract sensitive information from the manifest.</t>

<t>Mitigated by: <xref target="req-sec-mfst-confidentiality">REQ.SEC.MFST.CONFIDENTIALITY</xref></t>

</section>
<section anchor="threat-img-extra" title="THREAT.IMG.EXTRA: Extra data after image">

<t>Classification: All Types</t>

<t>If a third party modifies the image so that it contains extra code after a valid, authentic image, that third party can then use their own code in order to make better use of an existing vulnerability.</t>

<t>Mitigated by: <xref target="req-sec-img-complete-digest">REQ.SEC.IMG.COMPLETE_DIGEST</xref></t>

</section>
<section anchor="threat-key-exposure" title="THREAT.KEY.EXPOSURE: Exposure of signing keys">

<t>Classification: All Types</t>

<t>If a third party obtains a key or even indirect access to a key, for example in an HSM, then they can perform the same actions as the legitimate owner of the key. If the key is trusted for firmware update, then the third party can perform firmware updates as though they were the legitimate owner of the key.</t>

<t>For example, if manifest signing is performed on a server connected to the internet, an attacker may compromise the server and then be able to sign manifests, even if the keys for manifest signing are held in an HSM that is accessed by the server.</t>

<t>Mitigated by: <xref target="req-sec-key-protection">REQ.SEC.KEY.PROTECTION</xref></t>

</section>
<section anchor="threat-mfst-modification" title="THREAT.MFST.MODIFICATION: Modification of manifest or payload prior to signing">

<t>Classification: All Types</t>

<t>If an attacker can alter a manifest or payload before it is signed, they can perform all the same actions as the manifest author. This allows the attacker to deploy firmware updates to any devices that trust the manifest author. If an attacker can modify the code of a payload before the corresponding manifest is created, they can insert their own code. If an attacker can modify the manifest before it is signed, they can redirect the manifest to their own payload.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that watches manifest creation activities and inserts code into any binary that is referenced by a manifest.</t>

<t>For example, the attacker deploys malware to the developer’s computer or signing service that replaces the referenced binary (digest) and URI with the attacker’s binary (digest) and URI.</t>

<t>Mitigated by: <xref target="req-sec-mfst-check">REQ.SEC.MFST.CHECK</xref>, <xref target="req-sec-mfst-trusted">REQ.SEC.MFST.TRUSTED</xref></t>

</section>
</section>
<section anchor="security-requirements" title="Security Requirements">

<t>The security requirements here are a set of policies that mitigate the threats described in <xref target="threat-model"/>.</t>

<section anchor="req-sec-sequence" title="REQ.SEC.SEQUENCE: Monotonic Sequence Numbers">

<t>Only an actor with firmware installation authority is permitted to decide when device firmware can be installed. To enforce this rule, manifests MUST contain monotonically increasing sequence numbers. Manifests MAY use UTC epoch timestamps to coordinate monotonically increasing sequence numbers across many actors in many locations. If UTC epoch timestamps are used, they MUST NOT be treated as times, they MUST be treated only as sequence numbers. Devices MUST reject manifests with sequence numbers smaller than any onboard sequence number.</t>

<t>Note: This is not a firmware version. It is a manifest sequence number. A firmware version may be rolled back by creating a new manifest for the old firmware version with a later sequence number.</t>

<t>Mitigates: <xref target="threat-expired">THREAT.IMG.EXPIRED</xref></t>

<t>Implemented by: <xref target="element-sequence-number">Monotonic Sequence Number</xref></t>

</section>
<section anchor="req-sec-compatible" title="REQ.SEC.COMPATIBLE: Vendor, Device-type Identifiers">

<t>Devices MUST only apply firmware that is intended for them. Devices MUST know with fine granularity that a given update applies to their vendor, model, hardware revision, software revision. Human-readable identifiers are often error-prone in this regard, so unique identifiers SHOULD be used.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented by: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-exp" title="REQ.SEC.EXP: Expiration Time">

<t>Firmware MAY expire after a given time. Devices MAY provide a secure clock (local or remote). If a secure clock is provided and the Firmware manifest has an expiration timestamp, the device MUST reject the manifest if current time is later than the expiration time.</t>

<t>Mitigates: <xref target="threat-expired-rollback">THREAT.IMG.EXPIRED.ROLLBACK </xref></t>

<t>Implemented by: <xref target="manifest-element-expiration">Expiration Time</xref></t>

</section>
<section anchor="req-sec-authentic" title="REQ.SEC.AUTHENTIC: Cryptographic Authenticity">

<t>The authenticity of an update MUST be demonstrable. Typically, this means that updates must be digitally authenticated. Because the manifest contains information about how to install the update, the manifest’s authenticity MUST also be demonstrable. To reduce the overhead required for validation, the manifest contains the digest of the firmware image, rather than a second digital signature. The authenticity of the manifest can be verified with a digital signature or Message Authentication Code. The authenticity of the firmware image is tied to the manifest by the use of a digest of the firmware image.</t>

<t>Mitigates: <xref target="threat-img-unauthenticated">THREAT.IMG.NON_AUTH</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref>, <xref target="manifest-element-payload-digest">Payload Digest</xref></t>

</section>
<section anchor="req-sec-authentic-image-type" title="REQ.SEC.AUTH.IMG_TYPE: Authenticated Payload Type">

<t>The type of payload (which may be independent of format) MUST be authenticated. For example, the target must know whether the payload is XIP firmware, a loadable module, or serialized configuration data.</t>

<t>Mitigates: <xref target="threat-img-format">THREAT.IMG.FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref>, <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authentic-image-location" title="Security Requirement REQ.SEC.AUTH.IMG_LOC: Authenticated Storage Location">

<t>The location on the target where the payload is to be stored MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-img-location">THREAT.IMG.LOCATION</xref></t>

<t>Implemented by: <xref target="maniest-element-storage-location">Storage Location</xref></t>

</section>
<section anchor="req-sec-authenticated-remote-resource" title="REQ.SEC.AUTH.REMOTE_LOC: Authenticated Remote Resource Location">

<t>The location where a target should find a payload MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-net-redirect">THREAT.NET.REDIRECT</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-resource-indicator">Resource Indicator</xref></t>

</section>
<section anchor="req-sec-authentic-execution" title="REQ.SEC.AUTH.EXEC: Secure Execution">

<t>The target SHOULD verify firmware at time of boot. This requires authenticated payload size, and digest.</t>

<t>Mitigates: <xref target="threat-image-replacement">THREAT.IMG.REPLACE</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digest</xref>, <xref target="manifest-element-size">Size</xref></t>

</section>
<section anchor="req-sec-authentic-precursor" title="REQ.SEC.AUTH.PRECURSOR: Authenticated precursor images">

<t>If an update uses a differential compression method, it MUST specify the digest of the precursor image and that digest MUST be authenticated.</t>

<t>Mitigates: <xref target="threat-upd-wrong-precursor">THREAT.UPD.WRONG_PRECURSOR</xref></t>

<t>Implemented by: <xref target="element-precursor-digest">Precursor Image Digest</xref></t>

</section>
<section anchor="req-sec-authentic-compatibility" title="REQ.SEC.AUTH.COMPATIBILITY: Authenticated Vendor and Class IDs">

<t>The identifiers that specify firmware compatibility MUST be authenticated to ensure that only compatible firmware is installed on a target device.</t>

<t>Mitigates: <xref target="threat-incompatible">THREAT.IMG.INCOMPATIBLE</xref></t>

<t>Implemented By: <xref target="element-vendor-id">Vendor ID Condition</xref>, <xref target="element-class-id">Class ID Condition</xref></t>

</section>
<section anchor="req-sec-rights" title="REQ.SEC.RIGHTS: Rights Require Authenticity">

<t>If a device grants different rights to different actors, exercising those rights MUST be accompanied by proof of those rights, in the form of proof of authenticity. Authenticity mechanisms such as those required in <xref target="req-sec-authentic">REQ.SEC.AUTHENTIC</xref> can be used to prove authenticity.</t>

<t>For example, if a device has a policy that requires that firmware have both an Authorship right and a Qualification right and if that device grants Authorship and Qualification rights to different parties, such as a Device Operator and a Network Operator, respectively, then the firmware cannot be installed without proof of rights from both the Device and the Network Operator.</t>

<t>Mitigates: <xref target="threat-upd-interop">THREAT.UPD.INTEROP</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-sec-image-confidentiality" title="REQ.SEC.IMG.CONFIDENTIALITY: Payload Encryption">

<t>The manifest information model MUST enable encrypted payloads. Encryption helps to prevent third parties, including attackers, from reading the content of the firmware image. This can protect against confidential information disclosures and discovery of vulnerabilities through reverse engineering. Therefore the manifest must convey the information required to allow an intended recipient to decrypt an encrypted payload.</t>

<t>Mitigates: <xref target="threat-img-disclosure">THREAT.IMG.DISCLOSURE</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: <xref target="manifest-element-encryption-wrapper">Encryption Wrapper</xref></t>

</section>
<section anchor="req-sec-access-control" title="REQ.SEC.ACCESS_CONTROL: Access Control">

<t>If a device grants different rights to different actors, then an exercise of those rights MUST be validated against a list of rights for the actor. This typically takes the form of an Access Control List (ACL). ACLs are applied to two scenarios:</t>

<t><list style="numbers">
  <t>An ACL decides which elements of the manifest may be overridden and by which actors.</t>
  <t>An ACL decides which component identifier/storage identifier pairs can be written by which actors.</t>
</list></t>

<t>Mitigates: <xref target="threat-mfst-override">THREAT.MFST.OVERRIDE</xref>, <xref target="threat-upd-interop">THREAT.UPD.INTEROP</xref></t>

<t>Implemented by: Client-side code, not specified in manifest.</t>

</section>
<section anchor="req-sec-mfst-confidentiality" title="REQ.SEC.MFST.CONFIDENTIALITY: Encrypted Manifests">

<t>It MUST be possible to encrypt part or all of the manifest. This may be accomplished with either transport encryption or with at-rest encryption.</t>

<t>Mitigates: <xref target="threat-mfst-exposure">THREAT.MFST.EXPOSURE</xref>, <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

<t>Implemented by: External Encryption Wrapper / Transport Security</t>

</section>
<section anchor="req-sec-img-complete-digest" title="REQ.SEC.IMG.COMPLETE_DIGEST: Whole Image Digest">

<t>The digest SHOULD cover all available space in a fixed-size storage location. Variable-size storage locations MUST be restricted to exactly the size of deployed payload. This prevents any data from being distributed without being covered by the digest. For example, XIP microcontrollers typically have fixed-size storage. These devices should deploy a digest that covers the deployed firmware image, concatenated with the default erased value of any remaining space.</t>

<t>Mitigates: <xref target="threat-img-extra">THREAT.IMG.EXTRA</xref></t>

<t>Implemented by: <xref target="manifest-element-payload-digest">Payload Digests</xref></t>

</section>
<section anchor="req-sec-reporting" title="REQ.SEC.REPORTING: Secure Reporting">

<t>Status reports from the device to any remote system SHOULD be performed over an authenticated, confidential channel in order to prevent modification or spoofing of the reports.</t>

<t>Mitigates: <xref target="threat-net-mitm">THREAT.NET.MITM</xref></t>

</section>
<section anchor="req-sec-key-protection" title="REQ.SEC.KEY.PROTECTION: Protected storage of signing keys">

<t>Cryptographic keys for signing manifests SHOULD be stored in a manner that is inaccessible to networked devices, for example in an HSM, or an air-gapped computer. This protects against an attacker obtaining the keys.</t>

<t>Keys SHOULD be stored in a way that limits the risk of a legitimate, but compromised, entity (such as a server or developer computer) issuing signing requests.</t>

<t>Mitigates: <xref target="threat-key-exposure">THREAT.KEY.EXPOSURE</xref></t>

</section>
<section anchor="req-sec-mfst-check" title="REQ.SEC.MFST.CHECK: Validate manifests prior to deployment">

<t>Manifests SHOULD be parsed and examined prior to deployment to validate that their contents have not been modified during creation and signing.</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
<section anchor="req-sec-mfst-trusted" title="REQ.SEC.MFST.TRUSTED: Construct manifests in a trusted environment">

<t>For high risk deployments, such as large numbers of devices or critical function devices, manifests SHOULD be constructed in an environment that is protected from interference, such as an air-gapped computer. Note that a networked computer connected to an HSM does not fulfill this requirement (see <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref>).</t>

<t>Mitigates: <xref target="threat-mfst-modification">THREAT.MFST.MODIFICATION</xref></t>

</section>
</section>
<section anchor="user-stories" title="User Stories">

<t>User stories provide expected use cases. These are used to feed into usability requirements.</t>

<section anchor="user-story-install-instructions" title="USER_STORY.INSTALL.INSTRUCTIONS: Installation Instructions">

<t>As a Device Operator, I want to provide my devices with additional installation instructions so that I can keep process details out of my payload data.</t>

<t>Some installation instructions might be:</t>

<t><list style="symbols">
  <t>Use a table of hashes to ensure that each block of the payload is validate before writing.</t>
  <t>Do not report progress.</t>
  <t>Pre-cache the update, but do not install.</t>
  <t>Install the pre-cached update matching this manifest.</t>
  <t>Install this update immediately, overriding any long-running tasks.</t>
</list></t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-fail-early" title="USER_STORY.MFST.FAIL_EARLY: Fail Early">

<t>As a designer of a resource-constrained IoT device, I want bad updates to fail as early as possible to preserve battery life and limit consumed bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
<section anchor="user-story-override" title="USER_STORY.OVERRIDE: Override Non-Critical Manifest Elements">

<t>As a Device Operator, I would like to be able to override the non-critical information in the manifest so that I can control my devices more precisely. The authority to override this information is provided via the installation of a limited trust anchor by another authority.</t>

<t>Some examples of potentially overridable information:</t>

<t><list style="symbols">
  <t><xref target="manifest-element-resource-indicator">URIs</xref>: this allows the Device Operator to direct devices to their own infrastructure in order to reduce network load.</t>
  <t>Conditions: this allows the Device Operator to pose additional constraints on the installation of the manifest.</t>
  <t><xref target="manifest-element-additional-install-info">Directives</xref>: this allows the Device Operator to add more instructions such as time of installation.</t>
  <t><xref target="manifest-element-processing-steps">Processing Steps</xref>: If an intermediary performs an action on behalf of a device, it may need to override the processing steps. It is still possible for a device to verify the final content and the result of any processing step that specifies a digest. Some processing steps should be non-overridable.</t>
</list></t>

<t>Satisfied by: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-component" title="USER_STORY.COMPONENT: Component Update">

<t>As a Device Operator, I want to divide my firmware into components, so that I can reduce the size of updates, make different parties responsible for different components, and divide my firmware into frequently updated and infrequently updated components.</t>

<t>Satisfied by: <xref target="req-use-mfst-component">REQ.USE.MFST.COMPONENT</xref></t>

</section>
<section anchor="user-story-multi-auth" title="USER_STORY.MULTI_AUTH: Multiple Authorisations">

<t>As a Device Operator, I want to ensure the quality of a firmware update before installing it, so that I can ensure interoperability of all devices in my product family. I want to restrict the ability to make changes to my devices to require my express approval.</t>

<t>Satisfied by: <xref target="req-use-mfst-multi-auth">REQ.USE.MFST.MULTI_AUTH</xref>, <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref></t>

</section>
<section anchor="user-story-img-format" title="USER_STORY.IMG.FORMAT: Multiple Payload Formats">

<t>As a Device Operator, I want to be able to send multiple payload formats to suit the needs of my update, so that I can optimise the bandwidth used by my devices.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref></t>

</section>
<section anchor="user-story-img-confidentiality" title="USER_STORY.IMG.CONFIDENTIALITY: Prevent Confidential Information Disclosures">

<t>As a firmware author, I want to prevent confidential information from being disclosed during firmware updates. It is assumed that channel security or at-rest encryption is adequate to protect the manifest itself against information disclosure.</t>

<t>Satisfied by: <xref target="req-sec-image-confidentiality">REQ.SEC.IMG.CONFIDENTIALITY</xref></t>

</section>
<section anchor="user-story-img-unknown-format" title="USER_STORY.IMG.UNKNOWN_FORMAT: Prevent Devices from Unpacking Unknown Formats">

<t>As a Device Operator, I want devices to determine whether they can process a payload prior to downloading it.</t>

<t>In some cases, it may be desirable for a third party to perform some processing on behalf of a target. For this to occur, the third party MUST indicate what processing occurred and how to verify it against the Trust Provisioning Authority’s intent.</t>

<t>This amounts to overriding <xref target="manifest-element-processing-steps">Processing Steps</xref> and <xref target="manifest-element-resource-indicator">Resource Indicator</xref>.</t>

<t>Satisfied by: <xref target="req-use-img-format">REQ.USE.IMG.FORMAT</xref>, <xref target="req-use-img-nested">REQ.USE.IMG.NESTED</xref>, <xref target="req-use-mfst-override">REQ.USE.MFST.OVERRIDE_REMOTE</xref></t>

</section>
<section anchor="user-story-img-current-version" title="USER_STORY.IMG.CURRENT_VERSION: Specify Version Numbers of Target Firmware">

<t>As a Device Operator, I want to be able to target devices for updates based on their current firmware version, so that I can control which versions are replaced with a single manifest.</t>

<t>Satisfied by: <xref target="req-use-img-versions">REQ.USE.IMG.VERSIONS</xref></t>

</section>
<section anchor="user-story-img-select" title="USER_STORY.IMG.SELECT: Enable Devices to Choose Between Images">

<t>As a developer, I want to be able to sign two or more versions of my firmware in a single manifest so that I can use a very simple bootloader that chooses between two or more images that are executed in-place.</t>

<t>Satisfied by: <xref target="req-use-img-select">REQ.USE.IMG.SELECT</xref></t>

</section>
<section anchor="user-story-exec-mfst" title="USER_STORY.EXEC.MFST: Secure Execution Using Manifests">

<t>As a signer for both secure execution/boot and firmware deployment, I would like to use the same signed document for both tasks so that my data size is smaller, I can share common code, and I can reduce signature verifications.</t>

<t>Satisfied by: <xref target="req-use-exec">REQ.USE.EXEC</xref></t>

</section>
<section anchor="user-story-exec-decompress" title="USER_STORY.EXEC.DECOMPRESS: Decompress on Load">

<t>As a developer of firmware for a run-from-RAM device, I would like to use compressed images and to indicate to the bootloader that I am using a compressed image in the manifest so that it can be used with secure execution/boot.</t>

<t>Satisfied by: <xref target="req-use-load">REQ.USE.LOAD</xref></t>

</section>
<section anchor="user-story-mfst-img" title="USER_STORY.MFST.IMG: Payload in Manifest">

<t>As an operator of devices on a constrained network, I would like the manifest to be able to include a small payload in the same packet so that I can reduce network traffic.</t>

<t>Satisfied by: <xref target="req-use-payload">REQ.USE.PAYLOAD</xref></t>

</section>
<section anchor="user-story-mfst-parse" title="USER_STORY.MFST.PARSE: Simple Parsing">

<t>As a developer for constrained devices, I want a low complexity library for processing updates so that I can fit more application code on my device.</t>

<t>Satisfied by: <xref target="req-use-parse">REQ.USE.PARSE</xref></t>

</section>
<section anchor="user-story-mfst-delegation" title="USER_STORY.MFST.DELEGATION: Delegated Authority in Manifest">

<t>As a Device Operator that rotates delegated authority more often than delivering firmware updates, I would like to delegate a new authority when I deliver a firmware update so that I can accomplish both tasks in a single transmission.</t>

<t>Satisfied by: <xref target="req-use-delegation">REQ.USE.DELEGATION</xref></t>

</section>
<section anchor="user-story-mfst-pre-check" title="USER_STORY.MFST.PRE_CHECK: Update Evaluation">

<t>As an operator of a constrained network, I would like devices on my network to be able to evaluate the suitability of an update prior to initiating any large download so that I can prevent unnecessary consumption of bandwidth.</t>

<t>Satisfied by: <xref target="req-use-mfst-pre-check">REQ.USE.MFST.PRE_CHECK</xref></t>

</section>
</section>
<section anchor="usability-requirements" title="Usability Requirements">

<t>The following usability requirements satisfy the user stories listed above.</t>

<section anchor="req-use-mfst-pre-check" title="REQ.USE.MFST.PRE_CHECK: Pre-Installation Checks">

<t>It MUST be possible for a manifest author to place ALL information required to process an update in the manifest.</t>

<t>For example: Information about which precursor image is required for a differential update MUST be placed in the manifest, not in the differential compression header.</t>

<t>Satisfies: [USER_STORY.MFST.PRE_CHECK(#user-story-mfst-pre-check), <xref target="user-story-install-instructions">USER_STORY.INSTALL.INSTRUCTIONS</xref></t>

<t>Implemented by: <xref target="manifest-element-additional-install-info">Additional installation instructions</xref></t>

</section>
<section anchor="req-use-mfst-override" title="REQ.USE.MFST.OVERRIDE_REMOTE: Override Remote Resource Location">

<t>It MUST be possible to redirect payload fetches. This applies where two manifests are used in conjunction. For example, a Device Operator creates a manifest specifying a payload and signs it, and provides a URI for that payload. A Network Operator creates a second manifest, with a dependency on the first. They use this second manifest to override the URIs provided by the Device Operator, directing them into their own infrastructure instead. Some devices may provide this capability, while others may only look at canonical sources of firmware. For this to be possible, the device must fetch the payload, whereas a device that accepts payload pushes will ignore this feature.</t>

<t>N.B. If a manifest is delivered over an authenticated channel and that manifest contains only override information for which the remote is authorised, then it can be considered authenticated by the channel authentication.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref></t>

<t>Implemented by: <xref target="manifest-element-aliases">Aliases</xref></t>

</section>
<section anchor="req-use-mfst-component" title="REQ.USE.MFST.COMPONENT: Component Updates">

<t>It MUST be possible express the requirement to install one or more payloads from one or more authorities so that a multi-payload update can be described. This allows multiple parties with different permissions to collaborate in creating a single update for the IoT device, across multiple components.</t>

<t>This requirement effectively means that it must be possible to construct a tree of manifests on a multi-image target.</t>

<t>In order to enable devices with a heterogeneous storage architecture, the manifest must enable specification of both storage system and the storage location within that storage system.</t>

<t>Satisfies: <xref target="user-story-override">USER_STORY.OVERRIDE</xref>, <xref target="user-story-component">USER_STORY.COMPONENT</xref></t>

<t>Implemented by Manifest Element: Dependencies, StorageIdentifier, ComponentIdentifier</t>

<section anchor="example-1-multiple-microcontrollers" title="Example 1: Multiple Microcontrollers">

<t>An IoT device with multiple microcontrollers in the same physical device (HeSA) will likely require multiple payloads with different component identifiers.</t>

</section>
<section anchor="example-2-code-and-configuration" title="Example 2: Code and Configuration">

<t>A firmware image can be divided into two payloads: code and configuration. These payloads may require authorizations from different actors in order to install (see <xref target="req-sec-rights">REQ.SEC.RIGHTS</xref> and <xref target="req-sec-access-control">REQ.SEC.ACCESS_CONTROL</xref>). This structure means that multiple manifests may be required, with a dependency structure between them.</t>

</section>
<section anchor="example-3-multiple-software-modules" title="Example 3: Multiple Software Modules">

<t>A firmware image can be divided into multiple functional blocks for separate testing and distribution. This means that code would need to be distributed in multiple payloads. For example, this might be desirable in order to ensure that common code between devices is identical in order to reduce distribution bandwidth.</t>

</section>
</section>
<section anchor="req-use-mfst-multi-auth" title="REQ.USE.MFST.MULTI_AUTH: Multiple authentications">

<t>It MUST be possible to authenticate a manifest multiple times so that authorisations from multiple parties with different permissions can be required in order to authorise installation of a manifest.</t>

<t>Satisfies: <xref target="user-story-multi-auth">USER_STORY.MULTI_AUTH</xref></t>

<t>Implemented by: <xref target="manifest-element-signature">Signature</xref></t>

</section>
<section anchor="req-use-img-format" title="REQ.USE.IMG.FORMAT: Format Usability">

<t>The manifest serialisation MUST accommodate any payload format that an Operator wishes to use. This enables the recipient to detect which format the Operator has chosen. Some examples of payload format are:</t>

<t><list style="symbols">
  <t>Binary</t>
  <t>Elf</t>
  <t>Differential</t>
  <t>Compressed</t>
  <t>Packed configuration</t>
  <t>Intel HEX</t>
  <t>S-Record</t>
</list></t>

<t>Satisfies: <xref target="user-story-img-format">USER_STORY.IMG.FORMAT</xref> <xref target="user-story-img-unknown-format">USER_STORY.IMG.UNKNOWN_FORMAT</xref></t>

<t>Implemented by: <xref target="manifest-element-format">Payload Format</xref></t>

</section>
<section anchor="req-use-img-nested" title="REQ.USE.IMG.NESTED: Nested Formats">

<t>The manifest serialisation MUST accommodate nested formats, announcing to the target device all the nesting steps and any parameters used by those steps.</t>

<t>Satisfies: <xref target="user-story-img-confidentiality">USER_STORY.IMG.CONFIDENTIALITY</xref></t>

<t>Implemented by: <xref target="manifest-element-processing-steps">Processing Steps</xref></t>

</section>
<section anchor="req-use-img-versions" title="REQ.USE.IMG.VERSIONS: Target Version Matching">

<t>The manifest serialisation MUST provide a method to specify multiple version numbers of firmware to which the manifest applies, either with a list or with range matching.</t>

<t>Satisfies: <xref target="user-story-img-current-version">USER_STORY.IMG.CURRENT_VERSION</xref></t>

<t>Implemented by: <xref target="element-required-version">Required Image Version List</xref></t>

</section>
<section anchor="req-use-img-select" title="REQ.USE.IMG.SELECT: Select Image by Destination">

<t>The manifest serialisation MUST provide a mechanism to list multiple equivalent payloads by Execute-In-Place Installation Address, including the payload digest and, optionally, payload URIs.</t>

<t>Satisfies: <xref target="user-story-img-select">USER_STORY.IMG.SELECT</xref></t>

<t>Implemented by: <xref target="manifest-element-xip-address">XIP Address</xref></t>

</section>
<section anchor="req-use-exec" title="REQ.USE.EXEC: Executable Manifest">
<t>It MUST be possible to describe an executable system with a manifest on both Execute-In-Place microcontrollers and on complex operating systems. This requires the manifest to specify the digest of each statically linked dependency. In addition, the manifest serialisation MUST be able to express metadata, such as a kernel command-line, used by any loader or bootloader.</t>

<t>Satisfies: <xref target="user-story-exec-mfst">USER_STORY.EXEC.MFST</xref></t>

<t>Implemented by: <xref target="manifest-element-exec-metadata">Run-time metadata</xref></t>

</section>
<section anchor="req-use-load" title="REQ.USE.LOAD: Load-Time Information">

<t>It MUST be possible to specify additional metadata for load time processing of a payload, such as cryptographic information, load-address, and compression algorithm.</t>

<t>N.B. load comes before exec/boot.</t>

<t>Satisfies: <xref target="user-story-exec-decompress">USER_STORY.EXEC.DECOMPRESS</xref></t>

<t>Implemented by: <xref target="manifest-element-load-metadata">Load-time metadata</xref></t>

</section>
<section anchor="req-use-payload" title="REQ.USE.PAYLOAD: Payload in Manifest Superstructure">

<t>It MUST be possible to place a payload in the same structure as the manifest. This MAY place the payload in the same packet as the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-img">USER_STORY.MFST.IMG</xref></t>

<t>Implemented by: <xref target="manifest-element-payload">Payload</xref></t>

</section>
<section anchor="req-use-parse" title="REQ.USE.PARSE: Simple Parsing">

<t>The structure of the manifest MUST be simple to parse, without need for a general-purpose parser.</t>

<t>Satisfies: <xref target="user-story-mfst-parse">USER_STORY.MFST.PARSE</xref></t>

<t>Implemented by: N/A</t>

</section>
<section anchor="req-use-delegation" title="REQ.USE.DELEGATION: Delegation of Authority in Manifest">

<t>Any serialisation MUST enable the delivery of a key claim with, but not authenticated by, a manifest. This key claim delivers a new key with which the recipient can verify the manifest.</t>

<t>Satisfies: <xref target="user-story-mfst-delegation">USER_STORY.MFST.DELEGATION</xref></t>

<t>Implemented by: <xref target="manifest-element-key-claims">Key Claims</xref></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank our working group chairs, Dave Thaler, Russ Housley and David Waltermire, for their review comments and their support.</t>

<t>We would like to thank the participants of the 2018 Berlin SUIT Hackathon and the June 2018 virtual design team meetings for their discussion input.
In particular, we would like to thank Koen Zandberg, Emmanuel Baccelli, Carsten Bormann, David Brown, Markus Gueller, Frank Audun Kvamtro, Oyvind Ronningstad, Michael Richardson, Jan-Frederik Rieckers, Francisco Acosta, Anton Gerasimov, Matthias Waehlisch, Max Groening, Daniel Petry, Gaetan Harter, Ralph Hamm, Steve Patrick, Fabio Utzig, Paul Lambert, Benjamin Kaduk, Said Gharout, and Milen Stoychev.</t>

<t>We would like to thank those who contributed to the development of this information model. In particular, we would like to thank Milosch Meriac, Jean-Luc Giraud, Dan Ros, Amyas Philips, and Gary Thomson.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<date month='September' day='13' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.  This version of the document assumes asymmetric cryptography and a public key infrastructure.  Future versions may also describe a symmetric key approach for very constrained devices.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-06.txt' />
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="STRIDE" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx">
  <front>
    <title>The STRIDE Threat Model</title>
    <author >
      <organization>Microsoft</organization>
    </author>
    <date year="2018" month="May"/>
  </front>
  <format type="HTML" target="https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx"/>
</reference>




<reference  anchor="RFC5652" target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2009' month='September' />
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>




    </references>


<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

